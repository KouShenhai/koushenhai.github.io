(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(t){function e(e){for(var r,a,o=e[0],l=e[1],c=e[2],u=0,d=[];u<o.length;u++)a=o[u],Object.prototype.hasOwnProperty.call(i,a)&&i[a]&&d.push(i[a][0]),i[a]=0;for(r in l)Object.prototype.hasOwnProperty.call(l,r)&&(t[r]=l[r]);for(p&&p(e);d.length;)d.shift()();return s.push.apply(s,c||[]),n()}function n(){for(var t,e=0;e<s.length;e++){for(var n=s[e],r=!0,o=1;o<n.length;o++){var l=n[o];0!==i[l]&&(r=!1)}r&&(s.splice(e--,1),t=a(a.s=n[0]))}return t}var r={},i={8:0},s=[];function a(e){if(r[e])return r[e].exports;var n=r[e]={i:e,l:!1,exports:{}};return t[e].call(n.exports,n,n.exports,a),n.l=!0,n.exports}a.e=function(t){var e=[],n=i[t];if(0!==n)if(n)e.push(n[2]);else{var r=new Promise((function(e,r){n=i[t]=[e,r]}));e.push(n[2]=r);var s,o=document.createElement("script");o.charset="utf-8",o.timeout=120,a.nc&&o.setAttribute("nonce",a.nc),o.src=function(t){return a.p+"assets/js/"+({9:"vendors~docsearch"}[t]||t)+"."+{1:"e75048d7",2:"7718743e",3:"57ce2480",4:"4a1b9f8b",5:"952108e8",6:"bd726b7f",7:"0c069817",9:"52229aeb",10:"800b373e",11:"018c06f8",12:"989cb881",13:"b2687a89",14:"b170e7b8",15:"68bcbef6",16:"ea3c2918",17:"974da1f7",18:"8166579f",19:"00d4def2",20:"af9a3da1",21:"a5f5dd2e",22:"26a48310",23:"c0a60b60",24:"57d7f1c8",25:"af36e1cf",26:"5b165ef7",27:"121a426f",28:"4346114a",29:"73aa83c0",30:"2045eab9",31:"3de44d63",32:"6d0a4721",33:"d4e9d5f0",34:"138cbacc",35:"537e49dd",36:"bdb9b427",37:"aa89c982",38:"0573ac3d",39:"d1ace787",40:"8ca21d3a",41:"349b3889",42:"28ae6a74",43:"afded6e3",44:"e82286fc",45:"9bdb1d47",46:"5203a114",47:"714cd7d3",48:"ff08ff6a",49:"e61ca4ca",50:"58533ba4",51:"e5ab0418",52:"f111b387",53:"3640ce48",54:"6865ae68",55:"aff2ed85",56:"9f37e14f",57:"907401a4",58:"d3c3dffa",59:"51d9c7b1",60:"b7a89741",61:"0c024ef4",62:"4f7207c9",63:"218eb2ae",64:"88456dbe",65:"8c34a193",66:"3c87a65f",67:"7250100c",68:"a03d747d",69:"327d8c83",70:"2cb960c0",71:"36d04ff8",72:"d42fdc5e",73:"e05b2d66",74:"7a812c90",75:"d12342e7",76:"a5ff5487",77:"9365fed4",78:"5ef55240",79:"43abf06c",80:"5dd0a645",81:"eb4d1112",82:"cf92fa1e",83:"6e188482",84:"2232d800",85:"dcfa8351",86:"e603064a",87:"2a685f02",88:"51741d80",89:"f42cdf7f",90:"6d22ca7a",91:"7a93f3a1",92:"f25f0871",93:"441a45a4",94:"c8108275",95:"5c38ac16",96:"25019692",97:"ee7b7752",98:"7c59800c",99:"e2b8a4d6",100:"0253e271",101:"dc6c4c54",102:"6aff6e38",103:"ec612d31",104:"583d0806",105:"3709c260",106:"0711014e",107:"3534153d",108:"a6514095",109:"e26788a5",110:"7c1b1482",111:"2069eec2",112:"c40bc0ef",113:"9cd79e03",114:"2b2a79de",115:"45f7f671",116:"a60691d5",117:"f3a7b1e9",118:"df8e36eb",119:"468e7182",120:"26fc0cba",121:"1c0c5f85",122:"f6bab1bb",123:"00a5287e",124:"ed0efcc2",125:"43e11029",126:"7f6c8e77",127:"a476bbc2",128:"6b8be6dc",129:"a1dcaf5e",130:"389a1d65",131:"a6deca76"}[t]+".js"}(t);var l=new Error;s=function(e){o.onerror=o.onload=null,clearTimeout(c);var n=i[t];if(0!==n){if(n){var r=e&&("load"===e.type?"missing":e.type),s=e&&e.target&&e.target.src;l.message="Loading chunk "+t+" failed.\n("+r+": "+s+")",l.name="ChunkLoadError",l.type=r,l.request=s,n[1](l)}i[t]=void 0}};var c=setTimeout((function(){s({type:"timeout",target:o})}),12e4);o.onerror=o.onload=s,document.head.appendChild(o)}return Promise.all(e)},a.m=t,a.c=r,a.d=function(t,e,n){a.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},a.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},a.t=function(t,e){if(1&e&&(t=a(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(a.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)a.d(n,r,function(e){return t[e]}.bind(null,r));return n},a.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return a.d(e,"a",e),e},a.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},a.p="/",a.oe=function(t){throw console.error(t),t};var o=window.webpackJsonp=window.webpackJsonp||[],l=o.push.bind(o);o.push=e,o=o.slice();for(var c=0;c<o.length;c++)e(o[c]);var p=l;s.push([129,0]),n()}([function(t,e,n){"use strict";var r=function(t){return t&&t.Math===Math&&t};t.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof global&&global)||r("object"==typeof this&&this)||function(){return this}()||Function("return this")()},function(t,e,n){"use strict";t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,n){"use strict";var r="object"==typeof document&&document.all;t.exports=void 0===r&&void 0!==r?function(t){return"function"==typeof t||t===r}:function(t){return"function"==typeof t}},function(t,e,n){"use strict";var r=n(9),i=String,s=TypeError;t.exports=function(t){if(r(t))return t;throw new s(i(t)+" is not an object")}},function(t,e,n){"use strict";var r=n(11),i=n(0),s=n(144),a=n(3),o=n(2),l=n(87),c=n(127),p=n(146),u=n(1),d=n(10),m=n(17),g=n(88).IteratorPrototype,h=n(6),f=n(24),v=m("toStringTag"),b=TypeError,y=i.Iterator,x=f||!o(y)||y.prototype!==g||!u((function(){y({})})),k=function(){if(s(this,g),l(this)===g)throw new b("Abstract class Iterator not directly constructable")},w=function(t,e){h?c(g,t,{configurable:!0,get:function(){return e},set:function(e){if(a(this),this===g)throw new b("You can't redefine this property");d(this,t)?this[t]=e:p(this,t,e)}}):g[t]=e};d(g,v)||w(v,"Iterator"),!x&&d(g,"constructor")&&g.constructor!==Object||w("constructor",k),k.prototype=g,r({global:!0,constructor:!0,forced:x},{Iterator:k})},function(t,e,n){"use strict";var r=n(34),i=Function.prototype,s=i.call,a=r&&i.bind.bind(s,s);t.exports=r?a:function(t){return function(){return s.apply(t,arguments)}}},function(t,e,n){"use strict";var r=n(1);t.exports=!r((function(){return 7!==Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(t,e,n){"use strict";var r=n(34),i=Function.prototype.call;t.exports=r?i.bind(i):function(){return i.apply(i,arguments)}},function(t,e,n){"use strict";var r=n(2),i=n(50),s=TypeError;t.exports=function(t){if(r(t))return t;throw new s(i(t)+" is not a function")}},function(t,e,n){"use strict";var r=n(2);t.exports=function(t){return"object"==typeof t?null!==t:r(t)}},function(t,e,n){"use strict";var r=n(5),i=n(32),s=r({}.hasOwnProperty);t.exports=Object.hasOwn||function(t,e){return s(i(t),e)}},function(t,e,n){"use strict";var r=n(0),i=n(70).f,s=n(25),a=n(46),o=n(52),l=n(84),c=n(143);t.exports=function(t,e){var n,p,u,d,m,g=t.target,h=t.global,f=t.stat;if(n=h?r:f?r[g]||o(g,{}):r[g]&&r[g].prototype)for(p in e){if(d=e[p],u=t.dontCallGetSet?(m=i(n,p))&&m.value:n[p],!c(h?p:g+(f?".":"#")+p,t.forced)&&void 0!==u){if(typeof d==typeof u)continue;l(d,u)}(t.sham||u&&u.sham)&&s(d,"sham",!0),a(n,p,d,t)}}},function(t,e,n){"use strict";var r=n(7),i=n(3),s=n(39);t.exports=function(t,e,n){var a,o;i(t);try{if(!(a=s(t,"return"))){if("throw"===e)throw n;return n}a=r(a,t)}catch(t){o=!0,a=t}if("throw"===e)throw n;if(o)throw a;return i(a),n}},function(t,e){var n=Array.isArray;t.exports=n},function(t,e,n){var r=n(98),i="object"==typeof self&&self&&self.Object===Object&&self,s=r||i||Function("return this")();t.exports=s},function(t,e,n){"use strict";function r(t,e,n,r,i,s,a,o){var l,c="function"==typeof t?t.options:t;if(e&&(c.render=e,c.staticRenderFns=n,c._compiled=!0),r&&(c.functional=!0),s&&(c._scopeId="data-v-"+s),a?(l=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),i&&i.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(a)},c._ssrRegister=l):i&&(l=o?function(){i.call(this,(c.functional?this.parent:this).$root.$options.shadowRoot)}:i),l)if(c.functional){c._injectStyles=l;var p=c.render;c.render=function(t,e){return l.call(e),p(t,e)}}else{var u=c.beforeCreate;c.beforeCreate=u?[].concat(u,l):[l]}return{exports:t,options:c}}n.d(e,"a",(function(){return r}))},function(t,e,n){"use strict";var r=n(11),i=n(7),s=n(8),a=n(3),o=n(26),l=n(89),c=n(90),p=n(24),u=n(12),d=n(91),m=n(27),g=!p&&!d("filter",(function(){})),h=!p&&!g&&m("filter",TypeError),f=p||g||h,v=l((function(){for(var t,e,n=this.iterator,r=this.predicate,s=this.next;;){if(t=a(i(s,n)),this.done=!!t.done)return;if(e=t.value,c(n,r,[e,this.counter++],!0))return e}}));r({target:"Iterator",proto:!0,real:!0,forced:f},{filter:function(t){a(this);try{s(t)}catch(t){u(this,"throw",t)}return h?i(h,this,t):new v(o(this),{predicate:t})}})},function(t,e,n){"use strict";var r=n(0),i=n(77),s=n(10),a=n(78),o=n(74),l=n(73),c=r.Symbol,p=i("wks"),u=l?c.for||c:c&&c.withoutSetter||a;t.exports=function(t){return s(p,t)||(p[t]=o&&s(c,t)?c[t]:u("Symbol."+t)),p[t]}},function(t,e,n){"use strict";var r=n(11),i=n(7),s=n(47),a=n(8),o=n(3),l=n(26),c=n(12),p=n(27)("forEach",TypeError);r({target:"Iterator",proto:!0,real:!0,forced:p},{forEach:function(t){o(this);try{a(t)}catch(t){c(this,"throw",t)}if(p)return i(p,this,t);var e=l(this),n=0;s(e,(function(e){t(e,n++)}),{IS_RECORD:!0})}})},function(t,e,n){"use strict";var r=n(6),i=n(79),s=n(81),a=n(3),o=n(71),l=TypeError,c=Object.defineProperty,p=Object.getOwnPropertyDescriptor;e.f=r?s?function(t,e,n){if(a(t),e=o(e),a(n),"function"==typeof t&&"prototype"===e&&"value"in n&&"writable"in n&&!n.writable){var r=p(t,e);r&&r.writable&&(t[e]=n.value,n={configurable:"configurable"in n?n.configurable:r.configurable,enumerable:"enumerable"in n?n.enumerable:r.enumerable,writable:!1})}return c(t,e,n)}:c:function(t,e,n){if(a(t),e=o(e),a(n),i)try{return c(t,e,n)}catch(t){}if("get"in n||"set"in n)throw new l("Accessors not supported");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){var r=n(196),i=n(199);t.exports=function(t,e){var n=i(t,e);return r(n)?n:void 0}},function(t,e,n){"use strict";n.d(e,"e",(function(){return r})),n.d(e,"b",(function(){return s})),n.d(e,"j",(function(){return a})),n.d(e,"g",(function(){return l})),n.d(e,"h",(function(){return c})),n.d(e,"i",(function(){return p})),n.d(e,"c",(function(){return u})),n.d(e,"f",(function(){return d})),n.d(e,"l",(function(){return m})),n.d(e,"m",(function(){return g})),n.d(e,"d",(function(){return f})),n.d(e,"k",(function(){return v})),n.d(e,"n",(function(){return b})),n.d(e,"a",(function(){return x}));n(31),n(4),n(16),n(18),n(22);const r=/#.*$/,i=/\.(md|html)$/,s=/\/$/,a=/^[a-z]+:/i;function o(t){return decodeURI(t).replace(r,"").replace(i,"")}function l(t){return a.test(t)}function c(t){return/^mailto:/.test(t)}function p(t){return/^tel:/.test(t)}function u(t){if(l(t))return t;if(!t)return"404";const e=t.match(r),n=e?e[0]:"",i=o(t);return s.test(i)?t:i+".html"+n}function d(t,e){const n=t.hash,i=function(t){const e=t&&t.match(r);if(e)return e[0]}(e);if(i&&n!==i)return!1;return o(t.path)===o(e)}function m(t,e,n){if(l(e))return{type:"external",path:e};n&&(e=function(t,e,n){const r=t.charAt(0);if("/"===r)return t;if("?"===r||"#"===r)return e+t;const i=e.split("/");n&&i[i.length-1]||i.pop();const s=t.replace(/^\//,"").split("/");for(let t=0;t<s.length;t++){const e=s[t];".."===e?i.pop():"."!==e&&i.push(e)}""!==i[0]&&i.unshift("");return i.join("/")}(e,n));const r=o(e);for(let e=0;e<t.length;e++)if(o(t[e].regularPath)===r)return Object.assign({},t[e],{type:"page",path:u(t[e].path)});return console.error(`[vuepress] No matching page found for sidebar item "${e}"`),{}}function g(t,e,n,r){const{pages:i,themeConfig:s}=n,a=r&&s.locales&&s.locales[r]||s;if("auto"===(t.frontmatter.sidebar||a.sidebar||s.sidebar))return h(t);const o=a.sidebar||s.sidebar;if(o){const{base:n,config:r}=function(t,e){if(Array.isArray(e))return{base:"/",config:e};for(const r in e)if(0===(n=t,/(\.html|\/)$/.test(n)?n:n+"/").indexOf(encodeURI(r)))return{base:r,config:e[r]};var n;return{}}(e,o);return"auto"===r?h(t):r?r.map(t=>function t(e,n,r,i=1){if("string"==typeof e)return m(n,e,r);if(Array.isArray(e))return Object.assign(m(n,e[0],r),{title:e[1]});{i>3&&console.error("[vuepress] detected a too deep nested sidebar group.");const s=e.children||[];return 0===s.length&&e.path?Object.assign(m(n,e.path,r),{title:e.title}):{type:"group",path:e.path,title:e.title,sidebarDepth:e.sidebarDepth,initialOpenGroupIndex:e.initialOpenGroupIndex,children:s.map(e=>t(e,n,r,i+1)),collapsable:!1!==e.collapsable}}}(t,i,n)):[]}return[]}function h(t){const e=f(t.headers||[]);return[{type:"group",collapsable:!1,title:t.title,path:null,children:e.map(e=>({type:"auto",title:e.title,basePath:t.path,path:t.path+"#"+e.slug,children:e.children||[]}))}]}function f(t){let e;return(t=t.map(t=>Object.assign({},t))).forEach(t=>{2===t.level?e=t:e&&(e.children||(e.children=[])).push(t)}),t.filter(t=>2===t.level)}function v(t){return Object.assign(t,{type:t.items&&t.items.length?"links":"link"})}function b(t){return Object.prototype.toString.call(t).match(/\[object (.*?)\]/)[1].toLowerCase()}function y(t){let e=t.frontmatter.date||t.lastUpdated||new Date,n=new Date(e);return"Invalid Date"==n&&e&&(n=new Date(e.replace(/-/g,"/"))),n.getTime()}function x(t,e){return y(e)-y(t)}},function(t,e,n){"use strict";var r=n(11),i=n(7),s=n(8),a=n(3),o=n(26),l=n(89),c=n(90),p=n(12),u=n(91),d=n(27),m=n(24),g=!m&&!u("map",(function(){})),h=!m&&!g&&d("map",TypeError),f=m||g||h,v=l((function(){var t=this.iterator,e=a(i(this.next,t));if(!(this.done=!!e.done))return c(t,this.mapper,[e.value,this.counter++],!0)}));r({target:"Iterator",proto:!0,real:!0,forced:f},{map:function(t){a(this);try{s(t)}catch(t){p(this,"throw",t)}return h?i(h,this,t):new v(o(this),{mapper:t})}})},function(t,e){t.exports=function(t){return null!=t&&"object"==typeof t}},function(t,e,n){"use strict";t.exports=!1},function(t,e,n){"use strict";var r=n(6),i=n(19),s=n(35);t.exports=r?function(t,e,n){return i.f(t,e,s(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){"use strict";t.exports=function(t){return{iterator:t,next:t.next,done:!1}}},function(t,e,n){"use strict";var r=n(0);t.exports=function(t,e){var n=r.Iterator,i=n&&n.prototype,s=i&&i[t],a=!1;if(s)try{s.call({next:function(){return{done:!0}},return:function(){a=!0}},-1)}catch(t){t instanceof e||(a=!1)}if(!a)return s}},function(t,e,n){var r=n(30),i=n(181),s=n(182),a=r?r.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":a&&a in Object(t)?i(t):s(t)}},function(t,e,n){"use strict";var r=n(5),i=r({}.toString),s=r("".slice);t.exports=function(t){return s(i(t),8,-1)}},function(t,e,n){var r=n(14).Symbol;t.exports=r},function(t,e,n){"use strict";var r=n(11),i=n(32),s=n(33),a=n(175),o=n(177);r({target:"Array",proto:!0,arity:1,forced:n(1)((function(){return 4294967297!==[].push.call({length:4294967296},1)}))||!function(){try{Object.defineProperty([],"length",{writable:!1}).push()}catch(t){return t instanceof TypeError}}()},{push:function(t){var e=i(this),n=s(e),r=arguments.length;o(n+r);for(var l=0;l<r;l++)e[n]=arguments[l],n++;return a(e,n),n}})},function(t,e,n){"use strict";var r=n(48),i=Object;t.exports=function(t){return i(r(t))}},function(t,e,n){"use strict";var r=n(141);t.exports=function(t){return r(t.length)}},function(t,e,n){"use strict";var r=n(1);t.exports=!r((function(){var t=function(){}.bind();return"function"!=typeof t||t.hasOwnProperty("prototype")}))},function(t,e,n){"use strict";t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,n){"use strict";var r=n(67),i=n(48);t.exports=function(t){return r(i(t))}},function(t,e,n){"use strict";var r=n(0),i=n(2),s=function(t){return i(t)?t:void 0};t.exports=function(t,e){return arguments.length<2?s(r[t]):r[t]&&r[t][e]}},function(t,e,n){"use strict";var r=n(5);t.exports=r({}.isPrototypeOf)},function(t,e,n){"use strict";var r=n(8),i=n(49);t.exports=function(t,e){var n=t[e];return i(n)?void 0:r(n)}},function(t,e,n){var r=n(186),i=n(187),s=n(188),a=n(189),o=n(190);function l(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=i,l.prototype.get=s,l.prototype.has=a,l.prototype.set=o,t.exports=l},function(t,e,n){var r=n(100);t.exports=function(t,e){for(var n=t.length;n--;)if(r(t[n][0],e))return n;return-1}},function(t,e,n){var r=n(20)(Object,"create");t.exports=r},function(t,e,n){var r=n(208);t.exports=function(t,e){var n=t.__data__;return r(e)?n["string"==typeof e?"string":"hash"]:n.map}},function(t,e,n){var r=n(63);t.exports=function(t){if("string"==typeof t||r(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}},function(t,e,n){var r,i;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(i="function"==typeof(r=function(){var t,e,n={version:"0.2.0"},r=n.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function i(t,e,n){return t<e?e:t>n?n:t}function s(t){return 100*(-1+t)}n.configure=function(t){var e,n;for(e in t)void 0!==(n=t[e])&&t.hasOwnProperty(e)&&(r[e]=n);return this},n.status=null,n.set=function(t){var e=n.isStarted();t=i(t,r.minimum,1),n.status=1===t?null:t;var l=n.render(!e),c=l.querySelector(r.barSelector),p=r.speed,u=r.easing;return l.offsetWidth,a((function(e){""===r.positionUsing&&(r.positionUsing=n.getPositioningCSS()),o(c,function(t,e,n){var i;return(i="translate3d"===r.positionUsing?{transform:"translate3d("+s(t)+"%,0,0)"}:"translate"===r.positionUsing?{transform:"translate("+s(t)+"%,0)"}:{"margin-left":s(t)+"%"}).transition="all "+e+"ms "+n,i}(t,p,u)),1===t?(o(l,{transition:"none",opacity:1}),l.offsetWidth,setTimeout((function(){o(l,{transition:"all "+p+"ms linear",opacity:0}),setTimeout((function(){n.remove(),e()}),p)}),p)):setTimeout(e,p)})),this},n.isStarted=function(){return"number"==typeof n.status},n.start=function(){n.status||n.set(0);var t=function(){setTimeout((function(){n.status&&(n.trickle(),t())}),r.trickleSpeed)};return r.trickle&&t(),this},n.done=function(t){return t||n.status?n.inc(.3+.5*Math.random()).set(1):this},n.inc=function(t){var e=n.status;return e?("number"!=typeof t&&(t=(1-e)*i(Math.random()*e,.1,.95)),e=i(e+t,0,.994),n.set(e)):n.start()},n.trickle=function(){return n.inc(Math.random()*r.trickleRate)},t=0,e=0,n.promise=function(r){return r&&"resolved"!==r.state()?(0===e&&n.start(),t++,e++,r.always((function(){0==--e?(t=0,n.done()):n.set((t-e)/t)})),this):this},n.render=function(t){if(n.isRendered())return document.getElementById("nprogress");c(document.documentElement,"nprogress-busy");var e=document.createElement("div");e.id="nprogress",e.innerHTML=r.template;var i,a=e.querySelector(r.barSelector),l=t?"-100":s(n.status||0),p=document.querySelector(r.parent);return o(a,{transition:"all 0 linear",transform:"translate3d("+l+"%,0,0)"}),r.showSpinner||(i=e.querySelector(r.spinnerSelector))&&d(i),p!=document.body&&c(p,"nprogress-custom-parent"),p.appendChild(e),e},n.remove=function(){p(document.documentElement,"nprogress-busy"),p(document.querySelector(r.parent),"nprogress-custom-parent");var t=document.getElementById("nprogress");t&&d(t)},n.isRendered=function(){return!!document.getElementById("nprogress")},n.getPositioningCSS=function(){var t=document.body.style,e="WebkitTransform"in t?"Webkit":"MozTransform"in t?"Moz":"msTransform"in t?"ms":"OTransform"in t?"O":"";return e+"Perspective"in t?"translate3d":e+"Transform"in t?"translate":"margin"};var a=function(){var t=[];function e(){var n=t.shift();n&&n(e)}return function(n){t.push(n),1==t.length&&e()}}(),o=function(){var t=["Webkit","O","Moz","ms"],e={};function n(n){return n=n.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(t,e){return e.toUpperCase()})),e[n]||(e[n]=function(e){var n=document.body.style;if(e in n)return e;for(var r,i=t.length,s=e.charAt(0).toUpperCase()+e.slice(1);i--;)if((r=t[i]+s)in n)return r;return e}(n))}function r(t,e,r){e=n(e),t.style[e]=r}return function(t,e){var n,i,s=arguments;if(2==s.length)for(n in e)void 0!==(i=e[n])&&e.hasOwnProperty(n)&&r(t,n,i);else r(t,s[1],s[2])}}();function l(t,e){return("string"==typeof t?t:u(t)).indexOf(" "+e+" ")>=0}function c(t,e){var n=u(t),r=n+e;l(n,e)||(t.className=r.substring(1))}function p(t,e){var n,r=u(t);l(t,e)&&(n=r.replace(" "+e+" "," "),t.className=n.substring(1,n.length-1))}function u(t){return(" "+(t.className||"")+" ").replace(/\s+/gi," ")}function d(t){t&&t.parentNode&&t.parentNode.removeChild(t)}return n})?r.call(e,n,e,t):r)||(t.exports=i)},function(t,e,n){"use strict";var r=n(2),i=n(19),s=n(82),a=n(52);t.exports=function(t,e,n,o){o||(o={});var l=o.enumerable,c=void 0!==o.name?o.name:e;if(r(n)&&s(n,c,o),o.global)l?t[e]=n:a(e,n);else{try{o.unsafe?t[e]&&(l=!0):delete t[e]}catch(t){}l?t[e]=n:i.f(t,e,{value:n,enumerable:!1,configurable:!o.nonConfigurable,writable:!o.nonWritable})}return t}},function(t,e,n){"use strict";var r=n(128),i=n(7),s=n(3),a=n(50),o=n(159),l=n(33),c=n(38),p=n(160),u=n(93),d=n(12),m=TypeError,g=function(t,e){this.stopped=t,this.result=e},h=g.prototype;t.exports=function(t,e,n){var f,v,b,y,x,k,w,E=n&&n.that,T=!(!n||!n.AS_ENTRIES),S=!(!n||!n.IS_RECORD),_=!(!n||!n.IS_ITERATOR),C=!(!n||!n.INTERRUPTED),I=r(e,E),q=function(t){return f&&d(f,"normal"),new g(!0,t)},P=function(t){return T?(s(t),C?I(t[0],t[1],q):I(t[0],t[1])):C?I(t,q):I(t)};if(S)f=t.iterator;else if(_)f=t;else{if(!(v=u(t)))throw new m(a(t)+" is not iterable");if(o(v)){for(b=0,y=l(t);y>b;b++)if((x=P(t[b]))&&c(h,x))return x;return new g(!1)}f=p(t,v)}for(k=S?t.next:f.next;!(w=i(k,f)).done;){try{x=P(w.value)}catch(t){d(f,"throw",t)}if("object"==typeof x&&x&&c(h,x))return x}return new g(!1)}},function(t,e,n){"use strict";var r=n(49),i=TypeError;t.exports=function(t){if(r(t))throw new i("Can't call method on "+t);return t}},function(t,e,n){"use strict";t.exports=function(t){return null==t}},function(t,e,n){"use strict";var r=String;t.exports=function(t){try{return r(t)}catch(t){return"Object"}}},function(t,e,n){"use strict";var r=n(24),i=n(0),s=n(52),a=t.exports=i["__core-js_shared__"]||s("__core-js_shared__",{});(a.versions||(a.versions=[])).push({version:"3.44.0",mode:r?"pure":"global",copyright:"© 2014-2025 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.44.0/LICENSE",source:"https://github.com/zloirock/core-js"})},function(t,e,n){"use strict";var r=n(0),i=Object.defineProperty;t.exports=function(t,e){try{i(r,t,{value:e,configurable:!0,writable:!0})}catch(n){r[t]=e}return e}},function(t,e,n){"use strict";var r=n(77),i=n(78),s=r("keys");t.exports=function(t){return s[t]||(s[t]=i(t))}},function(t,e,n){"use strict";t.exports={}},function(t,e,n){"use strict";t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,e,n){var r=n(180),i=n(23),s=Object.prototype,a=s.hasOwnProperty,o=s.propertyIsEnumerable,l=r(function(){return arguments}())?r:function(t){return i(t)&&a.call(t,"callee")&&!o.call(t,"callee")};t.exports=l},function(t,e,n){var r=n(20)(n(14),"Map");t.exports=r},function(t,e){t.exports=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},function(t,e,n){var r=n(200),i=n(207),s=n(209),a=n(210),o=n(211);function l(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=i,l.prototype.get=s,l.prototype.has=a,l.prototype.set=o,t.exports=l},function(t,e){t.exports=function(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=t})),n}},function(t,e){t.exports=function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}},function(t,e,n){var r=n(13),i=n(63),s=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,a=/^\w*$/;t.exports=function(t,e){if(r(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!i(t))||(a.test(t)||!s.test(t)||null!=e&&t in Object(e))}},function(t,e,n){var r=n(28),i=n(23);t.exports=function(t){return"symbol"==typeof t||i(t)&&"[object Symbol]"==r(t)}},function(t,e){t.exports=function(t){return t}},function(t,e,n){"use strict";var r=n(11),i=n(7),s=n(47),a=n(8),o=n(3),l=n(26),c=n(12),p=n(27)("some",TypeError);r({target:"Iterator",proto:!0,real:!0,forced:p},{some:function(t){o(this);try{a(t)}catch(t){c(this,"throw",t)}if(p)return i(p,this,t);var e=l(this),n=0;return s(e,(function(e,r){if(t(e,n++))return r()}),{IS_RECORD:!0,INTERRUPTED:!0}).stopped}})},function(t,e){var n=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,i=/^0b[01]+$/i,s=/^0o[0-7]+$/i,a=parseInt,o="object"==typeof global&&global&&global.Object===Object&&global,l="object"==typeof self&&self&&self.Object===Object&&self,c=o||l||Function("return this")(),p=Object.prototype.toString,u=Math.max,d=Math.min,m=function(){return c.Date.now()};function g(t){var e=typeof t;return!!t&&("object"==e||"function"==e)}function h(t){if("number"==typeof t)return t;if(function(t){return"symbol"==typeof t||function(t){return!!t&&"object"==typeof t}(t)&&"[object Symbol]"==p.call(t)}(t))return NaN;if(g(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=g(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(n,"");var o=i.test(t);return o||s.test(t)?a(t.slice(2),o?2:8):r.test(t)?NaN:+t}t.exports=function(t,e,n){var r,i,s,a,o,l,c=0,p=!1,f=!1,v=!0;if("function"!=typeof t)throw new TypeError("Expected a function");function b(e){var n=r,s=i;return r=i=void 0,c=e,a=t.apply(s,n)}function y(t){return c=t,o=setTimeout(k,e),p?b(t):a}function x(t){var n=t-l;return void 0===l||n>=e||n<0||f&&t-c>=s}function k(){var t=m();if(x(t))return w(t);o=setTimeout(k,function(t){var n=e-(t-l);return f?d(n,s-(t-c)):n}(t))}function w(t){return o=void 0,v&&r?b(t):(r=i=void 0,a)}function E(){var t=m(),n=x(t);if(r=arguments,i=this,l=t,n){if(void 0===o)return y(l);if(f)return o=setTimeout(k,e),b(l)}return void 0===o&&(o=setTimeout(k,e)),a}return e=h(e)||0,g(n)&&(p=!!n.leading,s=(f="maxWait"in n)?u(h(n.maxWait)||0,e):s,v="trailing"in n?!!n.trailing:v),E.cancel=function(){void 0!==o&&clearTimeout(o),c=0,r=l=i=o=void 0},E.flush=function(){return void 0===o?a:w(m())},E}},function(t,e,n){"use strict";var r=n(5),i=n(1),s=n(29),a=Object,o=r("".split);t.exports=i((function(){return!a("z").propertyIsEnumerable(0)}))?function(t){return"String"===s(t)?o(t,""):a(t)}:a},function(t,e,n){"use strict";var r,i=n(3),s=n(147),a=n(55),o=n(54),l=n(149),c=n(80),p=n(53),u=p("IE_PROTO"),d=function(){},m=function(t){return"<script>"+t+"<\/script>"},g=function(t){t.write(m("")),t.close();var e=t.parentWindow.Object;return t=null,e},h=function(){try{r=new ActiveXObject("htmlfile")}catch(t){}var t,e;h="undefined"!=typeof document?document.domain&&r?g(r):((e=c("iframe")).style.display="none",l.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write(m("document.F=Object")),t.close(),t.F):g(r);for(var n=a.length;n--;)delete h.prototype[a[n]];return h()};o[u]=!0,t.exports=Object.create||function(t,e){var n;return null!==t?(d.prototype=i(t),n=new d,d.prototype=null,n[u]=t):n=h(),void 0===e?n:s.f(n,e)}},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,n){"use strict";var r=n(6),i=n(7),s=n(130),a=n(35),o=n(36),l=n(71),c=n(10),p=n(79),u=Object.getOwnPropertyDescriptor;e.f=r?u:function(t,e){if(t=o(t),e=l(e),p)try{return u(t,e)}catch(t){}if(c(t,e))return a(!i(s.f,t,e),t[e])}},function(t,e,n){"use strict";var r=n(131),i=n(72);t.exports=function(t){var e=r(t,"string");return i(e)?e:e+""}},function(t,e,n){"use strict";var r=n(37),i=n(2),s=n(38),a=n(73),o=Object;t.exports=a?function(t){return"symbol"==typeof t}:function(t){var e=r("Symbol");return i(e)&&s(e.prototype,o(t))}},function(t,e,n){"use strict";var r=n(74);t.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(t,e,n){"use strict";var r=n(75),i=n(1),s=n(0).String;t.exports=!!Object.getOwnPropertySymbols&&!i((function(){var t=Symbol("symbol detection");return!s(t)||!(Object(t)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},function(t,e,n){"use strict";var r,i,s=n(0),a=n(76),o=s.process,l=s.Deno,c=o&&o.versions||l&&l.version,p=c&&c.v8;p&&(i=(r=p.split("."))[0]>0&&r[0]<4?1:+(r[0]+r[1])),!i&&a&&(!(r=a.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=a.match(/Chrome\/(\d+)/))&&(i=+r[1]),t.exports=i},function(t,e,n){"use strict";var r=n(0).navigator,i=r&&r.userAgent;t.exports=i?String(i):""},function(t,e,n){"use strict";var r=n(51);t.exports=function(t,e){return r[t]||(r[t]=e||{})}},function(t,e,n){"use strict";var r=n(5),i=0,s=Math.random(),a=r(1.1.toString);t.exports=function(t){return"Symbol("+(void 0===t?"":t)+")_"+a(++i+s,36)}},function(t,e,n){"use strict";var r=n(6),i=n(1),s=n(80);t.exports=!r&&!i((function(){return 7!==Object.defineProperty(s("div"),"a",{get:function(){return 7}}).a}))},function(t,e,n){"use strict";var r=n(0),i=n(9),s=r.document,a=i(s)&&i(s.createElement);t.exports=function(t){return a?s.createElement(t):{}}},function(t,e,n){"use strict";var r=n(6),i=n(1);t.exports=r&&i((function(){return 42!==Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(t,e,n){"use strict";var r=n(5),i=n(1),s=n(2),a=n(10),o=n(6),l=n(133).CONFIGURABLE,c=n(134),p=n(83),u=p.enforce,d=p.get,m=String,g=Object.defineProperty,h=r("".slice),f=r("".replace),v=r([].join),b=o&&!i((function(){return 8!==g((function(){}),"length",{value:8}).length})),y=String(String).split("String"),x=t.exports=function(t,e,n){"Symbol("===h(m(e),0,7)&&(e="["+f(m(e),/^Symbol\(([^)]*)\).*$/,"$1")+"]"),n&&n.getter&&(e="get "+e),n&&n.setter&&(e="set "+e),(!a(t,"name")||l&&t.name!==e)&&(o?g(t,"name",{value:e,configurable:!0}):t.name=e),b&&n&&a(n,"arity")&&t.length!==n.arity&&g(t,"length",{value:n.arity});try{n&&a(n,"constructor")&&n.constructor?o&&g(t,"prototype",{writable:!1}):t.prototype&&(t.prototype=void 0)}catch(t){}var r=u(t);return a(r,"source")||(r.source=v(y,"string"==typeof e?e:"")),t};Function.prototype.toString=x((function(){return s(this)&&d(this).source||c(this)}),"toString")},function(t,e,n){"use strict";var r,i,s,a=n(135),o=n(0),l=n(9),c=n(25),p=n(10),u=n(51),d=n(53),m=n(54),g=o.TypeError,h=o.WeakMap;if(a||u.state){var f=u.state||(u.state=new h);f.get=f.get,f.has=f.has,f.set=f.set,r=function(t,e){if(f.has(t))throw new g("Object already initialized");return e.facade=t,f.set(t,e),e},i=function(t){return f.get(t)||{}},s=function(t){return f.has(t)}}else{var v=d("state");m[v]=!0,r=function(t,e){if(p(t,v))throw new g("Object already initialized");return e.facade=t,c(t,v,e),e},i=function(t){return p(t,v)?t[v]:{}},s=function(t){return p(t,v)}}t.exports={set:r,get:i,has:s,enforce:function(t){return s(t)?i(t):r(t,{})},getterFor:function(t){return function(e){var n;if(!l(e)||(n=i(e)).type!==t)throw new g("Incompatible receiver, "+t+" required");return n}}}},function(t,e,n){"use strict";var r=n(10),i=n(136),s=n(70),a=n(19);t.exports=function(t,e,n){for(var o=i(e),l=a.f,c=s.f,p=0;p<o.length;p++){var u=o[p];r(t,u)||n&&r(n,u)||l(t,u,c(e,u))}}},function(t,e,n){"use strict";var r=n(5),i=n(10),s=n(36),a=n(138).indexOf,o=n(54),l=r([].push);t.exports=function(t,e){var n,r=s(t),c=0,p=[];for(n in r)!i(o,n)&&i(r,n)&&l(p,n);for(;e.length>c;)i(r,n=e[c++])&&(~a(p,n)||l(p,n));return p}},function(t,e,n){"use strict";var r=n(140);t.exports=function(t){var e=+t;return e!=e||0===e?0:r(e)}},function(t,e,n){"use strict";var r=n(10),i=n(2),s=n(32),a=n(53),o=n(145),l=a("IE_PROTO"),c=Object,p=c.prototype;t.exports=o?c.getPrototypeOf:function(t){var e=s(t);if(r(e,l))return e[l];var n=e.constructor;return i(n)&&e instanceof n?n.prototype:e instanceof c?p:null}},function(t,e,n){"use strict";var r,i,s,a=n(1),o=n(2),l=n(9),c=n(68),p=n(87),u=n(46),d=n(17),m=n(24),g=d("iterator"),h=!1;[].keys&&("next"in(s=[].keys())?(i=p(p(s)))!==Object.prototype&&(r=i):h=!0),!l(r)||a((function(){var t={};return r[g].call(t)!==t}))?r={}:m&&(r=c(r)),o(r[g])||u(r,g,(function(){return this})),t.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:h}},function(t,e,n){"use strict";var r=n(7),i=n(68),s=n(25),a=n(150),o=n(17),l=n(83),c=n(39),p=n(88).IteratorPrototype,u=n(151),d=n(12),m=n(152),g=o("toStringTag"),h=l.set,f=function(t){var e=l.getterFor(t?"WrapForValidIterator":"IteratorHelper");return a(i(p),{next:function(){var n=e(this);if(t)return n.nextHandler();if(n.done)return u(void 0,!0);try{var r=n.nextHandler();return n.returnHandlerResult?r:u(r,n.done)}catch(t){throw n.done=!0,t}},return:function(){var n=e(this),i=n.iterator;if(n.done=!0,t){var s=c(i,"return");return s?r(s,i):u(void 0,!0)}if(n.inner)try{d(n.inner.iterator,"normal")}catch(t){return d(i,"throw",t)}if(n.openIters)try{m(n.openIters,"normal")}catch(t){return d(i,"throw",t)}return i&&d(i,"normal"),u(void 0,!0)}})},v=f(!0),b=f(!1);s(b,g,"Iterator Helper"),t.exports=function(t,e,n){var r=function(r,i){i?(i.iterator=r.iterator,i.next=r.next):i=r,i.type=e?"WrapForValidIterator":"IteratorHelper",i.returnHandlerResult=!!n,i.nextHandler=t,i.counter=0,i.done=!1,h(this,i)};return r.prototype=e?v:b,r}},function(t,e,n){"use strict";var r=n(3),i=n(12);t.exports=function(t,e,n,s){try{return s?e(r(n)[0],n[1]):e(n)}catch(e){i(t,"throw",e)}}},function(t,e,n){"use strict";t.exports=function(t,e){var n="function"==typeof Iterator&&Iterator.prototype[t];if(n)try{n.call({next:null},e).next()}catch(t){return!0}}},function(t,e,n){"use strict";t.exports={}},function(t,e,n){"use strict";var r=n(94),i=n(39),s=n(49),a=n(92),o=n(17)("iterator");t.exports=function(t){if(!s(t))return i(t,o)||i(t,"@@iterator")||a[r(t)]}},function(t,e,n){"use strict";var r=n(161),i=n(2),s=n(29),a=n(17)("toStringTag"),o=Object,l="Arguments"===s(function(){return arguments}());t.exports=r?s:function(t){var e,n,r;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=o(t),a))?n:l?s(e):"Object"===(r=s(e))&&i(e.callee)?"Arguments":r}},function(t,e,n){"use strict";var r=n(34),i=Function.prototype,s=i.apply,a=i.call;t.exports="object"==typeof Reflect&&Reflect.apply||(r?a.bind(s):function(){return a.apply(s,arguments)})},function(t,e,n){"use strict";var r=n(165),i=n(9),s=n(48),a=n(166);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,n={};try{(t=r(Object.prototype,"__proto__","set"))(n,[]),e=n instanceof Array}catch(t){}return function(n,r){return s(n),a(r),i(n)?(e?t(n,r):n.__proto__=r,n):n}}():void 0)},function(t,e){t.exports=function(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t}},function(t,e){var n="object"==typeof global&&global&&global.Object===Object&&global;t.exports=n},function(t,e,n){var r=n(40),i=n(191),s=n(192),a=n(193),o=n(194),l=n(195);function c(t){var e=this.__data__=new r(t);this.size=e.size}c.prototype.clear=i,c.prototype.delete=s,c.prototype.get=a,c.prototype.has=o,c.prototype.set=l,t.exports=c},function(t,e){t.exports=function(t,e){return t===e||t!=t&&e!=e}},function(t,e,n){var r=n(28),i=n(58);t.exports=function(t){if(!i(t))return!1;var e=r(t);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(t,e){var n=Function.prototype.toString;t.exports=function(t){if(null!=t){try{return n.call(t)}catch(t){}try{return t+""}catch(t){}}return""}},function(t,e,n){var r=n(212),i=n(23);t.exports=function t(e,n,s,a,o){return e===n||(null==e||null==n||!i(e)&&!i(n)?e!=e&&n!=n:r(e,n,s,a,t,o))}},function(t,e,n){var r=n(105),i=n(215),s=n(106);t.exports=function(t,e,n,a,o,l){var c=1&n,p=t.length,u=e.length;if(p!=u&&!(c&&u>p))return!1;var d=l.get(t),m=l.get(e);if(d&&m)return d==e&&m==t;var g=-1,h=!0,f=2&n?new r:void 0;for(l.set(t,e),l.set(e,t);++g<p;){var v=t[g],b=e[g];if(a)var y=c?a(b,v,g,e,t,l):a(v,b,g,t,e,l);if(void 0!==y){if(y)continue;h=!1;break}if(f){if(!i(e,(function(t,e){if(!s(f,e)&&(v===t||o(v,t,n,a,l)))return f.push(e)}))){h=!1;break}}else if(v!==b&&!o(v,b,n,a,l)){h=!1;break}}return l.delete(t),l.delete(e),h}},function(t,e,n){var r=n(59),i=n(213),s=n(214);function a(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new r;++e<n;)this.add(t[e])}a.prototype.add=a.prototype.push=i,a.prototype.has=s,t.exports=a},function(t,e){t.exports=function(t,e){return t.has(e)}},function(t,e,n){var r=n(225),i=n(231),s=n(111);t.exports=function(t){return s(t)?r(t):i(t)}},function(t,e,n){(function(t){var r=n(14),i=n(227),s=e&&!e.nodeType&&e,a=s&&"object"==typeof t&&t&&!t.nodeType&&t,o=a&&a.exports===s?r.Buffer:void 0,l=(o?o.isBuffer:void 0)||i;t.exports=l}).call(this,n(69)(t))},function(t,e){var n=/^(?:0|[1-9]\d*)$/;t.exports=function(t,e){var r=typeof t;return!!(e=null==e?9007199254740991:e)&&("number"==r||"symbol"!=r&&n.test(t))&&t>-1&&t%1==0&&t<e}},function(t,e,n){var r=n(228),i=n(229),s=n(230),a=s&&s.isTypedArray,o=a?i(a):r;t.exports=o},function(t,e,n){var r=n(101),i=n(61);t.exports=function(t){return null!=t&&i(t.length)&&!r(t)}},function(t,e,n){var r=n(20)(n(14),"Set");t.exports=r},function(t,e,n){var r=n(58);t.exports=function(t){return t==t&&!r(t)}},function(t,e){t.exports=function(t,e){return function(n){return null!=n&&(n[t]===e&&(void 0!==e||t in Object(n)))}}},function(t,e,n){var r=n(116),i=n(44);t.exports=function(t,e){for(var n=0,s=(e=r(e,t)).length;null!=t&&n<s;)t=t[i(e[n++])];return n&&n==s?t:void 0}},function(t,e,n){var r=n(13),i=n(62),s=n(242),a=n(245);t.exports=function(t,e){return r(t)?t:i(t,e)?[t]:s(a(t))}},function(t,e,n){},function(t,e,n){},function(t,e,n){},function(t,e,n){},function(t,e,n){var r=n(178),i=n(183),s=n(254),a=n(262),o=n(271),l=n(126),c=s((function(t){var e=l(t);return o(e)&&(e=void 0),a(r(t,1,o,!0),i(e,2))}));t.exports=c},function(t,e,n){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var r=/["'&<>]/;t.exports=function(t){var e,n=""+t,i=r.exec(n);if(!i)return n;var s="",a=0,o=0;for(a=i.index;a<n.length;a++){switch(n.charCodeAt(a)){case 34:e="&quot;";break;case 38:e="&amp;";break;case 39:e="&#39;";break;case 60:e="&lt;";break;case 62:e="&gt;";break;default:continue}o!==a&&(s+=n.substring(o,a)),o=a+1,s+=e}return o!==a?s+n.substring(o,a):s}},function(t,e,n){"use strict";n.r(e);var r={name:"CodeBlock",props:{title:{type:String,required:!0},active:{type:Boolean,default:!1}}},i=(n(274),n(15)),s=Object(i.a)(r,(function(){return(0,this._self._c)("div",{staticClass:"theme-code-block",class:{"theme-code-block__active":this.active}},[this._t("default")],2)}),[],!1,null,"4f1e9d0c",null);e.default=s.exports},function(t,e,n){"use strict";n.r(e);n(4),n(16),n(18),n(22);var r={name:"CodeGroup",data:()=>({codeTabs:[],activeCodeTabIndex:-1}),watch:{activeCodeTabIndex(t){this.codeTabs.forEach(t=>{t.elm.classList.remove("theme-code-block__active")}),this.codeTabs[t].elm.classList.add("theme-code-block__active")}},mounted(){this.codeTabs=(this.$slots.default||[]).filter(t=>Boolean(t.componentOptions)).map((t,e)=>(""===t.componentOptions.propsData.active&&(this.activeCodeTabIndex=e),{title:t.componentOptions.propsData.title,elm:t.elm})),-1===this.activeCodeTabIndex&&this.codeTabs.length>0&&(this.activeCodeTabIndex=0)},methods:{changeCodeTab(t){this.activeCodeTabIndex=t}}},i=(n(275),n(15)),s=Object(i.a)(r,(function(){var t=this,e=t._self._c;return e("div",{staticClass:"theme-code-group"},[e("div",{staticClass:"theme-code-group__nav"},[e("ul",{staticClass:"theme-code-group__ul"},t._l(t.codeTabs,(function(n,r){return e("li",{key:n.title,staticClass:"theme-code-group__li"},[e("button",{staticClass:"theme-code-group__nav-tab",class:{"theme-code-group__nav-tab-active":r===t.activeCodeTabIndex},on:{click:function(e){return t.changeCodeTab(r)}}},[t._v("\n            "+t._s(n.title)+"\n          ")])])})),0)]),t._v(" "),t._t("default"),t._v(" "),t.codeTabs.length<1?e("pre",{staticClass:"pre-blank"},[t._v("// Make sure to add code blocks to your code group")]):t._e()],2)}),[],!1,null,"2f5f1757",null);e.default=s.exports},function(t,e,n){"use strict";var r=n(94),i=String;t.exports=function(t){if("Symbol"===r(t))throw new TypeError("Cannot convert a Symbol value to a string");return i(t)}},function(t,e){t.exports=function(t){var e=null==t?0:t.length;return e?t[e-1]:void 0}},function(t,e,n){"use strict";var r=n(82),i=n(19);t.exports=function(t,e,n){return n.get&&r(n.get,e,{getter:!0}),n.set&&r(n.set,e,{setter:!0}),i.f(t,e,n)}},function(t,e,n){"use strict";var r=n(158),i=n(8),s=n(34),a=r(r.bind);t.exports=function(t,e){return i(t),void 0===e?t:s?a(t,e):function(){return t.apply(e,arguments)}}},function(t,e,n){t.exports=n(280)},function(t,e,n){"use strict";var r={}.propertyIsEnumerable,i=Object.getOwnPropertyDescriptor,s=i&&!r.call({1:2},1);e.f=s?function(t){var e=i(this,t);return!!e&&e.enumerable}:r},function(t,e,n){"use strict";var r=n(7),i=n(9),s=n(72),a=n(39),o=n(132),l=n(17),c=TypeError,p=l("toPrimitive");t.exports=function(t,e){if(!i(t)||s(t))return t;var n,l=a(t,p);if(l){if(void 0===e&&(e="default"),n=r(l,t,e),!i(n)||s(n))return n;throw new c("Can't convert object to primitive value")}return void 0===e&&(e="number"),o(t,e)}},function(t,e,n){"use strict";var r=n(7),i=n(2),s=n(9),a=TypeError;t.exports=function(t,e){var n,o;if("string"===e&&i(n=t.toString)&&!s(o=r(n,t)))return o;if(i(n=t.valueOf)&&!s(o=r(n,t)))return o;if("string"!==e&&i(n=t.toString)&&!s(o=r(n,t)))return o;throw new a("Can't convert object to primitive value")}},function(t,e,n){"use strict";var r=n(6),i=n(10),s=Function.prototype,a=r&&Object.getOwnPropertyDescriptor,o=i(s,"name"),l=o&&"something"===function(){}.name,c=o&&(!r||r&&a(s,"name").configurable);t.exports={EXISTS:o,PROPER:l,CONFIGURABLE:c}},function(t,e,n){"use strict";var r=n(5),i=n(2),s=n(51),a=r(Function.toString);i(s.inspectSource)||(s.inspectSource=function(t){return a(t)}),t.exports=s.inspectSource},function(t,e,n){"use strict";var r=n(0),i=n(2),s=r.WeakMap;t.exports=i(s)&&/native code/.test(String(s))},function(t,e,n){"use strict";var r=n(37),i=n(5),s=n(137),a=n(142),o=n(3),l=i([].concat);t.exports=r("Reflect","ownKeys")||function(t){var e=s.f(o(t)),n=a.f;return n?l(e,n(t)):e}},function(t,e,n){"use strict";var r=n(85),i=n(55).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},function(t,e,n){"use strict";var r=n(36),i=n(139),s=n(33),a=function(t){return function(e,n,a){var o=r(e),l=s(o);if(0===l)return!t&&-1;var c,p=i(a,l);if(t&&n!=n){for(;l>p;)if((c=o[p++])!=c)return!0}else for(;l>p;p++)if((t||p in o)&&o[p]===n)return t||p||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},function(t,e,n){"use strict";var r=n(86),i=Math.max,s=Math.min;t.exports=function(t,e){var n=r(t);return n<0?i(n+e,0):s(n,e)}},function(t,e,n){"use strict";var r=Math.ceil,i=Math.floor;t.exports=Math.trunc||function(t){var e=+t;return(e>0?i:r)(e)}},function(t,e,n){"use strict";var r=n(86),i=Math.min;t.exports=function(t){var e=r(t);return e>0?i(e,9007199254740991):0}},function(t,e,n){"use strict";e.f=Object.getOwnPropertySymbols},function(t,e,n){"use strict";var r=n(1),i=n(2),s=/#|\.prototype\./,a=function(t,e){var n=l[o(t)];return n===p||n!==c&&(i(e)?r(e):!!e)},o=a.normalize=function(t){return String(t).replace(s,".").toLowerCase()},l=a.data={},c=a.NATIVE="N",p=a.POLYFILL="P";t.exports=a},function(t,e,n){"use strict";var r=n(38),i=TypeError;t.exports=function(t,e){if(r(e,t))return t;throw new i("Incorrect invocation")}},function(t,e,n){"use strict";var r=n(1);t.exports=!r((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},function(t,e,n){"use strict";var r=n(6),i=n(19),s=n(35);t.exports=function(t,e,n){r?i.f(t,e,s(0,n)):t[e]=n}},function(t,e,n){"use strict";var r=n(6),i=n(81),s=n(19),a=n(3),o=n(36),l=n(148);e.f=r&&!i?Object.defineProperties:function(t,e){a(t);for(var n,r=o(e),i=l(e),c=i.length,p=0;c>p;)s.f(t,n=i[p++],r[n]);return t}},function(t,e,n){"use strict";var r=n(85),i=n(55);t.exports=Object.keys||function(t){return r(t,i)}},function(t,e,n){"use strict";var r=n(37);t.exports=r("document","documentElement")},function(t,e,n){"use strict";var r=n(46);t.exports=function(t,e,n){for(var i in e)r(t,i,e[i],n);return t}},function(t,e,n){"use strict";t.exports=function(t,e){return{value:t,done:e}}},function(t,e,n){"use strict";var r=n(12);t.exports=function(t,e,n){for(var i=t.length-1;i>=0;i--)if(void 0!==t[i])try{n=r(t[i].iterator,e,n)}catch(t){e="throw",n=t}if("throw"===e)throw n;return n}},function(t,e,n){"use strict";var r=n(11),i=n(154).left,s=n(155),a=n(75);r({target:"Array",proto:!0,forced:!n(156)&&a>79&&a<83||!s("reduce")},{reduce:function(t){var e=arguments.length;return i(this,t,e,e>1?arguments[1]:void 0)}})},function(t,e,n){"use strict";var r=n(8),i=n(32),s=n(67),a=n(33),o=TypeError,l="Reduce of empty array with no initial value",c=function(t){return function(e,n,c,p){var u=i(e),d=s(u),m=a(u);if(r(n),0===m&&c<2)throw new o(l);var g=t?m-1:0,h=t?-1:1;if(c<2)for(;;){if(g in d){p=d[g],g+=h;break}if(g+=h,t?g<0:m<=g)throw new o(l)}for(;t?g>=0:m>g;g+=h)g in d&&(p=n(p,d[g],g,u));return p}};t.exports={left:c(!1),right:c(!0)}},function(t,e,n){"use strict";var r=n(1);t.exports=function(t,e){var n=[][t];return!!n&&r((function(){n.call(null,e||function(){return 1},1)}))}},function(t,e,n){"use strict";var r=n(157);t.exports="NODE"===r},function(t,e,n){"use strict";var r=n(0),i=n(76),s=n(29),a=function(t){return i.slice(0,t.length)===t};t.exports=a("Bun/")?"BUN":a("Cloudflare-Workers")?"CLOUDFLARE":a("Deno/")?"DENO":a("Node.js/")?"NODE":r.Bun&&"string"==typeof Bun.version?"BUN":r.Deno&&"object"==typeof Deno.version?"DENO":"process"===s(r.process)?"NODE":r.window&&r.document?"BROWSER":"REST"},function(t,e,n){"use strict";var r=n(29),i=n(5);t.exports=function(t){if("Function"===r(t))return i(t)}},function(t,e,n){"use strict";var r=n(17),i=n(92),s=r("iterator"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(i.Array===t||a[s]===t)}},function(t,e,n){"use strict";var r=n(7),i=n(8),s=n(3),a=n(50),o=n(93),l=TypeError;t.exports=function(t,e){var n=arguments.length<2?o(t):e;if(i(n))return s(r(n,t));throw new l(a(t)+" is not iterable")}},function(t,e,n){"use strict";var r={};r[n(17)("toStringTag")]="z",t.exports="[object z]"===String(r)},function(t,e,n){"use strict";var r=n(11),i=n(47),s=n(8),a=n(3),o=n(26),l=n(12),c=n(27),p=n(95),u=n(1),d=TypeError,m=u((function(){[].keys().reduce((function(){}),void 0)})),g=!m&&c("reduce",d);r({target:"Iterator",proto:!0,real:!0,forced:m||g},{reduce:function(t){a(this);try{s(t)}catch(t){l(this,"throw",t)}var e=arguments.length<2,n=e?void 0:arguments[1];if(g)return p(g,this,e?[t]:[t,n]);var r=o(this),c=0;if(i(r,(function(r){e?(e=!1,n=r):n=t(n,r,c),c++}),{IS_RECORD:!0}),e)throw new d("Reduce of empty iterator with no initial value");return n}})},function(t,e,n){"use strict";var r=n(11),i=n(0),s=n(95),a=n(164),o=i.WebAssembly,l=7!==new Error("e",{cause:7}).cause,c=function(t,e){var n={};n[t]=a(t,e,l),r({global:!0,constructor:!0,arity:1,forced:l},n)},p=function(t,e){if(o&&o[t]){var n={};n[t]=a("WebAssembly."+t,e,l),r({target:"WebAssembly",stat:!0,constructor:!0,arity:1,forced:l},n)}};c("Error",(function(t){return function(e){return s(t,this,arguments)}})),c("EvalError",(function(t){return function(e){return s(t,this,arguments)}})),c("RangeError",(function(t){return function(e){return s(t,this,arguments)}})),c("ReferenceError",(function(t){return function(e){return s(t,this,arguments)}})),c("SyntaxError",(function(t){return function(e){return s(t,this,arguments)}})),c("TypeError",(function(t){return function(e){return s(t,this,arguments)}})),c("URIError",(function(t){return function(e){return s(t,this,arguments)}})),p("CompileError",(function(t){return function(e){return s(t,this,arguments)}})),p("LinkError",(function(t){return function(e){return s(t,this,arguments)}})),p("RuntimeError",(function(t){return function(e){return s(t,this,arguments)}}))},function(t,e,n){"use strict";var r=n(37),i=n(10),s=n(25),a=n(38),o=n(96),l=n(84),c=n(168),p=n(169),u=n(170),d=n(171),m=n(172),g=n(6),h=n(24);t.exports=function(t,e,n,f){var v=f?2:1,b=t.split("."),y=b[b.length-1],x=r.apply(null,b);if(x){var k=x.prototype;if(!h&&i(k,"cause")&&delete k.cause,!n)return x;var w=r("Error"),E=e((function(t,e){var n=u(f?e:t,void 0),r=f?new x(t):new x;return void 0!==n&&s(r,"message",n),m(r,E,r.stack,2),this&&a(k,this)&&p(r,this,E),arguments.length>v&&d(r,arguments[v]),r}));if(E.prototype=k,"Error"!==y?o?o(E,w):l(E,w,{name:!0}):g&&"stackTraceLimit"in x&&(c(E,x,"stackTraceLimit"),c(E,x,"prepareStackTrace")),l(E,x),!h)try{k.name!==y&&s(k,"name",y),k.constructor=E}catch(t){}return E}}},function(t,e,n){"use strict";var r=n(5),i=n(8);t.exports=function(t,e,n){try{return r(i(Object.getOwnPropertyDescriptor(t,e)[n]))}catch(t){}}},function(t,e,n){"use strict";var r=n(167),i=String,s=TypeError;t.exports=function(t){if(r(t))return t;throw new s("Can't set "+i(t)+" as a prototype")}},function(t,e,n){"use strict";var r=n(9);t.exports=function(t){return r(t)||null===t}},function(t,e,n){"use strict";var r=n(19).f;t.exports=function(t,e,n){n in t||r(t,n,{configurable:!0,get:function(){return e[n]},set:function(t){e[n]=t}})}},function(t,e,n){"use strict";var r=n(2),i=n(9),s=n(96);t.exports=function(t,e,n){var a,o;return s&&r(a=e.constructor)&&a!==n&&i(o=a.prototype)&&o!==n.prototype&&s(t,o),t}},function(t,e,n){"use strict";var r=n(125);t.exports=function(t,e){return void 0===t?arguments.length<2?"":e:r(t)}},function(t,e,n){"use strict";var r=n(9),i=n(25);t.exports=function(t,e){r(e)&&"cause"in e&&i(t,"cause",e.cause)}},function(t,e,n){"use strict";var r=n(25),i=n(173),s=n(174),a=Error.captureStackTrace;t.exports=function(t,e,n,o){s&&(a?a(t,e):r(t,"stack",i(n,o)))}},function(t,e,n){"use strict";var r=n(5),i=Error,s=r("".replace),a=String(new i("zxcasd").stack),o=/\n\s*at [^:]*:[^\n]*/,l=o.test(a);t.exports=function(t,e){if(l&&"string"==typeof t&&!i.prepareStackTrace)for(;e--;)t=s(t,o,"");return t}},function(t,e,n){"use strict";var r=n(1),i=n(35);t.exports=!r((function(){var t=new Error("a");return!("stack"in t)||(Object.defineProperty(t,"stack",i(1,7)),7!==t.stack)}))},function(t,e,n){"use strict";var r=n(6),i=n(176),s=TypeError,a=Object.getOwnPropertyDescriptor,o=r&&!function(){if(void 0!==this)return!0;try{Object.defineProperty([],"length",{writable:!1}).length=1}catch(t){return t instanceof TypeError}}();t.exports=o?function(t,e){if(i(t)&&!a(t,"length").writable)throw new s("Cannot set read only .length");return t.length=e}:function(t,e){return t.length=e}},function(t,e,n){"use strict";var r=n(29);t.exports=Array.isArray||function(t){return"Array"===r(t)}},function(t,e,n){"use strict";var r=TypeError;t.exports=function(t){if(t>9007199254740991)throw r("Maximum allowed index exceeded");return t}},function(t,e,n){var r=n(97),i=n(179);t.exports=function t(e,n,s,a,o){var l=-1,c=e.length;for(s||(s=i),o||(o=[]);++l<c;){var p=e[l];n>0&&s(p)?n>1?t(p,n-1,s,a,o):r(o,p):a||(o[o.length]=p)}return o}},function(t,e,n){var r=n(30),i=n(56),s=n(13),a=r?r.isConcatSpreadable:void 0;t.exports=function(t){return s(t)||i(t)||!!(a&&t&&t[a])}},function(t,e,n){var r=n(28),i=n(23);t.exports=function(t){return i(t)&&"[object Arguments]"==r(t)}},function(t,e,n){var r=n(30),i=Object.prototype,s=i.hasOwnProperty,a=i.toString,o=r?r.toStringTag:void 0;t.exports=function(t){var e=s.call(t,o),n=t[o];try{t[o]=void 0;var r=!0}catch(t){}var i=a.call(t);return r&&(e?t[o]=n:delete t[o]),i}},function(t,e){var n=Object.prototype.toString;t.exports=function(t){return n.call(t)}},function(t,e,n){var r=n(184),i=n(240),s=n(64),a=n(13),o=n(251);t.exports=function(t){return"function"==typeof t?t:null==t?s:"object"==typeof t?a(t)?i(t[0],t[1]):r(t):o(t)}},function(t,e,n){var r=n(185),i=n(239),s=n(114);t.exports=function(t){var e=i(t);return 1==e.length&&e[0][2]?s(e[0][0],e[0][1]):function(n){return n===t||r(n,t,e)}}},function(t,e,n){var r=n(99),i=n(103);t.exports=function(t,e,n,s){var a=n.length,o=a,l=!s;if(null==t)return!o;for(t=Object(t);a--;){var c=n[a];if(l&&c[2]?c[1]!==t[c[0]]:!(c[0]in t))return!1}for(;++a<o;){var p=(c=n[a])[0],u=t[p],d=c[1];if(l&&c[2]){if(void 0===u&&!(p in t))return!1}else{var m=new r;if(s)var g=s(u,d,p,t,e,m);if(!(void 0===g?i(d,u,3,s,m):g))return!1}}return!0}},function(t,e){t.exports=function(){this.__data__=[],this.size=0}},function(t,e,n){var r=n(41),i=Array.prototype.splice;t.exports=function(t){var e=this.__data__,n=r(e,t);return!(n<0)&&(n==e.length-1?e.pop():i.call(e,n,1),--this.size,!0)}},function(t,e,n){var r=n(41);t.exports=function(t){var e=this.__data__,n=r(e,t);return n<0?void 0:e[n][1]}},function(t,e,n){var r=n(41);t.exports=function(t){return r(this.__data__,t)>-1}},function(t,e,n){var r=n(41);t.exports=function(t,e){var n=this.__data__,i=r(n,t);return i<0?(++this.size,n.push([t,e])):n[i][1]=e,this}},function(t,e,n){var r=n(40);t.exports=function(){this.__data__=new r,this.size=0}},function(t,e){t.exports=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n}},function(t,e){t.exports=function(t){return this.__data__.get(t)}},function(t,e){t.exports=function(t){return this.__data__.has(t)}},function(t,e,n){var r=n(40),i=n(57),s=n(59);t.exports=function(t,e){var n=this.__data__;if(n instanceof r){var a=n.__data__;if(!i||a.length<199)return a.push([t,e]),this.size=++n.size,this;n=this.__data__=new s(a)}return n.set(t,e),this.size=n.size,this}},function(t,e,n){var r=n(101),i=n(197),s=n(58),a=n(102),o=/^\[object .+?Constructor\]$/,l=Function.prototype,c=Object.prototype,p=l.toString,u=c.hasOwnProperty,d=RegExp("^"+p.call(u).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");t.exports=function(t){return!(!s(t)||i(t))&&(r(t)?d:o).test(a(t))}},function(t,e,n){var r,i=n(198),s=(r=/[^.]+$/.exec(i&&i.keys&&i.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";t.exports=function(t){return!!s&&s in t}},function(t,e,n){var r=n(14)["__core-js_shared__"];t.exports=r},function(t,e){t.exports=function(t,e){return null==t?void 0:t[e]}},function(t,e,n){var r=n(201),i=n(40),s=n(57);t.exports=function(){this.size=0,this.__data__={hash:new r,map:new(s||i),string:new r}}},function(t,e,n){var r=n(202),i=n(203),s=n(204),a=n(205),o=n(206);function l(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=i,l.prototype.get=s,l.prototype.has=a,l.prototype.set=o,t.exports=l},function(t,e,n){var r=n(42);t.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(t,e){t.exports=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e}},function(t,e,n){var r=n(42),i=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;if(r){var n=e[t];return"__lodash_hash_undefined__"===n?void 0:n}return i.call(e,t)?e[t]:void 0}},function(t,e,n){var r=n(42),i=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;return r?void 0!==e[t]:i.call(e,t)}},function(t,e,n){var r=n(42);t.exports=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=r&&void 0===e?"__lodash_hash_undefined__":e,this}},function(t,e,n){var r=n(43);t.exports=function(t){var e=r(this,t).delete(t);return this.size-=e?1:0,e}},function(t,e){t.exports=function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}},function(t,e,n){var r=n(43);t.exports=function(t){return r(this,t).get(t)}},function(t,e,n){var r=n(43);t.exports=function(t){return r(this,t).has(t)}},function(t,e,n){var r=n(43);t.exports=function(t,e){var n=r(this,t),i=n.size;return n.set(t,e),this.size+=n.size==i?0:1,this}},function(t,e,n){var r=n(99),i=n(104),s=n(216),a=n(219),o=n(235),l=n(13),c=n(108),p=n(110),u="[object Object]",d=Object.prototype.hasOwnProperty;t.exports=function(t,e,n,m,g,h){var f=l(t),v=l(e),b=f?"[object Array]":o(t),y=v?"[object Array]":o(e),x=(b="[object Arguments]"==b?u:b)==u,k=(y="[object Arguments]"==y?u:y)==u,w=b==y;if(w&&c(t)){if(!c(e))return!1;f=!0,x=!1}if(w&&!x)return h||(h=new r),f||p(t)?i(t,e,n,m,g,h):s(t,e,b,n,m,g,h);if(!(1&n)){var E=x&&d.call(t,"__wrapped__"),T=k&&d.call(e,"__wrapped__");if(E||T){var S=E?t.value():t,_=T?e.value():e;return h||(h=new r),g(S,_,n,m,h)}}return!!w&&(h||(h=new r),a(t,e,n,m,g,h))}},function(t,e){t.exports=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this}},function(t,e){t.exports=function(t){return this.__data__.has(t)}},function(t,e){t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}},function(t,e,n){var r=n(30),i=n(217),s=n(100),a=n(104),o=n(218),l=n(60),c=r?r.prototype:void 0,p=c?c.valueOf:void 0;t.exports=function(t,e,n,r,c,u,d){switch(n){case"[object DataView]":if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(t.byteLength!=e.byteLength||!u(new i(t),new i(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return s(+t,+e);case"[object Error]":return t.name==e.name&&t.message==e.message;case"[object RegExp]":case"[object String]":return t==e+"";case"[object Map]":var m=o;case"[object Set]":var g=1&r;if(m||(m=l),t.size!=e.size&&!g)return!1;var h=d.get(t);if(h)return h==e;r|=2,d.set(t,e);var f=a(m(t),m(e),r,c,u,d);return d.delete(t),f;case"[object Symbol]":if(p)return p.call(t)==p.call(e)}return!1}},function(t,e,n){var r=n(14).Uint8Array;t.exports=r},function(t,e){t.exports=function(t){var e=-1,n=Array(t.size);return t.forEach((function(t,r){n[++e]=[r,t]})),n}},function(t,e,n){var r=n(220),i=Object.prototype.hasOwnProperty;t.exports=function(t,e,n,s,a,o){var l=1&n,c=r(t),p=c.length;if(p!=r(e).length&&!l)return!1;for(var u=p;u--;){var d=c[u];if(!(l?d in e:i.call(e,d)))return!1}var m=o.get(t),g=o.get(e);if(m&&g)return m==e&&g==t;var h=!0;o.set(t,e),o.set(e,t);for(var f=l;++u<p;){var v=t[d=c[u]],b=e[d];if(s)var y=l?s(b,v,d,e,t,o):s(v,b,d,t,e,o);if(!(void 0===y?v===b||a(v,b,n,s,o):y)){h=!1;break}f||(f="constructor"==d)}if(h&&!f){var x=t.constructor,k=e.constructor;x==k||!("constructor"in t)||!("constructor"in e)||"function"==typeof x&&x instanceof x&&"function"==typeof k&&k instanceof k||(h=!1)}return o.delete(t),o.delete(e),h}},function(t,e,n){var r=n(221),i=n(222),s=n(107);t.exports=function(t){return r(t,s,i)}},function(t,e,n){var r=n(97),i=n(13);t.exports=function(t,e,n){var s=e(t);return i(t)?s:r(s,n(t))}},function(t,e,n){var r=n(223),i=n(224),s=Object.prototype.propertyIsEnumerable,a=Object.getOwnPropertySymbols,o=a?function(t){return null==t?[]:(t=Object(t),r(a(t),(function(e){return s.call(t,e)})))}:i;t.exports=o},function(t,e){t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length,i=0,s=[];++n<r;){var a=t[n];e(a,n,t)&&(s[i++]=a)}return s}},function(t,e){t.exports=function(){return[]}},function(t,e,n){var r=n(226),i=n(56),s=n(13),a=n(108),o=n(109),l=n(110),c=Object.prototype.hasOwnProperty;t.exports=function(t,e){var n=s(t),p=!n&&i(t),u=!n&&!p&&a(t),d=!n&&!p&&!u&&l(t),m=n||p||u||d,g=m?r(t.length,String):[],h=g.length;for(var f in t)!e&&!c.call(t,f)||m&&("length"==f||u&&("offset"==f||"parent"==f)||d&&("buffer"==f||"byteLength"==f||"byteOffset"==f)||o(f,h))||g.push(f);return g}},function(t,e){t.exports=function(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}},function(t,e){t.exports=function(){return!1}},function(t,e,n){var r=n(28),i=n(61),s=n(23),a={};a["[object Float32Array]"]=a["[object Float64Array]"]=a["[object Int8Array]"]=a["[object Int16Array]"]=a["[object Int32Array]"]=a["[object Uint8Array]"]=a["[object Uint8ClampedArray]"]=a["[object Uint16Array]"]=a["[object Uint32Array]"]=!0,a["[object Arguments]"]=a["[object Array]"]=a["[object ArrayBuffer]"]=a["[object Boolean]"]=a["[object DataView]"]=a["[object Date]"]=a["[object Error]"]=a["[object Function]"]=a["[object Map]"]=a["[object Number]"]=a["[object Object]"]=a["[object RegExp]"]=a["[object Set]"]=a["[object String]"]=a["[object WeakMap]"]=!1,t.exports=function(t){return s(t)&&i(t.length)&&!!a[r(t)]}},function(t,e){t.exports=function(t){return function(e){return t(e)}}},function(t,e,n){(function(t){var r=n(98),i=e&&!e.nodeType&&e,s=i&&"object"==typeof t&&t&&!t.nodeType&&t,a=s&&s.exports===i&&r.process,o=function(){try{var t=s&&s.require&&s.require("util").types;return t||a&&a.binding&&a.binding("util")}catch(t){}}();t.exports=o}).call(this,n(69)(t))},function(t,e,n){var r=n(232),i=n(233),s=Object.prototype.hasOwnProperty;t.exports=function(t){if(!r(t))return i(t);var e=[];for(var n in Object(t))s.call(t,n)&&"constructor"!=n&&e.push(n);return e}},function(t,e){var n=Object.prototype;t.exports=function(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||n)}},function(t,e,n){var r=n(234)(Object.keys,Object);t.exports=r},function(t,e){t.exports=function(t,e){return function(n){return t(e(n))}}},function(t,e,n){var r=n(236),i=n(57),s=n(237),a=n(112),o=n(238),l=n(28),c=n(102),p=c(r),u=c(i),d=c(s),m=c(a),g=c(o),h=l;(r&&"[object DataView]"!=h(new r(new ArrayBuffer(1)))||i&&"[object Map]"!=h(new i)||s&&"[object Promise]"!=h(s.resolve())||a&&"[object Set]"!=h(new a)||o&&"[object WeakMap]"!=h(new o))&&(h=function(t){var e=l(t),n="[object Object]"==e?t.constructor:void 0,r=n?c(n):"";if(r)switch(r){case p:return"[object DataView]";case u:return"[object Map]";case d:return"[object Promise]";case m:return"[object Set]";case g:return"[object WeakMap]"}return e}),t.exports=h},function(t,e,n){var r=n(20)(n(14),"DataView");t.exports=r},function(t,e,n){var r=n(20)(n(14),"Promise");t.exports=r},function(t,e,n){var r=n(20)(n(14),"WeakMap");t.exports=r},function(t,e,n){var r=n(113),i=n(107);t.exports=function(t){for(var e=i(t),n=e.length;n--;){var s=e[n],a=t[s];e[n]=[s,a,r(a)]}return e}},function(t,e,n){var r=n(103),i=n(241),s=n(248),a=n(62),o=n(113),l=n(114),c=n(44);t.exports=function(t,e){return a(t)&&o(e)?l(c(t),e):function(n){var a=i(n,t);return void 0===a&&a===e?s(n,t):r(e,a,3)}}},function(t,e,n){var r=n(115);t.exports=function(t,e,n){var i=null==t?void 0:r(t,e);return void 0===i?n:i}},function(t,e,n){var r=n(243),i=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,s=/\\(\\)?/g,a=r((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(i,(function(t,n,r,i){e.push(r?i.replace(s,"$1"):n||t)})),e}));t.exports=a},function(t,e,n){var r=n(244);t.exports=function(t){var e=r(t,(function(t){return 500===n.size&&n.clear(),t})),n=e.cache;return e}},function(t,e,n){var r=n(59);function i(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var n=function(){var r=arguments,i=e?e.apply(this,r):r[0],s=n.cache;if(s.has(i))return s.get(i);var a=t.apply(this,r);return n.cache=s.set(i,a)||s,a};return n.cache=new(i.Cache||r),n}i.Cache=r,t.exports=i},function(t,e,n){var r=n(246);t.exports=function(t){return null==t?"":r(t)}},function(t,e,n){var r=n(30),i=n(247),s=n(13),a=n(63),o=r?r.prototype:void 0,l=o?o.toString:void 0;t.exports=function t(e){if("string"==typeof e)return e;if(s(e))return i(e,t)+"";if(a(e))return l?l.call(e):"";var n=e+"";return"0"==n&&1/e==-1/0?"-0":n}},function(t,e){t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}},function(t,e,n){var r=n(249),i=n(250);t.exports=function(t,e){return null!=t&&i(t,e,r)}},function(t,e){t.exports=function(t,e){return null!=t&&e in Object(t)}},function(t,e,n){var r=n(116),i=n(56),s=n(13),a=n(109),o=n(61),l=n(44);t.exports=function(t,e,n){for(var c=-1,p=(e=r(e,t)).length,u=!1;++c<p;){var d=l(e[c]);if(!(u=null!=t&&n(t,d)))break;t=t[d]}return u||++c!=p?u:!!(p=null==t?0:t.length)&&o(p)&&a(d,p)&&(s(t)||i(t))}},function(t,e,n){var r=n(252),i=n(253),s=n(62),a=n(44);t.exports=function(t){return s(t)?r(a(t)):i(t)}},function(t,e){t.exports=function(t){return function(e){return null==e?void 0:e[t]}}},function(t,e,n){var r=n(115);t.exports=function(t){return function(e){return r(e,t)}}},function(t,e,n){var r=n(64),i=n(255),s=n(257);t.exports=function(t,e){return s(i(t,e,r),t+"")}},function(t,e,n){var r=n(256),i=Math.max;t.exports=function(t,e,n){return e=i(void 0===e?t.length-1:e,0),function(){for(var s=arguments,a=-1,o=i(s.length-e,0),l=Array(o);++a<o;)l[a]=s[e+a];a=-1;for(var c=Array(e+1);++a<e;)c[a]=s[a];return c[e]=n(l),r(t,this,c)}}},function(t,e){t.exports=function(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}},function(t,e,n){var r=n(258),i=n(261)(r);t.exports=i},function(t,e,n){var r=n(259),i=n(260),s=n(64),a=i?function(t,e){return i(t,"toString",{configurable:!0,enumerable:!1,value:r(e),writable:!0})}:s;t.exports=a},function(t,e){t.exports=function(t){return function(){return t}}},function(t,e,n){var r=n(20),i=function(){try{var t=r(Object,"defineProperty");return t({},"",{}),t}catch(t){}}();t.exports=i},function(t,e){var n=Date.now;t.exports=function(t){var e=0,r=0;return function(){var i=n(),s=16-(i-r);if(r=i,s>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(void 0,arguments)}}},function(t,e,n){var r=n(105),i=n(263),s=n(268),a=n(106),o=n(269),l=n(60);t.exports=function(t,e,n){var c=-1,p=i,u=t.length,d=!0,m=[],g=m;if(n)d=!1,p=s;else if(u>=200){var h=e?null:o(t);if(h)return l(h);d=!1,p=a,g=new r}else g=e?[]:m;t:for(;++c<u;){var f=t[c],v=e?e(f):f;if(f=n||0!==f?f:0,d&&v==v){for(var b=g.length;b--;)if(g[b]===v)continue t;e&&g.push(v),m.push(f)}else p(g,v,n)||(g!==m&&g.push(v),m.push(f))}return m}},function(t,e,n){var r=n(264);t.exports=function(t,e){return!!(null==t?0:t.length)&&r(t,e,0)>-1}},function(t,e,n){var r=n(265),i=n(266),s=n(267);t.exports=function(t,e,n){return e==e?s(t,e,n):r(t,i,n)}},function(t,e){t.exports=function(t,e,n,r){for(var i=t.length,s=n+(r?1:-1);r?s--:++s<i;)if(e(t[s],s,t))return s;return-1}},function(t,e){t.exports=function(t){return t!=t}},function(t,e){t.exports=function(t,e,n){for(var r=n-1,i=t.length;++r<i;)if(t[r]===e)return r;return-1}},function(t,e){t.exports=function(t,e,n){for(var r=-1,i=null==t?0:t.length;++r<i;)if(n(e,t[r]))return!0;return!1}},function(t,e,n){var r=n(112),i=n(270),s=n(60),a=r&&1/s(new r([,-0]))[1]==1/0?function(t){return new r(t)}:i;t.exports=a},function(t,e){t.exports=function(){}},function(t,e,n){var r=n(111),i=n(23);t.exports=function(t){return i(t)&&r(t)}},function(t,e,n){},function(t,e,n){},function(t,e,n){"use strict";n(117)},function(t,e,n){"use strict";n(118)},function(t,e,n){},function(t,e,n){},function(t,e,n){"use strict";n(119)},function(t,e,n){"use strict";n(120)},function(t,e,n){"use strict";n.r(e);n(4),n(16),n(22);var r=Object.freeze({}),i=Array.isArray;function s(t){return null==t}function a(t){return null!=t}function o(t){return!0===t}function l(t){return"string"==typeof t||"number"==typeof t||"symbol"==typeof t||"boolean"==typeof t}function c(t){return"function"==typeof t}function p(t){return null!==t&&"object"==typeof t}var u=Object.prototype.toString;function d(t){return"[object Object]"===u.call(t)}function m(t){return"[object RegExp]"===u.call(t)}function g(t){var e=parseFloat(String(t));return e>=0&&Math.floor(e)===e&&isFinite(t)}function h(t){return a(t)&&"function"==typeof t.then&&"function"==typeof t.catch}function f(t){return null==t?"":Array.isArray(t)||d(t)&&t.toString===u?JSON.stringify(t,v,2):String(t)}function v(t,e){return e&&e.__v_isRef?e.value:e}function b(t){var e=parseFloat(t);return isNaN(e)?t:e}function y(t,e){for(var n=Object.create(null),r=t.split(","),i=0;i<r.length;i++)n[r[i]]=!0;return e?function(t){return n[t.toLowerCase()]}:function(t){return n[t]}}y("slot,component",!0);var x=y("key,ref,slot,slot-scope,is");function k(t,e){var n=t.length;if(n){if(e===t[n-1])return void(t.length=n-1);var r=t.indexOf(e);if(r>-1)return t.splice(r,1)}}var w=Object.prototype.hasOwnProperty;function E(t,e){return w.call(t,e)}function T(t){var e=Object.create(null);return function(n){return e[n]||(e[n]=t(n))}}var S=/-(\w)/g,_=T((function(t){return t.replace(S,(function(t,e){return e?e.toUpperCase():""}))})),C=T((function(t){return t.charAt(0).toUpperCase()+t.slice(1)})),I=/\B([A-Z])/g,q=T((function(t){return t.replace(I,"-$1").toLowerCase()}));var P=Function.prototype.bind?function(t,e){return t.bind(e)}:function(t,e){function n(n){var r=arguments.length;return r?r>1?t.apply(e,arguments):t.call(e,n):t.call(e)}return n._length=t.length,n};function A(t,e){e=e||0;for(var n=t.length-e,r=new Array(n);n--;)r[n]=t[n+e];return r}function j(t,e){for(var n in e)t[n]=e[n];return t}function O(t){for(var e={},n=0;n<t.length;n++)t[n]&&j(e,t[n]);return e}function z(t,e,n){}var M=function(t,e,n){return!1},D=function(t){return t};function R(t,e){if(t===e)return!0;var n=p(t),r=p(e);if(!n||!r)return!n&&!r&&String(t)===String(e);try{var i=Array.isArray(t),s=Array.isArray(e);if(i&&s)return t.length===e.length&&t.every((function(t,n){return R(t,e[n])}));if(t instanceof Date&&e instanceof Date)return t.getTime()===e.getTime();if(i||s)return!1;var a=Object.keys(t),o=Object.keys(e);return a.length===o.length&&a.every((function(n){return R(t[n],e[n])}))}catch(t){return!1}}function B(t,e){for(var n=0;n<t.length;n++)if(R(t[n],e))return n;return-1}function L(t){var e=!1;return function(){e||(e=!0,t.apply(this,arguments))}}function U(t,e){return t===e?0===t&&1/t!=1/e:t==t||e==e}var N=["component","directive","filter"],F=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch","renderTracked","renderTriggered"],H={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:M,isReservedAttr:M,isUnknownElement:M,getTagNamespace:z,parsePlatformTagName:D,mustUseProp:M,async:!0,_lifecycleHooks:F},$=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function V(t){var e=(t+"").charCodeAt(0);return 36===e||95===e}function G(t,e,n,r){Object.defineProperty(t,e,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var W=new RegExp("[^".concat($.source,".$_\\d]"));var K="__proto__"in{},Q="undefined"!=typeof window,Y=Q&&window.navigator.userAgent.toLowerCase(),X=Y&&/msie|trident/.test(Y),Z=Y&&Y.indexOf("msie 9.0")>0,J=Y&&Y.indexOf("edge/")>0;Y&&Y.indexOf("android");var tt=Y&&/iphone|ipad|ipod|ios/.test(Y);Y&&/chrome\/\d+/.test(Y),Y&&/phantomjs/.test(Y);var et,nt=Y&&Y.match(/firefox\/(\d+)/),rt={}.watch,it=!1;if(Q)try{var st={};Object.defineProperty(st,"passive",{get:function(){it=!0}}),window.addEventListener("test-passive",null,st)}catch(t){}var at=function(){return void 0===et&&(et=!Q&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),et},ot=Q&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function lt(t){return"function"==typeof t&&/native code/.test(t.toString())}var ct,pt="undefined"!=typeof Symbol&&lt(Symbol)&&"undefined"!=typeof Reflect&&lt(Reflect.ownKeys);ct="undefined"!=typeof Set&&lt(Set)?Set:function(){function t(){this.set=Object.create(null)}return t.prototype.has=function(t){return!0===this.set[t]},t.prototype.add=function(t){this.set[t]=!0},t.prototype.clear=function(){this.set=Object.create(null)},t}();var ut=null;function dt(t){void 0===t&&(t=null),t||ut&&ut._scope.off(),ut=t,t&&t._scope.on()}var mt=function(){function t(t,e,n,r,i,s,a,o){this.tag=t,this.data=e,this.children=n,this.text=r,this.elm=i,this.ns=void 0,this.context=s,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=o,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1}return Object.defineProperty(t.prototype,"child",{get:function(){return this.componentInstance},enumerable:!1,configurable:!0}),t}(),gt=function(t){void 0===t&&(t="");var e=new mt;return e.text=t,e.isComment=!0,e};function ht(t){return new mt(void 0,void 0,void 0,String(t))}function ft(t){var e=new mt(t.tag,t.data,t.children&&t.children.slice(),t.text,t.elm,t.context,t.componentOptions,t.asyncFactory);return e.ns=t.ns,e.isStatic=t.isStatic,e.key=t.key,e.isComment=t.isComment,e.fnContext=t.fnContext,e.fnOptions=t.fnOptions,e.fnScopeId=t.fnScopeId,e.asyncMeta=t.asyncMeta,e.isCloned=!0,e}"function"==typeof SuppressedError&&SuppressedError;var vt=0,bt=[],yt=function(){function t(){this._pending=!1,this.id=vt++,this.subs=[]}return t.prototype.addSub=function(t){this.subs.push(t)},t.prototype.removeSub=function(t){this.subs[this.subs.indexOf(t)]=null,this._pending||(this._pending=!0,bt.push(this))},t.prototype.depend=function(e){t.target&&t.target.addDep(this)},t.prototype.notify=function(t){var e=this.subs.filter((function(t){return t}));for(var n=0,r=e.length;n<r;n++){0,e[n].update()}},t}();yt.target=null;var xt=[];function kt(t){xt.push(t),yt.target=t}function wt(){xt.pop(),yt.target=xt[xt.length-1]}var Et=Array.prototype,Tt=Object.create(Et);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(t){var e=Et[t];G(Tt,t,(function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var i,s=e.apply(this,n),a=this.__ob__;switch(t){case"push":case"unshift":i=n;break;case"splice":i=n.slice(2)}return i&&a.observeArray(i),a.dep.notify(),s}))}));var St=Object.getOwnPropertyNames(Tt),_t={},Ct=!0;function It(t){Ct=t}var qt={notify:z,depend:z,addSub:z,removeSub:z},Pt=function(){function t(t,e,n){if(void 0===e&&(e=!1),void 0===n&&(n=!1),this.value=t,this.shallow=e,this.mock=n,this.dep=n?qt:new yt,this.vmCount=0,G(t,"__ob__",this),i(t)){if(!n)if(K)t.__proto__=Tt;else for(var r=0,s=St.length;r<s;r++){G(t,o=St[r],Tt[o])}e||this.observeArray(t)}else{var a=Object.keys(t);for(r=0;r<a.length;r++){var o;jt(t,o=a[r],_t,void 0,e,n)}}}return t.prototype.observeArray=function(t){for(var e=0,n=t.length;e<n;e++)At(t[e],!1,this.mock)},t}();function At(t,e,n){return t&&E(t,"__ob__")&&t.__ob__ instanceof Pt?t.__ob__:!Ct||!n&&at()||!i(t)&&!d(t)||!Object.isExtensible(t)||t.__v_skip||Lt(t)||t instanceof mt?void 0:new Pt(t,e,n)}function jt(t,e,n,r,s,a,o){void 0===o&&(o=!1);var l=new yt,c=Object.getOwnPropertyDescriptor(t,e);if(!c||!1!==c.configurable){var p=c&&c.get,u=c&&c.set;p&&!u||n!==_t&&2!==arguments.length||(n=t[e]);var d=s?n&&n.__ob__:At(n,!1,a);return Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:function(){var e=p?p.call(t):n;return yt.target&&(l.depend(),d&&(d.dep.depend(),i(e)&&Mt(e))),Lt(e)&&!s?e.value:e},set:function(e){var r=p?p.call(t):n;if(U(r,e)){if(u)u.call(t,e);else{if(p)return;if(!s&&Lt(r)&&!Lt(e))return void(r.value=e);n=e}d=s?e&&e.__ob__:At(e,!1,a),l.notify()}}}),l}}function Ot(t,e,n){if(!Bt(t)){var r=t.__ob__;return i(t)&&g(e)?(t.length=Math.max(t.length,e),t.splice(e,1,n),r&&!r.shallow&&r.mock&&At(n,!1,!0),n):e in t&&!(e in Object.prototype)?(t[e]=n,n):t._isVue||r&&r.vmCount?n:r?(jt(r.value,e,n,void 0,r.shallow,r.mock),r.dep.notify(),n):(t[e]=n,n)}}function zt(t,e){if(i(t)&&g(e))t.splice(e,1);else{var n=t.__ob__;t._isVue||n&&n.vmCount||Bt(t)||E(t,e)&&(delete t[e],n&&n.dep.notify())}}function Mt(t){for(var e=void 0,n=0,r=t.length;n<r;n++)(e=t[n])&&e.__ob__&&e.__ob__.dep.depend(),i(e)&&Mt(e)}function Dt(t){return Rt(t,!0),G(t,"__v_isShallow",!0),t}function Rt(t,e){if(!Bt(t)){At(t,e,at());0}}function Bt(t){return!(!t||!t.__v_isReadonly)}function Lt(t){return!(!t||!0!==t.__v_isRef)}function Ut(t,e,n){Object.defineProperty(t,n,{enumerable:!0,configurable:!0,get:function(){var t=e[n];if(Lt(t))return t.value;var r=t&&t.__ob__;return r&&r.dep.depend(),t},set:function(t){var r=e[n];Lt(r)&&!Lt(t)?r.value=t:e[n]=t}})}"".concat("watcher"," callback"),"".concat("watcher"," getter"),"".concat("watcher"," cleanup");var Nt;var Ft=function(){function t(t){void 0===t&&(t=!1),this.detached=t,this.active=!0,this.effects=[],this.cleanups=[],this.parent=Nt,!t&&Nt&&(this.index=(Nt.scopes||(Nt.scopes=[])).push(this)-1)}return t.prototype.run=function(t){if(this.active){var e=Nt;try{return Nt=this,t()}finally{Nt=e}}else 0},t.prototype.on=function(){Nt=this},t.prototype.off=function(){Nt=this.parent},t.prototype.stop=function(t){if(this.active){var e=void 0,n=void 0;for(e=0,n=this.effects.length;e<n;e++)this.effects[e].teardown();for(e=0,n=this.cleanups.length;e<n;e++)this.cleanups[e]();if(this.scopes)for(e=0,n=this.scopes.length;e<n;e++)this.scopes[e].stop(!0);if(!this.detached&&this.parent&&!t){var r=this.parent.scopes.pop();r&&r!==this&&(this.parent.scopes[this.index]=r,r.index=this.index)}this.parent=void 0,this.active=!1}},t}();function Ht(t){var e=t._provided,n=t.$parent&&t.$parent._provided;return n===e?t._provided=Object.create(n):e}var $t=T((function(t){var e="&"===t.charAt(0),n="~"===(t=e?t.slice(1):t).charAt(0),r="!"===(t=n?t.slice(1):t).charAt(0);return{name:t=r?t.slice(1):t,once:n,capture:r,passive:e}}));function Vt(t,e){function n(){var t=n.fns;if(!i(t))return Ce(t,null,arguments,e,"v-on handler");for(var r=t.slice(),s=0;s<r.length;s++)Ce(r[s],null,arguments,e,"v-on handler")}return n.fns=t,n}function Gt(t,e,n,r,i,a){var l,c,p,u;for(l in t)c=t[l],p=e[l],u=$t(l),s(c)||(s(p)?(s(c.fns)&&(c=t[l]=Vt(c,a)),o(u.once)&&(c=t[l]=i(u.name,c,u.capture)),n(u.name,c,u.capture,u.passive,u.params)):c!==p&&(p.fns=c,t[l]=p));for(l in e)s(t[l])&&r((u=$t(l)).name,e[l],u.capture)}function Wt(t,e,n){var r;t instanceof mt&&(t=t.data.hook||(t.data.hook={}));var i=t[e];function l(){n.apply(this,arguments),k(r.fns,l)}s(i)?r=Vt([l]):a(i.fns)&&o(i.merged)?(r=i).fns.push(l):r=Vt([i,l]),r.merged=!0,t[e]=r}function Kt(t,e,n,r,i){if(a(e)){if(E(e,n))return t[n]=e[n],i||delete e[n],!0;if(E(e,r))return t[n]=e[r],i||delete e[r],!0}return!1}function Qt(t){return l(t)?[ht(t)]:i(t)?function t(e,n){var r,c,p,u,d=[];for(r=0;r<e.length;r++)s(c=e[r])||"boolean"==typeof c||(p=d.length-1,u=d[p],i(c)?c.length>0&&(Yt((c=t(c,"".concat(n||"","_").concat(r)))[0])&&Yt(u)&&(d[p]=ht(u.text+c[0].text),c.shift()),d.push.apply(d,c)):l(c)?Yt(u)?d[p]=ht(u.text+c):""!==c&&d.push(ht(c)):Yt(c)&&Yt(u)?d[p]=ht(u.text+c.text):(o(e._isVList)&&a(c.tag)&&s(c.key)&&a(n)&&(c.key="__vlist".concat(n,"_").concat(r,"__")),d.push(c)));return d}(t):void 0}function Yt(t){return a(t)&&a(t.text)&&!1===t.isComment}function Xt(t,e){var n,r,s,o,l=null;if(i(t)||"string"==typeof t)for(l=new Array(t.length),n=0,r=t.length;n<r;n++)l[n]=e(t[n],n);else if("number"==typeof t)for(l=new Array(t),n=0;n<t;n++)l[n]=e(n+1,n);else if(p(t))if(pt&&t[Symbol.iterator]){l=[];for(var c=t[Symbol.iterator](),u=c.next();!u.done;)l.push(e(u.value,l.length)),u=c.next()}else for(s=Object.keys(t),l=new Array(s.length),n=0,r=s.length;n<r;n++)o=s[n],l[n]=e(t[o],o,n);return a(l)||(l=[]),l._isVList=!0,l}function Zt(t,e,n,r){var i,s=this.$scopedSlots[t];s?(n=n||{},r&&(n=j(j({},r),n)),i=s(n)||(c(e)?e():e)):i=this.$slots[t]||(c(e)?e():e);var a=n&&n.slot;return a?this.$createElement("template",{slot:a},i):i}function Jt(t){return An(this.$options,"filters",t,!0)||D}function te(t,e){return i(t)?-1===t.indexOf(e):t!==e}function ee(t,e,n,r,i){var s=H.keyCodes[e]||n;return i&&r&&!H.keyCodes[e]?te(i,r):s?te(s,t):r?q(r)!==e:void 0===t}function ne(t,e,n,r,s){if(n)if(p(n)){i(n)&&(n=O(n));var a=void 0,o=function(i){if("class"===i||"style"===i||x(i))a=t;else{var o=t.attrs&&t.attrs.type;a=r||H.mustUseProp(e,o,i)?t.domProps||(t.domProps={}):t.attrs||(t.attrs={})}var l=_(i),c=q(i);l in a||c in a||(a[i]=n[i],s&&((t.on||(t.on={}))["update:".concat(i)]=function(t){n[i]=t}))};for(var l in n)o(l)}else;return t}function re(t,e){var n=this._staticTrees||(this._staticTrees=[]),r=n[t];return r&&!e||se(r=n[t]=this.$options.staticRenderFns[t].call(this._renderProxy,this._c,this),"__static__".concat(t),!1),r}function ie(t,e,n){return se(t,"__once__".concat(e).concat(n?"_".concat(n):""),!0),t}function se(t,e,n){if(i(t))for(var r=0;r<t.length;r++)t[r]&&"string"!=typeof t[r]&&ae(t[r],"".concat(e,"_").concat(r),n);else ae(t,e,n)}function ae(t,e,n){t.isStatic=!0,t.key=e,t.isOnce=n}function oe(t,e){if(e)if(d(e)){var n=t.on=t.on?j({},t.on):{};for(var r in e){var i=n[r],s=e[r];n[r]=i?[].concat(i,s):s}}else;return t}function le(t,e,n,r){e=e||{$stable:!n};for(var s=0;s<t.length;s++){var a=t[s];i(a)?le(a,e,n):a&&(a.proxy&&(a.fn.proxy=!0),e[a.key]=a.fn)}return r&&(e.$key=r),e}function ce(t,e){for(var n=0;n<e.length;n+=2){var r=e[n];"string"==typeof r&&r&&(t[e[n]]=e[n+1])}return t}function pe(t,e){return"string"==typeof t?e+t:t}function ue(t){t._o=ie,t._n=b,t._s=f,t._l=Xt,t._t=Zt,t._q=R,t._i=B,t._m=re,t._f=Jt,t._k=ee,t._b=ne,t._v=ht,t._e=gt,t._u=le,t._g=oe,t._d=ce,t._p=pe}function de(t,e){if(!t||!t.length)return{};for(var n={},r=0,i=t.length;r<i;r++){var s=t[r],a=s.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,s.context!==e&&s.fnContext!==e||!a||null==a.slot)(n.default||(n.default=[])).push(s);else{var o=a.slot,l=n[o]||(n[o]=[]);"template"===s.tag?l.push.apply(l,s.children||[]):l.push(s)}}for(var c in n)n[c].every(me)&&delete n[c];return n}function me(t){return t.isComment&&!t.asyncFactory||" "===t.text}function ge(t){return t.isComment&&t.asyncFactory}function he(t,e,n,i){var s,a=Object.keys(n).length>0,o=e?!!e.$stable:!a,l=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(o&&i&&i!==r&&l===i.$key&&!a&&!i.$hasNormal)return i;for(var c in s={},e)e[c]&&"$"!==c[0]&&(s[c]=fe(t,n,c,e[c]))}else s={};for(var p in n)p in s||(s[p]=ve(n,p));return e&&Object.isExtensible(e)&&(e._normalized=s),G(s,"$stable",o),G(s,"$key",l),G(s,"$hasNormal",a),s}function fe(t,e,n,r){var s=function(){var e=ut;dt(t);var n=arguments.length?r.apply(null,arguments):r({}),s=(n=n&&"object"==typeof n&&!i(n)?[n]:Qt(n))&&n[0];return dt(e),n&&(!s||1===n.length&&s.isComment&&!ge(s))?void 0:n};return r.proxy&&Object.defineProperty(e,n,{get:s,enumerable:!0,configurable:!0}),s}function ve(t,e){return function(){return t[e]}}function be(t){return{get attrs(){if(!t._attrsProxy){var e=t._attrsProxy={};G(e,"_v_attr_proxy",!0),ye(e,t.$attrs,r,t,"$attrs")}return t._attrsProxy},get listeners(){t._listenersProxy||ye(t._listenersProxy={},t.$listeners,r,t,"$listeners");return t._listenersProxy},get slots(){return function(t){t._slotsProxy||ke(t._slotsProxy={},t.$scopedSlots);return t._slotsProxy}(t)},emit:P(t.$emit,t),expose:function(e){e&&Object.keys(e).forEach((function(n){return Ut(t,e,n)}))}}}function ye(t,e,n,r,i){var s=!1;for(var a in e)a in t?e[a]!==n[a]&&(s=!0):(s=!0,xe(t,a,r,i));for(var a in t)a in e||(s=!0,delete t[a]);return s}function xe(t,e,n,r){Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:function(){return n[r][e]}})}function ke(t,e){for(var n in e)t[n]=e[n];for(var n in t)n in e||delete t[n]}var we=null;function Ee(t,e){return(t.__esModule||pt&&"Module"===t[Symbol.toStringTag])&&(t=t.default),p(t)?e.extend(t):t}function Te(t){if(i(t))for(var e=0;e<t.length;e++){var n=t[e];if(a(n)&&(a(n.componentOptions)||ge(n)))return n}}function Se(t,e,n,r,u,d){return(i(n)||l(n))&&(u=r,r=n,n=void 0),o(d)&&(u=2),function(t,e,n,r,l){if(a(n)&&a(n.__ob__))return gt();a(n)&&a(n.is)&&(e=n.is);if(!e)return gt();0;i(r)&&c(r[0])&&((n=n||{}).scopedSlots={default:r[0]},r.length=0);2===l?r=Qt(r):1===l&&(r=function(t){for(var e=0;e<t.length;e++)if(i(t[e]))return Array.prototype.concat.apply([],t);return t}(r));var u,d;if("string"==typeof e){var m=void 0;d=t.$vnode&&t.$vnode.ns||H.getTagNamespace(e),u=H.isReservedTag(e)?new mt(H.parsePlatformTagName(e),n,r,void 0,void 0,t):n&&n.pre||!a(m=An(t.$options,"components",e))?new mt(e,n,r,void 0,void 0,t):kn(m,n,t,r,e)}else u=kn(e,n,t,r);return i(u)?u:a(u)?(a(d)&&function t(e,n,r){e.ns=n,"foreignObject"===e.tag&&(n=void 0,r=!0);if(a(e.children))for(var i=0,l=e.children.length;i<l;i++){var c=e.children[i];a(c.tag)&&(s(c.ns)||o(r)&&"svg"!==c.tag)&&t(c,n,r)}}(u,d),a(n)&&function(t){p(t.style)&&Fe(t.style);p(t.class)&&Fe(t.class)}(n),u):gt()}(t,e,n,r,u)}function _e(t,e,n){kt();try{if(e)for(var r=e;r=r.$parent;){var i=r.$options.errorCaptured;if(i)for(var s=0;s<i.length;s++)try{if(!1===i[s].call(r,t,e,n))return}catch(t){Ie(t,r,"errorCaptured hook")}}Ie(t,e,n)}finally{wt()}}function Ce(t,e,n,r,i){var s;try{(s=n?t.apply(e,n):t.call(e))&&!s._isVue&&h(s)&&!s._handled&&(s.catch((function(t){return _e(t,r,i+" (Promise/async)")})),s._handled=!0)}catch(t){_e(t,r,i)}return s}function Ie(t,e,n){if(H.errorHandler)try{return H.errorHandler.call(null,t,e,n)}catch(e){e!==t&&qe(e,null,"config.errorHandler")}qe(t,e,n)}function qe(t,e,n){if(!Q||"undefined"==typeof console)throw t;console.error(t)}var Pe,Ae=!1,je=[],Oe=!1;function ze(){Oe=!1;var t=je.slice(0);je.length=0;for(var e=0;e<t.length;e++)t[e]()}if("undefined"!=typeof Promise&&lt(Promise)){var Me=Promise.resolve();Pe=function(){Me.then(ze),tt&&setTimeout(z)},Ae=!0}else if(X||"undefined"==typeof MutationObserver||!lt(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Pe="undefined"!=typeof setImmediate&&lt(setImmediate)?function(){setImmediate(ze)}:function(){setTimeout(ze,0)};else{var De=1,Re=new MutationObserver(ze),Be=document.createTextNode(String(De));Re.observe(Be,{characterData:!0}),Pe=function(){De=(De+1)%2,Be.data=String(De)},Ae=!0}function Le(t,e){var n;if(je.push((function(){if(t)try{t.call(e)}catch(t){_e(t,e,"nextTick")}else n&&n(e)})),Oe||(Oe=!0,Pe()),!t&&"undefined"!=typeof Promise)return new Promise((function(t){n=t}))}function Ue(t){return function(e,n){if(void 0===n&&(n=ut),n)return function(t,e,n){var r=t.$options;r[e]=Cn(r[e],n)}(n,t,e)}}Ue("beforeMount"),Ue("mounted"),Ue("beforeUpdate"),Ue("updated"),Ue("beforeDestroy"),Ue("destroyed"),Ue("activated"),Ue("deactivated"),Ue("serverPrefetch"),Ue("renderTracked"),Ue("renderTriggered"),Ue("errorCaptured");var Ne=new ct;function Fe(t){return function t(e,n){var r,s,a=i(e);if(!a&&!p(e)||e.__v_skip||Object.isFrozen(e)||e instanceof mt)return;if(e.__ob__){var o=e.__ob__.dep.id;if(n.has(o))return;n.add(o)}if(a)for(r=e.length;r--;)t(e[r],n);else if(Lt(e))t(e.value,n);else for(s=Object.keys(e),r=s.length;r--;)t(e[s[r]],n)}(t,Ne),Ne.clear(),t}var He,$e=0,Ve=function(){function t(t,e,n,r,i){var s,a;s=this,void 0===(a=Nt&&!Nt._vm?Nt:t?t._scope:void 0)&&(a=Nt),a&&a.active&&a.effects.push(s),(this.vm=t)&&i&&(t._watcher=this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++$e,this.active=!0,this.post=!1,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ct,this.newDepIds=new ct,this.expression="",c(e)?this.getter=e:(this.getter=function(t){if(!W.test(t)){var e=t.split(".");return function(t){for(var n=0;n<e.length;n++){if(!t)return;t=t[e[n]]}return t}}}(e),this.getter||(this.getter=z)),this.value=this.lazy?void 0:this.get()}return t.prototype.get=function(){var t;kt(this);var e=this.vm;try{t=this.getter.call(e,e)}catch(t){if(!this.user)throw t;_e(t,e,'getter for watcher "'.concat(this.expression,'"'))}finally{this.deep&&Fe(t),wt(),this.cleanupDeps()}return t},t.prototype.addDep=function(t){var e=t.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(t),this.depIds.has(e)||t.addSub(this))},t.prototype.cleanupDeps=function(){for(var t=this.deps.length;t--;){var e=this.deps[t];this.newDepIds.has(e.id)||e.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},t.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():mn(this)},t.prototype.run=function(){if(this.active){var t=this.get();if(t!==this.value||p(t)||this.deep){var e=this.value;if(this.value=t,this.user){var n='callback for watcher "'.concat(this.expression,'"');Ce(this.cb,this.vm,[t,e],this.vm,n)}else this.cb.call(this.vm,t,e)}}},t.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},t.prototype.depend=function(){for(var t=this.deps.length;t--;)this.deps[t].depend()},t.prototype.teardown=function(){if(this.vm&&!this.vm._isBeingDestroyed&&k(this.vm._scope.effects,this),this.active){for(var t=this.deps.length;t--;)this.deps[t].removeSub(this);this.active=!1,this.onStop&&this.onStop()}},t}();function Ge(t,e){He.$on(t,e)}function We(t,e){He.$off(t,e)}function Ke(t,e){var n=He;return function r(){var i=e.apply(null,arguments);null!==i&&n.$off(t,r)}}function Qe(t,e,n){He=t,Gt(e,n||{},Ge,We,Ke,t),He=void 0}var Ye=null;function Xe(t){var e=Ye;return Ye=t,function(){Ye=e}}function Ze(t){for(;t&&(t=t.$parent);)if(t._inactive)return!0;return!1}function Je(t,e){if(e){if(t._directInactive=!1,Ze(t))return}else if(t._directInactive)return;if(t._inactive||null===t._inactive){t._inactive=!1;for(var n=0;n<t.$children.length;n++)Je(t.$children[n]);tn(t,"activated")}}function tn(t,e,n,r){void 0===r&&(r=!0),kt();var i=ut,s=Nt;r&&dt(t);var a=t.$options[e],o="".concat(e," hook");if(a)for(var l=0,c=a.length;l<c;l++)Ce(a[l],t,n||null,t,o);t._hasHookEvent&&t.$emit("hook:"+e),r&&(dt(i),s&&s.on()),wt()}var en=[],nn=[],rn={},sn=!1,an=!1,on=0;var ln=0,cn=Date.now;if(Q&&!X){var pn=window.performance;pn&&"function"==typeof pn.now&&cn()>document.createEvent("Event").timeStamp&&(cn=function(){return pn.now()})}var un=function(t,e){if(t.post){if(!e.post)return 1}else if(e.post)return-1;return t.id-e.id};function dn(){var t,e;for(ln=cn(),an=!0,en.sort(un),on=0;on<en.length;on++)(t=en[on]).before&&t.before(),e=t.id,rn[e]=null,t.run();var n=nn.slice(),r=en.slice();on=en.length=nn.length=0,rn={},sn=an=!1,function(t){for(var e=0;e<t.length;e++)t[e]._inactive=!0,Je(t[e],!0)}(n),function(t){var e=t.length;for(;e--;){var n=t[e],r=n.vm;r&&r._watcher===n&&r._isMounted&&!r._isDestroyed&&tn(r,"updated")}}(r),function(){for(var t=0;t<bt.length;t++){var e=bt[t];e.subs=e.subs.filter((function(t){return t})),e._pending=!1}bt.length=0}(),ot&&H.devtools&&ot.emit("flush")}function mn(t){var e=t.id;if(null==rn[e]&&(t!==yt.target||!t.noRecurse)){if(rn[e]=!0,an){for(var n=en.length-1;n>on&&en[n].id>t.id;)n--;en.splice(n+1,0,t)}else en.push(t);sn||(sn=!0,Le(dn))}}function gn(t,e){if(t){for(var n=Object.create(null),r=pt?Reflect.ownKeys(t):Object.keys(t),i=0;i<r.length;i++){var s=r[i];if("__ob__"!==s){var a=t[s].from;if(a in e._provided)n[s]=e._provided[a];else if("default"in t[s]){var o=t[s].default;n[s]=c(o)?o.call(e):o}else 0}}return n}}function hn(t,e,n,s,a){var l,c=this,p=a.options;E(s,"_uid")?(l=Object.create(s))._original=s:(l=s,s=s._original);var u=o(p._compiled),d=!u;this.data=t,this.props=e,this.children=n,this.parent=s,this.listeners=t.on||r,this.injections=gn(p.inject,s),this.slots=function(){return c.$slots||he(s,t.scopedSlots,c.$slots=de(n,s)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return he(s,t.scopedSlots,this.slots())}}),u&&(this.$options=p,this.$slots=this.slots(),this.$scopedSlots=he(s,t.scopedSlots,this.$slots)),p._scopeId?this._c=function(t,e,n,r){var a=Se(l,t,e,n,r,d);return a&&!i(a)&&(a.fnScopeId=p._scopeId,a.fnContext=s),a}:this._c=function(t,e,n,r){return Se(l,t,e,n,r,d)}}function fn(t,e,n,r,i){var s=ft(t);return s.fnContext=n,s.fnOptions=r,e.slot&&((s.data||(s.data={})).slot=e.slot),s}function vn(t,e){for(var n in e)t[_(n)]=e[n]}function bn(t){return t.name||t.__name||t._componentTag}ue(hn.prototype);var yn={init:function(t,e){if(t.componentInstance&&!t.componentInstance._isDestroyed&&t.data.keepAlive){var n=t;yn.prepatch(n,n)}else{(t.componentInstance=function(t,e){var n={_isComponent:!0,_parentVnode:t,parent:e},r=t.data.inlineTemplate;a(r)&&(n.render=r.render,n.staticRenderFns=r.staticRenderFns);return new t.componentOptions.Ctor(n)}(t,Ye)).$mount(e?t.elm:void 0,e)}},prepatch:function(t,e){var n=e.componentOptions;!function(t,e,n,i,s){var a=i.data.scopedSlots,o=t.$scopedSlots,l=!!(a&&!a.$stable||o!==r&&!o.$stable||a&&t.$scopedSlots.$key!==a.$key||!a&&t.$scopedSlots.$key),c=!!(s||t.$options._renderChildren||l),p=t.$vnode;t.$options._parentVnode=i,t.$vnode=i,t._vnode&&(t._vnode.parent=i),t.$options._renderChildren=s;var u=i.data.attrs||r;t._attrsProxy&&ye(t._attrsProxy,u,p.data&&p.data.attrs||r,t,"$attrs")&&(c=!0),t.$attrs=u,n=n||r;var d=t.$options._parentListeners;if(t._listenersProxy&&ye(t._listenersProxy,n,d||r,t,"$listeners"),t.$listeners=t.$options._parentListeners=n,Qe(t,n,d),e&&t.$options.props){It(!1);for(var m=t._props,g=t.$options._propKeys||[],h=0;h<g.length;h++){var f=g[h],v=t.$options.props;m[f]=jn(f,v,e,t)}It(!0),t.$options.propsData=e}c&&(t.$slots=de(s,i.context),t.$forceUpdate())}(e.componentInstance=t.componentInstance,n.propsData,n.listeners,e,n.children)},insert:function(t){var e,n=t.context,r=t.componentInstance;r._isMounted||(r._isMounted=!0,tn(r,"mounted")),t.data.keepAlive&&(n._isMounted?((e=r)._inactive=!1,nn.push(e)):Je(r,!0))},destroy:function(t){var e=t.componentInstance;e._isDestroyed||(t.data.keepAlive?function t(e,n){if(!(n&&(e._directInactive=!0,Ze(e))||e._inactive)){e._inactive=!0;for(var r=0;r<e.$children.length;r++)t(e.$children[r]);tn(e,"deactivated")}}(e,!0):e.$destroy())}},xn=Object.keys(yn);function kn(t,e,n,l,c){if(!s(t)){var u=n.$options._base;if(p(t)&&(t=u.extend(t)),"function"==typeof t){var d;if(s(t.cid)&&void 0===(t=function(t,e){if(o(t.error)&&a(t.errorComp))return t.errorComp;if(a(t.resolved))return t.resolved;var n=we;if(n&&a(t.owners)&&-1===t.owners.indexOf(n)&&t.owners.push(n),o(t.loading)&&a(t.loadingComp))return t.loadingComp;if(n&&!a(t.owners)){var r=t.owners=[n],i=!0,l=null,c=null;n.$on("hook:destroyed",(function(){return k(r,n)}));var u=function(t){for(var e=0,n=r.length;e<n;e++)r[e].$forceUpdate();t&&(r.length=0,null!==l&&(clearTimeout(l),l=null),null!==c&&(clearTimeout(c),c=null))},d=L((function(n){t.resolved=Ee(n,e),i?r.length=0:u(!0)})),m=L((function(e){a(t.errorComp)&&(t.error=!0,u(!0))})),g=t(d,m);return p(g)&&(h(g)?s(t.resolved)&&g.then(d,m):h(g.component)&&(g.component.then(d,m),a(g.error)&&(t.errorComp=Ee(g.error,e)),a(g.loading)&&(t.loadingComp=Ee(g.loading,e),0===g.delay?t.loading=!0:l=setTimeout((function(){l=null,s(t.resolved)&&s(t.error)&&(t.loading=!0,u(!1))}),g.delay||200)),a(g.timeout)&&(c=setTimeout((function(){c=null,s(t.resolved)&&m(null)}),g.timeout)))),i=!1,t.loading?t.loadingComp:t.resolved}}(d=t,u)))return function(t,e,n,r,i){var s=gt();return s.asyncFactory=t,s.asyncMeta={data:e,context:n,children:r,tag:i},s}(d,e,n,l,c);e=e||{},Gn(t),a(e.model)&&function(t,e){var n=t.model&&t.model.prop||"value",r=t.model&&t.model.event||"input";(e.attrs||(e.attrs={}))[n]=e.model.value;var s=e.on||(e.on={}),o=s[r],l=e.model.callback;a(o)?(i(o)?-1===o.indexOf(l):o!==l)&&(s[r]=[l].concat(o)):s[r]=l}(t.options,e);var m=function(t,e,n){var r=e.options.props;if(!s(r)){var i={},o=t.attrs,l=t.props;if(a(o)||a(l))for(var c in r){var p=q(c);Kt(i,l,c,p,!0)||Kt(i,o,c,p,!1)}return i}}(e,t);if(o(t.options.functional))return function(t,e,n,s,o){var l=t.options,c={},p=l.props;if(a(p))for(var u in p)c[u]=jn(u,p,e||r);else a(n.attrs)&&vn(c,n.attrs),a(n.props)&&vn(c,n.props);var d=new hn(n,c,o,s,t),m=l.render.call(null,d._c,d);if(m instanceof mt)return fn(m,n,d.parent,l,d);if(i(m)){for(var g=Qt(m)||[],h=new Array(g.length),f=0;f<g.length;f++)h[f]=fn(g[f],n,d.parent,l,d);return h}}(t,m,e,n,l);var g=e.on;if(e.on=e.nativeOn,o(t.options.abstract)){var f=e.slot;e={},f&&(e.slot=f)}!function(t){for(var e=t.hook||(t.hook={}),n=0;n<xn.length;n++){var r=xn[n],i=e[r],s=yn[r];i===s||i&&i._merged||(e[r]=i?wn(s,i):s)}}(e);var v=bn(t.options)||c;return new mt("vue-component-".concat(t.cid).concat(v?"-".concat(v):""),e,void 0,void 0,void 0,n,{Ctor:t,propsData:m,listeners:g,tag:c,children:l},d)}}}function wn(t,e){var n=function(n,r){t(n,r),e(n,r)};return n._merged=!0,n}var En=z,Tn=H.optionMergeStrategies;function Sn(t,e,n){if(void 0===n&&(n=!0),!e)return t;for(var r,i,s,a=pt?Reflect.ownKeys(e):Object.keys(e),o=0;o<a.length;o++)"__ob__"!==(r=a[o])&&(i=t[r],s=e[r],n&&E(t,r)?i!==s&&d(i)&&d(s)&&Sn(i,s):Ot(t,r,s));return t}function _n(t,e,n){return n?function(){var r=c(e)?e.call(n,n):e,i=c(t)?t.call(n,n):t;return r?Sn(r,i):i}:e?t?function(){return Sn(c(e)?e.call(this,this):e,c(t)?t.call(this,this):t)}:e:t}function Cn(t,e){var n=e?t?t.concat(e):i(e)?e:[e]:t;return n?function(t){for(var e=[],n=0;n<t.length;n++)-1===e.indexOf(t[n])&&e.push(t[n]);return e}(n):n}function In(t,e,n,r){var i=Object.create(t||null);return e?j(i,e):i}Tn.data=function(t,e,n){return n?_n(t,e,n):e&&"function"!=typeof e?t:_n(t,e)},F.forEach((function(t){Tn[t]=Cn})),N.forEach((function(t){Tn[t+"s"]=In})),Tn.watch=function(t,e,n,r){if(t===rt&&(t=void 0),e===rt&&(e=void 0),!e)return Object.create(t||null);if(!t)return e;var s={};for(var a in j(s,t),e){var o=s[a],l=e[a];o&&!i(o)&&(o=[o]),s[a]=o?o.concat(l):i(l)?l:[l]}return s},Tn.props=Tn.methods=Tn.inject=Tn.computed=function(t,e,n,r){if(!t)return e;var i=Object.create(null);return j(i,t),e&&j(i,e),i},Tn.provide=function(t,e){return t?function(){var n=Object.create(null);return Sn(n,c(t)?t.call(this):t),e&&Sn(n,c(e)?e.call(this):e,!1),n}:e};var qn=function(t,e){return void 0===e?t:e};function Pn(t,e,n){if(c(e)&&(e=e.options),function(t,e){var n=t.props;if(n){var r,s,a={};if(i(n))for(r=n.length;r--;)"string"==typeof(s=n[r])&&(a[_(s)]={type:null});else if(d(n))for(var o in n)s=n[o],a[_(o)]=d(s)?s:{type:s};else 0;t.props=a}}(e),function(t,e){var n=t.inject;if(n){var r=t.inject={};if(i(n))for(var s=0;s<n.length;s++)r[n[s]]={from:n[s]};else if(d(n))for(var a in n){var o=n[a];r[a]=d(o)?j({from:a},o):{from:o}}else 0}}(e),function(t){var e=t.directives;if(e)for(var n in e){var r=e[n];c(r)&&(e[n]={bind:r,update:r})}}(e),!e._base&&(e.extends&&(t=Pn(t,e.extends,n)),e.mixins))for(var r=0,s=e.mixins.length;r<s;r++)t=Pn(t,e.mixins[r],n);var a,o={};for(a in t)l(a);for(a in e)E(t,a)||l(a);function l(r){var i=Tn[r]||qn;o[r]=i(t[r],e[r],n,r)}return o}function An(t,e,n,r){if("string"==typeof n){var i=t[e];if(E(i,n))return i[n];var s=_(n);if(E(i,s))return i[s];var a=C(s);return E(i,a)?i[a]:i[n]||i[s]||i[a]}}function jn(t,e,n,r){var i=e[t],s=!E(n,t),a=n[t],o=Dn(Boolean,i.type);if(o>-1)if(s&&!E(i,"default"))a=!1;else if(""===a||a===q(t)){var l=Dn(String,i.type);(l<0||o<l)&&(a=!0)}if(void 0===a){a=function(t,e,n){if(!E(e,"default"))return;var r=e.default;0;if(t&&t.$options.propsData&&void 0===t.$options.propsData[n]&&void 0!==t._props[n])return t._props[n];return c(r)&&"Function"!==zn(e.type)?r.call(t):r}(r,i,t);var p=Ct;It(!0),At(a),It(p)}return a}var On=/^\s*function (\w+)/;function zn(t){var e=t&&t.toString().match(On);return e?e[1]:""}function Mn(t,e){return zn(t)===zn(e)}function Dn(t,e){if(!i(e))return Mn(e,t)?0:-1;for(var n=0,r=e.length;n<r;n++)if(Mn(e[n],t))return n;return-1}var Rn={enumerable:!0,configurable:!0,get:z,set:z};function Bn(t,e,n){Rn.get=function(){return this[e][n]},Rn.set=function(t){this[e][n]=t},Object.defineProperty(t,n,Rn)}function Ln(t){var e=t.$options;if(e.props&&function(t,e){var n=t.$options.propsData||{},r=t._props=Dt({}),i=t.$options._propKeys=[];t.$parent&&It(!1);var s=function(s){i.push(s);var a=jn(s,e,n,t);jt(r,s,a,void 0,!0),s in t||Bn(t,"_props",s)};for(var a in e)s(a);It(!0)}(t,e.props),function(t){var e=t.$options,n=e.setup;if(n){var r=t._setupContext=be(t);dt(t),kt();var i=Ce(n,null,[t._props||Dt({}),r],t,"setup");if(wt(),dt(),c(i))e.render=i;else if(p(i))if(t._setupState=i,i.__sfc){var s=t._setupProxy={};for(var a in i)"__sfc"!==a&&Ut(s,i,a)}else for(var a in i)V(a)||Ut(t,i,a);else 0}}(t),e.methods&&function(t,e){t.$options.props;for(var n in e)t[n]="function"!=typeof e[n]?z:P(e[n],t)}(t,e.methods),e.data)!function(t){var e=t.$options.data;d(e=t._data=c(e)?function(t,e){kt();try{return t.call(e,e)}catch(t){return _e(t,e,"data()"),{}}finally{wt()}}(e,t):e||{})||(e={});var n=Object.keys(e),r=t.$options.props,i=(t.$options.methods,n.length);for(;i--;){var s=n[i];0,r&&E(r,s)||V(s)||Bn(t,"_data",s)}var a=At(e);a&&a.vmCount++}(t);else{var n=At(t._data={});n&&n.vmCount++}e.computed&&function(t,e){var n=t._computedWatchers=Object.create(null),r=at();for(var i in e){var s=e[i],a=c(s)?s:s.get;0,r||(n[i]=new Ve(t,a||z,z,Un)),i in t||Nn(t,i,s)}}(t,e.computed),e.watch&&e.watch!==rt&&function(t,e){for(var n in e){var r=e[n];if(i(r))for(var s=0;s<r.length;s++)$n(t,n,r[s]);else $n(t,n,r)}}(t,e.watch)}var Un={lazy:!0};function Nn(t,e,n){var r=!at();c(n)?(Rn.get=r?Fn(e):Hn(n),Rn.set=z):(Rn.get=n.get?r&&!1!==n.cache?Fn(e):Hn(n.get):z,Rn.set=n.set||z),Object.defineProperty(t,e,Rn)}function Fn(t){return function(){var e=this._computedWatchers&&this._computedWatchers[t];if(e)return e.dirty&&e.evaluate(),yt.target&&e.depend(),e.value}}function Hn(t){return function(){return t.call(this,this)}}function $n(t,e,n,r){return d(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=t[n]),t.$watch(e,n,r)}var Vn=0;function Gn(t){var e=t.options;if(t.super){var n=Gn(t.super);if(n!==t.superOptions){t.superOptions=n;var r=function(t){var e,n=t.options,r=t.sealedOptions;for(var i in n)n[i]!==r[i]&&(e||(e={}),e[i]=n[i]);return e}(t);r&&j(t.extendOptions,r),(e=t.options=Pn(n,t.extendOptions)).name&&(e.components[e.name]=t)}}return e}function Wn(t){this._init(t)}function Kn(t){t.cid=0;var e=1;t.extend=function(t){t=t||{};var n=this,r=n.cid,i=t._Ctor||(t._Ctor={});if(i[r])return i[r];var s=bn(t)||bn(n.options);var a=function(t){this._init(t)};return(a.prototype=Object.create(n.prototype)).constructor=a,a.cid=e++,a.options=Pn(n.options,t),a.super=n,a.options.props&&function(t){var e=t.options.props;for(var n in e)Bn(t.prototype,"_props",n)}(a),a.options.computed&&function(t){var e=t.options.computed;for(var n in e)Nn(t.prototype,n,e[n])}(a),a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,N.forEach((function(t){a[t]=n[t]})),s&&(a.options.components[s]=a),a.superOptions=n.options,a.extendOptions=t,a.sealedOptions=j({},a.options),i[r]=a,a}}function Qn(t){return t&&(bn(t.Ctor.options)||t.tag)}function Yn(t,e){return i(t)?t.indexOf(e)>-1:"string"==typeof t?t.split(",").indexOf(e)>-1:!!m(t)&&t.test(e)}function Xn(t,e){var n=t.cache,r=t.keys,i=t._vnode,s=t.$vnode;for(var a in n){var o=n[a];if(o){var l=o.name;l&&!e(l)&&Zn(n,a,r,i)}}s.componentOptions.children=void 0}function Zn(t,e,n,r){var i=t[e];!i||r&&i.tag===r.tag||i.componentInstance.$destroy(),t[e]=null,k(n,e)}!function(t){t.prototype._init=function(t){var e=this;e._uid=Vn++,e._isVue=!0,e.__v_skip=!0,e._scope=new Ft(!0),e._scope.parent=void 0,e._scope._vm=!0,t&&t._isComponent?function(t,e){var n=t.$options=Object.create(t.constructor.options),r=e._parentVnode;n.parent=e.parent,n._parentVnode=r;var i=r.componentOptions;n.propsData=i.propsData,n._parentListeners=i.listeners,n._renderChildren=i.children,n._componentTag=i.tag,e.render&&(n.render=e.render,n.staticRenderFns=e.staticRenderFns)}(e,t):e.$options=Pn(Gn(e.constructor),t||{},e),e._renderProxy=e,e._self=e,function(t){var e=t.$options,n=e.parent;if(n&&!e.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(t)}t.$parent=n,t.$root=n?n.$root:t,t.$children=[],t.$refs={},t._provided=n?n._provided:Object.create(null),t._watcher=null,t._inactive=null,t._directInactive=!1,t._isMounted=!1,t._isDestroyed=!1,t._isBeingDestroyed=!1}(e),function(t){t._events=Object.create(null),t._hasHookEvent=!1;var e=t.$options._parentListeners;e&&Qe(t,e)}(e),function(t){t._vnode=null,t._staticTrees=null;var e=t.$options,n=t.$vnode=e._parentVnode,i=n&&n.context;t.$slots=de(e._renderChildren,i),t.$scopedSlots=n?he(t.$parent,n.data.scopedSlots,t.$slots):r,t._c=function(e,n,r,i){return Se(t,e,n,r,i,!1)},t.$createElement=function(e,n,r,i){return Se(t,e,n,r,i,!0)};var s=n&&n.data;jt(t,"$attrs",s&&s.attrs||r,null,!0),jt(t,"$listeners",e._parentListeners||r,null,!0)}(e),tn(e,"beforeCreate",void 0,!1),function(t){var e=gn(t.$options.inject,t);e&&(It(!1),Object.keys(e).forEach((function(n){jt(t,n,e[n])})),It(!0))}(e),Ln(e),function(t){var e=t.$options.provide;if(e){var n=c(e)?e.call(t):e;if(!p(n))return;for(var r=Ht(t),i=pt?Reflect.ownKeys(n):Object.keys(n),s=0;s<i.length;s++){var a=i[s];Object.defineProperty(r,a,Object.getOwnPropertyDescriptor(n,a))}}}(e),tn(e,"created"),e.$options.el&&e.$mount(e.$options.el)}}(Wn),function(t){var e={get:function(){return this._data}},n={get:function(){return this._props}};Object.defineProperty(t.prototype,"$data",e),Object.defineProperty(t.prototype,"$props",n),t.prototype.$set=Ot,t.prototype.$delete=zt,t.prototype.$watch=function(t,e,n){if(d(e))return $n(this,t,e,n);(n=n||{}).user=!0;var r=new Ve(this,t,e,n);if(n.immediate){var i='callback for immediate watcher "'.concat(r.expression,'"');kt(),Ce(e,this,[r.value],this,i),wt()}return function(){r.teardown()}}}(Wn),function(t){var e=/^hook:/;t.prototype.$on=function(t,n){var r=this;if(i(t))for(var s=0,a=t.length;s<a;s++)r.$on(t[s],n);else(r._events[t]||(r._events[t]=[])).push(n),e.test(t)&&(r._hasHookEvent=!0);return r},t.prototype.$once=function(t,e){var n=this;function r(){n.$off(t,r),e.apply(n,arguments)}return r.fn=e,n.$on(t,r),n},t.prototype.$off=function(t,e){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(i(t)){for(var r=0,s=t.length;r<s;r++)n.$off(t[r],e);return n}var a,o=n._events[t];if(!o)return n;if(!e)return n._events[t]=null,n;for(var l=o.length;l--;)if((a=o[l])===e||a.fn===e){o.splice(l,1);break}return n},t.prototype.$emit=function(t){var e=this,n=e._events[t];if(n){n=n.length>1?A(n):n;for(var r=A(arguments,1),i='event handler for "'.concat(t,'"'),s=0,a=n.length;s<a;s++)Ce(n[s],e,r,e,i)}return e}}(Wn),function(t){t.prototype._update=function(t,e){var n=this,r=n.$el,i=n._vnode,s=Xe(n);n._vnode=t,n.$el=i?n.__patch__(i,t):n.__patch__(n.$el,t,e,!1),s(),r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n);for(var a=n;a&&a.$vnode&&a.$parent&&a.$vnode===a.$parent._vnode;)a.$parent.$el=a.$el,a=a.$parent},t.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},t.prototype.$destroy=function(){var t=this;if(!t._isBeingDestroyed){tn(t,"beforeDestroy"),t._isBeingDestroyed=!0;var e=t.$parent;!e||e._isBeingDestroyed||t.$options.abstract||k(e.$children,t),t._scope.stop(),t._data.__ob__&&t._data.__ob__.vmCount--,t._isDestroyed=!0,t.__patch__(t._vnode,null),tn(t,"destroyed"),t.$off(),t.$el&&(t.$el.__vue__=null),t.$vnode&&(t.$vnode.parent=null)}}}(Wn),function(t){ue(t.prototype),t.prototype.$nextTick=function(t){return Le(t,this)},t.prototype._render=function(){var t=this,e=t.$options,n=e.render,r=e._parentVnode;r&&t._isMounted&&(t.$scopedSlots=he(t.$parent,r.data.scopedSlots,t.$slots,t.$scopedSlots),t._slotsProxy&&ke(t._slotsProxy,t.$scopedSlots)),t.$vnode=r;var s,a=ut,o=we;try{dt(t),we=t,s=n.call(t._renderProxy,t.$createElement)}catch(e){_e(e,t,"render"),s=t._vnode}finally{we=o,dt(a)}return i(s)&&1===s.length&&(s=s[0]),s instanceof mt||(s=gt()),s.parent=r,s}}(Wn);var Jn=[String,RegExp,Array],tr={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Jn,exclude:Jn,max:[String,Number]},methods:{cacheVNode:function(){var t=this.cache,e=this.keys,n=this.vnodeToCache,r=this.keyToCache;if(n){var i=n.tag,s=n.componentInstance,a=n.componentOptions;t[r]={name:Qn(a),tag:i,componentInstance:s},e.push(r),this.max&&e.length>parseInt(this.max)&&Zn(t,e[0],e,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var t in this.cache)Zn(this.cache,t,this.keys)},mounted:function(){var t=this;this.cacheVNode(),this.$watch("include",(function(e){Xn(t,(function(t){return Yn(e,t)}))})),this.$watch("exclude",(function(e){Xn(t,(function(t){return!Yn(e,t)}))}))},updated:function(){this.cacheVNode()},render:function(){var t=this.$slots.default,e=Te(t),n=e&&e.componentOptions;if(n){var r=Qn(n),i=this.include,s=this.exclude;if(i&&(!r||!Yn(i,r))||s&&r&&Yn(s,r))return e;var a=this.cache,o=this.keys,l=null==e.key?n.Ctor.cid+(n.tag?"::".concat(n.tag):""):e.key;a[l]?(e.componentInstance=a[l].componentInstance,k(o,l),o.push(l)):(this.vnodeToCache=e,this.keyToCache=l),e.data.keepAlive=!0}return e||t&&t[0]}}};!function(t){var e={get:function(){return H}};Object.defineProperty(t,"config",e),t.util={warn:En,extend:j,mergeOptions:Pn,defineReactive:jt},t.set=Ot,t.delete=zt,t.nextTick=Le,t.observable=function(t){return At(t),t},t.options=Object.create(null),N.forEach((function(e){t.options[e+"s"]=Object.create(null)})),t.options._base=t,j(t.options.components,tr),function(t){t.use=function(t){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(t)>-1)return this;var n=A(arguments,1);return n.unshift(this),c(t.install)?t.install.apply(t,n):c(t)&&t.apply(null,n),e.push(t),this}}(t),function(t){t.mixin=function(t){return this.options=Pn(this.options,t),this}}(t),Kn(t),function(t){N.forEach((function(e){t[e]=function(t,n){return n?("component"===e&&d(n)&&(n.name=n.name||t,n=this.options._base.extend(n)),"directive"===e&&c(n)&&(n={bind:n,update:n}),this.options[e+"s"][t]=n,n):this.options[e+"s"][t]}}))}(t)}(Wn),Object.defineProperty(Wn.prototype,"$isServer",{get:at}),Object.defineProperty(Wn.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Wn,"FunctionalRenderContext",{value:hn}),Wn.version="2.7.16";var er=y("style,class"),nr=y("input,textarea,option,select,progress"),rr=y("contenteditable,draggable,spellcheck"),ir=y("events,caret,typing,plaintext-only"),sr=y("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),ar="http://www.w3.org/1999/xlink",or=function(t){return":"===t.charAt(5)&&"xlink"===t.slice(0,5)},lr=function(t){return or(t)?t.slice(6,t.length):""},cr=function(t){return null==t||!1===t};function pr(t){for(var e=t.data,n=t,r=t;a(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=ur(r.data,e));for(;a(n=n.parent);)n&&n.data&&(e=ur(e,n.data));return function(t,e){if(a(t)||a(e))return dr(t,mr(e));return""}(e.staticClass,e.class)}function ur(t,e){return{staticClass:dr(t.staticClass,e.staticClass),class:a(t.class)?[t.class,e.class]:e.class}}function dr(t,e){return t?e?t+" "+e:t:e||""}function mr(t){return Array.isArray(t)?function(t){for(var e,n="",r=0,i=t.length;r<i;r++)a(e=mr(t[r]))&&""!==e&&(n&&(n+=" "),n+=e);return n}(t):p(t)?function(t){var e="";for(var n in t)t[n]&&(e&&(e+=" "),e+=n);return e}(t):"string"==typeof t?t:""}var gr={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},hr=y("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),fr=y("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),vr=function(t){return hr(t)||fr(t)};var br=Object.create(null);var yr=y("text,number,password,search,email,tel,url");var xr=Object.freeze({__proto__:null,createElement:function(t,e){var n=document.createElement(t);return"select"!==t||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n},createElementNS:function(t,e){return document.createElementNS(gr[t],e)},createTextNode:function(t){return document.createTextNode(t)},createComment:function(t){return document.createComment(t)},insertBefore:function(t,e,n){t.insertBefore(e,n)},removeChild:function(t,e){t.removeChild(e)},appendChild:function(t,e){t.appendChild(e)},parentNode:function(t){return t.parentNode},nextSibling:function(t){return t.nextSibling},tagName:function(t){return t.tagName},setTextContent:function(t,e){t.textContent=e},setStyleScope:function(t,e){t.setAttribute(e,"")}}),kr={create:function(t,e){wr(e)},update:function(t,e){t.data.ref!==e.data.ref&&(wr(t,!0),wr(e))},destroy:function(t){wr(t,!0)}};function wr(t,e){var n=t.data.ref;if(a(n)){var r=t.context,s=t.componentInstance||t.elm,o=e?null:s,l=e?void 0:s;if(c(n))Ce(n,r,[o],r,"template ref function");else{var p=t.data.refInFor,u="string"==typeof n||"number"==typeof n,d=Lt(n),m=r.$refs;if(u||d)if(p){var g=u?m[n]:n.value;e?i(g)&&k(g,s):i(g)?g.includes(s)||g.push(s):u?(m[n]=[s],Er(r,n,m[n])):n.value=[s]}else if(u){if(e&&m[n]!==s)return;m[n]=l,Er(r,n,o)}else if(d){if(e&&n.value!==s)return;n.value=o}else 0}}}function Er(t,e,n){var r=t._setupState;r&&E(r,e)&&(Lt(r[e])?r[e].value=n:r[e]=n)}var Tr=new mt("",{},[]),Sr=["create","activate","update","remove","destroy"];function _r(t,e){return t.key===e.key&&t.asyncFactory===e.asyncFactory&&(t.tag===e.tag&&t.isComment===e.isComment&&a(t.data)===a(e.data)&&function(t,e){if("input"!==t.tag)return!0;var n,r=a(n=t.data)&&a(n=n.attrs)&&n.type,i=a(n=e.data)&&a(n=n.attrs)&&n.type;return r===i||yr(r)&&yr(i)}(t,e)||o(t.isAsyncPlaceholder)&&s(e.asyncFactory.error))}function Cr(t,e,n){var r,i,s={};for(r=e;r<=n;++r)a(i=t[r].key)&&(s[i]=r);return s}var Ir={create:qr,update:qr,destroy:function(t){qr(t,Tr)}};function qr(t,e){(t.data.directives||e.data.directives)&&function(t,e){var n,r,i,s=t===Tr,a=e===Tr,o=Ar(t.data.directives,t.context),l=Ar(e.data.directives,e.context),c=[],p=[];for(n in l)r=o[n],i=l[n],r?(i.oldValue=r.value,i.oldArg=r.arg,Or(i,"update",e,t),i.def&&i.def.componentUpdated&&p.push(i)):(Or(i,"bind",e,t),i.def&&i.def.inserted&&c.push(i));if(c.length){var u=function(){for(var n=0;n<c.length;n++)Or(c[n],"inserted",e,t)};s?Wt(e,"insert",u):u()}p.length&&Wt(e,"postpatch",(function(){for(var n=0;n<p.length;n++)Or(p[n],"componentUpdated",e,t)}));if(!s)for(n in o)l[n]||Or(o[n],"unbind",t,t,a)}(t,e)}var Pr=Object.create(null);function Ar(t,e){var n,r,i=Object.create(null);if(!t)return i;for(n=0;n<t.length;n++){if((r=t[n]).modifiers||(r.modifiers=Pr),i[jr(r)]=r,e._setupState&&e._setupState.__sfc){var s=r.def||An(e,"_setupState","v-"+r.name);r.def="function"==typeof s?{bind:s,update:s}:s}r.def=r.def||An(e.$options,"directives",r.name)}return i}function jr(t){return t.rawName||"".concat(t.name,".").concat(Object.keys(t.modifiers||{}).join("."))}function Or(t,e,n,r,i){var s=t.def&&t.def[e];if(s)try{s(n.elm,t,n,r,i)}catch(r){_e(r,n.context,"directive ".concat(t.name," ").concat(e," hook"))}}var zr=[kr,Ir];function Mr(t,e){var n=e.componentOptions;if(!(a(n)&&!1===n.Ctor.options.inheritAttrs||s(t.data.attrs)&&s(e.data.attrs))){var r,i,l=e.elm,c=t.data.attrs||{},p=e.data.attrs||{};for(r in(a(p.__ob__)||o(p._v_attr_proxy))&&(p=e.data.attrs=j({},p)),p)i=p[r],c[r]!==i&&Dr(l,r,i,e.data.pre);for(r in(X||J)&&p.value!==c.value&&Dr(l,"value",p.value),c)s(p[r])&&(or(r)?l.removeAttributeNS(ar,lr(r)):rr(r)||l.removeAttribute(r))}}function Dr(t,e,n,r){r||t.tagName.indexOf("-")>-1?Rr(t,e,n):sr(e)?cr(n)?t.removeAttribute(e):(n="allowfullscreen"===e&&"EMBED"===t.tagName?"true":e,t.setAttribute(e,n)):rr(e)?t.setAttribute(e,function(t,e){return cr(e)||"false"===e?"false":"contenteditable"===t&&ir(e)?e:"true"}(e,n)):or(e)?cr(n)?t.removeAttributeNS(ar,lr(e)):t.setAttributeNS(ar,e,n):Rr(t,e,n)}function Rr(t,e,n){if(cr(n))t.removeAttribute(e);else{if(X&&!Z&&"TEXTAREA"===t.tagName&&"placeholder"===e&&""!==n&&!t.__ieph){var r=function(e){e.stopImmediatePropagation(),t.removeEventListener("input",r)};t.addEventListener("input",r),t.__ieph=!0}t.setAttribute(e,n)}}var Br={create:Mr,update:Mr};function Lr(t,e){var n=e.elm,r=e.data,i=t.data;if(!(s(r.staticClass)&&s(r.class)&&(s(i)||s(i.staticClass)&&s(i.class)))){var o=pr(e),l=n._transitionClasses;a(l)&&(o=dr(o,mr(l))),o!==n._prevClass&&(n.setAttribute("class",o),n._prevClass=o)}}var Ur,Nr={create:Lr,update:Lr};function Fr(t,e,n){var r=Ur;return function i(){var s=e.apply(null,arguments);null!==s&&Vr(t,i,n,r)}}var Hr=Ae&&!(nt&&Number(nt[1])<=53);function $r(t,e,n,r){if(Hr){var i=ln,s=e;e=s._wrapper=function(t){if(t.target===t.currentTarget||t.timeStamp>=i||t.timeStamp<=0||t.target.ownerDocument!==document)return s.apply(this,arguments)}}Ur.addEventListener(t,e,it?{capture:n,passive:r}:n)}function Vr(t,e,n,r){(r||Ur).removeEventListener(t,e._wrapper||e,n)}function Gr(t,e){if(!s(t.data.on)||!s(e.data.on)){var n=e.data.on||{},r=t.data.on||{};Ur=e.elm||t.elm,function(t){if(a(t.__r)){var e=X?"change":"input";t[e]=[].concat(t.__r,t[e]||[]),delete t.__r}a(t.__c)&&(t.change=[].concat(t.__c,t.change||[]),delete t.__c)}(n),Gt(n,r,$r,Vr,Fr,e.context),Ur=void 0}}var Wr,Kr={create:Gr,update:Gr,destroy:function(t){return Gr(t,Tr)}};function Qr(t,e){if(!s(t.data.domProps)||!s(e.data.domProps)){var n,r,i=e.elm,l=t.data.domProps||{},c=e.data.domProps||{};for(n in(a(c.__ob__)||o(c._v_attr_proxy))&&(c=e.data.domProps=j({},c)),l)n in c||(i[n]="");for(n in c){if(r=c[n],"textContent"===n||"innerHTML"===n){if(e.children&&(e.children.length=0),r===l[n])continue;1===i.childNodes.length&&i.removeChild(i.childNodes[0])}if("value"===n&&"PROGRESS"!==i.tagName){i._value=r;var p=s(r)?"":String(r);Yr(i,p)&&(i.value=p)}else if("innerHTML"===n&&fr(i.tagName)&&s(i.innerHTML)){(Wr=Wr||document.createElement("div")).innerHTML="<svg>".concat(r,"</svg>");for(var u=Wr.firstChild;i.firstChild;)i.removeChild(i.firstChild);for(;u.firstChild;)i.appendChild(u.firstChild)}else if(r!==l[n])try{i[n]=r}catch(t){}}}}function Yr(t,e){return!t.composing&&("OPTION"===t.tagName||function(t,e){var n=!0;try{n=document.activeElement!==t}catch(t){}return n&&t.value!==e}(t,e)||function(t,e){var n=t.value,r=t._vModifiers;if(a(r)){if(r.number)return b(n)!==b(e);if(r.trim)return n.trim()!==e.trim()}return n!==e}(t,e))}var Xr={create:Qr,update:Qr},Zr=T((function(t){var e={},n=/:(.+)/;return t.split(/;(?![^(]*\))/g).forEach((function(t){if(t){var r=t.split(n);r.length>1&&(e[r[0].trim()]=r[1].trim())}})),e}));function Jr(t){var e=ti(t.style);return t.staticStyle?j(t.staticStyle,e):e}function ti(t){return Array.isArray(t)?O(t):"string"==typeof t?Zr(t):t}var ei,ni=/^--/,ri=/\s*!important$/,ii=function(t,e,n){if(ni.test(e))t.style.setProperty(e,n);else if(ri.test(n))t.style.setProperty(q(e),n.replace(ri,""),"important");else{var r=ai(e);if(Array.isArray(n))for(var i=0,s=n.length;i<s;i++)t.style[r]=n[i];else t.style[r]=n}},si=["Webkit","Moz","ms"],ai=T((function(t){if(ei=ei||document.createElement("div").style,"filter"!==(t=_(t))&&t in ei)return t;for(var e=t.charAt(0).toUpperCase()+t.slice(1),n=0;n<si.length;n++){var r=si[n]+e;if(r in ei)return r}}));function oi(t,e){var n=e.data,r=t.data;if(!(s(n.staticStyle)&&s(n.style)&&s(r.staticStyle)&&s(r.style))){var i,o,l=e.elm,c=r.staticStyle,p=r.normalizedStyle||r.style||{},u=c||p,d=ti(e.data.style)||{};e.data.normalizedStyle=a(d.__ob__)?j({},d):d;var m=function(t,e){var n,r={};if(e)for(var i=t;i.componentInstance;)(i=i.componentInstance._vnode)&&i.data&&(n=Jr(i.data))&&j(r,n);(n=Jr(t.data))&&j(r,n);for(var s=t;s=s.parent;)s.data&&(n=Jr(s.data))&&j(r,n);return r}(e,!0);for(o in u)s(m[o])&&ii(l,o,"");for(o in m)i=m[o],ii(l,o,null==i?"":i)}}var li={create:oi,update:oi},ci=/\s+/;function pi(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(ci).forEach((function(e){return t.classList.add(e)})):t.classList.add(e);else{var n=" ".concat(t.getAttribute("class")||""," ");n.indexOf(" "+e+" ")<0&&t.setAttribute("class",(n+e).trim())}}function ui(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(ci).forEach((function(e){return t.classList.remove(e)})):t.classList.remove(e),t.classList.length||t.removeAttribute("class");else{for(var n=" ".concat(t.getAttribute("class")||""," "),r=" "+e+" ";n.indexOf(r)>=0;)n=n.replace(r," ");(n=n.trim())?t.setAttribute("class",n):t.removeAttribute("class")}}function di(t){if(t){if("object"==typeof t){var e={};return!1!==t.css&&j(e,mi(t.name||"v")),j(e,t),e}return"string"==typeof t?mi(t):void 0}}var mi=T((function(t){return{enterClass:"".concat(t,"-enter"),enterToClass:"".concat(t,"-enter-to"),enterActiveClass:"".concat(t,"-enter-active"),leaveClass:"".concat(t,"-leave"),leaveToClass:"".concat(t,"-leave-to"),leaveActiveClass:"".concat(t,"-leave-active")}})),gi=Q&&!Z,hi="transition",fi="transitionend",vi="animation",bi="animationend";gi&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(hi="WebkitTransition",fi="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(vi="WebkitAnimation",bi="webkitAnimationEnd"));var yi=Q?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(t){return t()};function xi(t){yi((function(){yi(t)}))}function ki(t,e){var n=t._transitionClasses||(t._transitionClasses=[]);n.indexOf(e)<0&&(n.push(e),pi(t,e))}function wi(t,e){t._transitionClasses&&k(t._transitionClasses,e),ui(t,e)}function Ei(t,e,n){var r=Si(t,e),i=r.type,s=r.timeout,a=r.propCount;if(!i)return n();var o="transition"===i?fi:bi,l=0,c=function(){t.removeEventListener(o,p),n()},p=function(e){e.target===t&&++l>=a&&c()};setTimeout((function(){l<a&&c()}),s+1),t.addEventListener(o,p)}var Ti=/\b(transform|all)(,|$)/;function Si(t,e){var n,r=window.getComputedStyle(t),i=(r[hi+"Delay"]||"").split(", "),s=(r[hi+"Duration"]||"").split(", "),a=_i(i,s),o=(r[vi+"Delay"]||"").split(", "),l=(r[vi+"Duration"]||"").split(", "),c=_i(o,l),p=0,u=0;return"transition"===e?a>0&&(n="transition",p=a,u=s.length):"animation"===e?c>0&&(n="animation",p=c,u=l.length):u=(n=(p=Math.max(a,c))>0?a>c?"transition":"animation":null)?"transition"===n?s.length:l.length:0,{type:n,timeout:p,propCount:u,hasTransform:"transition"===n&&Ti.test(r[hi+"Property"])}}function _i(t,e){for(;t.length<e.length;)t=t.concat(t);return Math.max.apply(null,e.map((function(e,n){return Ci(e)+Ci(t[n])})))}function Ci(t){return 1e3*Number(t.slice(0,-1).replace(",","."))}function Ii(t,e){var n=t.elm;a(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var r=di(t.data.transition);if(!s(r)&&!a(n._enterCb)&&1===n.nodeType){for(var i=r.css,o=r.type,l=r.enterClass,u=r.enterToClass,d=r.enterActiveClass,m=r.appearClass,g=r.appearToClass,h=r.appearActiveClass,f=r.beforeEnter,v=r.enter,y=r.afterEnter,x=r.enterCancelled,k=r.beforeAppear,w=r.appear,E=r.afterAppear,T=r.appearCancelled,S=r.duration,_=Ye,C=Ye.$vnode;C&&C.parent;)_=C.context,C=C.parent;var I=!_._isMounted||!t.isRootInsert;if(!I||w||""===w){var q=I&&m?m:l,P=I&&h?h:d,A=I&&g?g:u,j=I&&k||f,O=I&&c(w)?w:v,z=I&&E||y,M=I&&T||x,D=b(p(S)?S.enter:S);0;var R=!1!==i&&!Z,B=Ai(O),U=n._enterCb=L((function(){R&&(wi(n,A),wi(n,P)),U.cancelled?(R&&wi(n,q),M&&M(n)):z&&z(n),n._enterCb=null}));t.data.show||Wt(t,"insert",(function(){var e=n.parentNode,r=e&&e._pending&&e._pending[t.key];r&&r.tag===t.tag&&r.elm._leaveCb&&r.elm._leaveCb(),O&&O(n,U)})),j&&j(n),R&&(ki(n,q),ki(n,P),xi((function(){wi(n,q),U.cancelled||(ki(n,A),B||(Pi(D)?setTimeout(U,D):Ei(n,o,U)))}))),t.data.show&&(e&&e(),O&&O(n,U)),R||B||U()}}}function qi(t,e){var n=t.elm;a(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var r=di(t.data.transition);if(s(r)||1!==n.nodeType)return e();if(!a(n._leaveCb)){var i=r.css,o=r.type,l=r.leaveClass,c=r.leaveToClass,u=r.leaveActiveClass,d=r.beforeLeave,m=r.leave,g=r.afterLeave,h=r.leaveCancelled,f=r.delayLeave,v=r.duration,y=!1!==i&&!Z,x=Ai(m),k=b(p(v)?v.leave:v);0;var w=n._leaveCb=L((function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[t.key]=null),y&&(wi(n,c),wi(n,u)),w.cancelled?(y&&wi(n,l),h&&h(n)):(e(),g&&g(n)),n._leaveCb=null}));f?f(E):E()}function E(){w.cancelled||(!t.data.show&&n.parentNode&&((n.parentNode._pending||(n.parentNode._pending={}))[t.key]=t),d&&d(n),y&&(ki(n,l),ki(n,u),xi((function(){wi(n,l),w.cancelled||(ki(n,c),x||(Pi(k)?setTimeout(w,k):Ei(n,o,w)))}))),m&&m(n,w),y||x||w())}}function Pi(t){return"number"==typeof t&&!isNaN(t)}function Ai(t){if(s(t))return!1;var e=t.fns;return a(e)?Ai(Array.isArray(e)?e[0]:e):(t._length||t.length)>1}function ji(t,e){!0!==e.data.show&&Ii(e)}var Oi=function(t){var e,n,r={},c=t.modules,p=t.nodeOps;for(e=0;e<Sr.length;++e)for(r[Sr[e]]=[],n=0;n<c.length;++n)a(c[n][Sr[e]])&&r[Sr[e]].push(c[n][Sr[e]]);function u(t){var e=p.parentNode(t);a(e)&&p.removeChild(e,t)}function d(t,e,n,i,s,l,c){if(a(t.elm)&&a(l)&&(t=l[c]=ft(t)),t.isRootInsert=!s,!function(t,e,n,i){var s=t.data;if(a(s)){var l=a(t.componentInstance)&&s.keepAlive;if(a(s=s.hook)&&a(s=s.init)&&s(t,!1),a(t.componentInstance))return m(t,e),g(n,t.elm,i),o(l)&&function(t,e,n,i){var s,o=t;for(;o.componentInstance;)if(o=o.componentInstance._vnode,a(s=o.data)&&a(s=s.transition)){for(s=0;s<r.activate.length;++s)r.activate[s](Tr,o);e.push(o);break}g(n,t.elm,i)}(t,e,n,i),!0}}(t,e,n,i)){var u=t.data,d=t.children,f=t.tag;a(f)?(t.elm=t.ns?p.createElementNS(t.ns,f):p.createElement(f,t),b(t),h(t,d,e),a(u)&&v(t,e),g(n,t.elm,i)):o(t.isComment)?(t.elm=p.createComment(t.text),g(n,t.elm,i)):(t.elm=p.createTextNode(t.text),g(n,t.elm,i))}}function m(t,e){a(t.data.pendingInsert)&&(e.push.apply(e,t.data.pendingInsert),t.data.pendingInsert=null),t.elm=t.componentInstance.$el,f(t)?(v(t,e),b(t)):(wr(t),e.push(t))}function g(t,e,n){a(t)&&(a(n)?p.parentNode(n)===t&&p.insertBefore(t,e,n):p.appendChild(t,e))}function h(t,e,n){if(i(e)){0;for(var r=0;r<e.length;++r)d(e[r],n,t.elm,null,!0,e,r)}else l(t.text)&&p.appendChild(t.elm,p.createTextNode(String(t.text)))}function f(t){for(;t.componentInstance;)t=t.componentInstance._vnode;return a(t.tag)}function v(t,n){for(var i=0;i<r.create.length;++i)r.create[i](Tr,t);a(e=t.data.hook)&&(a(e.create)&&e.create(Tr,t),a(e.insert)&&n.push(t))}function b(t){var e;if(a(e=t.fnScopeId))p.setStyleScope(t.elm,e);else for(var n=t;n;)a(e=n.context)&&a(e=e.$options._scopeId)&&p.setStyleScope(t.elm,e),n=n.parent;a(e=Ye)&&e!==t.context&&e!==t.fnContext&&a(e=e.$options._scopeId)&&p.setStyleScope(t.elm,e)}function x(t,e,n,r,i,s){for(;r<=i;++r)d(n[r],s,t,e,!1,n,r)}function k(t){var e,n,i=t.data;if(a(i))for(a(e=i.hook)&&a(e=e.destroy)&&e(t),e=0;e<r.destroy.length;++e)r.destroy[e](t);if(a(e=t.children))for(n=0;n<t.children.length;++n)k(t.children[n])}function w(t,e,n){for(;e<=n;++e){var r=t[e];a(r)&&(a(r.tag)?(E(r),k(r)):u(r.elm))}}function E(t,e){if(a(e)||a(t.data)){var n,i=r.remove.length+1;for(a(e)?e.listeners+=i:e=function(t,e){function n(){0==--n.listeners&&u(t)}return n.listeners=e,n}(t.elm,i),a(n=t.componentInstance)&&a(n=n._vnode)&&a(n.data)&&E(n,e),n=0;n<r.remove.length;++n)r.remove[n](t,e);a(n=t.data.hook)&&a(n=n.remove)?n(t,e):e()}else u(t.elm)}function T(t,e,n,r){for(var i=n;i<r;i++){var s=e[i];if(a(s)&&_r(t,s))return i}}function S(t,e,n,i,l,c){if(t!==e){a(e.elm)&&a(i)&&(e=i[l]=ft(e));var u=e.elm=t.elm;if(o(t.isAsyncPlaceholder))a(e.asyncFactory.resolved)?I(t.elm,e,n):e.isAsyncPlaceholder=!0;else if(o(e.isStatic)&&o(t.isStatic)&&e.key===t.key&&(o(e.isCloned)||o(e.isOnce)))e.componentInstance=t.componentInstance;else{var m,g=e.data;a(g)&&a(m=g.hook)&&a(m=m.prepatch)&&m(t,e);var h=t.children,v=e.children;if(a(g)&&f(e)){for(m=0;m<r.update.length;++m)r.update[m](t,e);a(m=g.hook)&&a(m=m.update)&&m(t,e)}s(e.text)?a(h)&&a(v)?h!==v&&function(t,e,n,r,i){var o,l,c,u=0,m=0,g=e.length-1,h=e[0],f=e[g],v=n.length-1,b=n[0],y=n[v],k=!i;for(0;u<=g&&m<=v;)s(h)?h=e[++u]:s(f)?f=e[--g]:_r(h,b)?(S(h,b,r,n,m),h=e[++u],b=n[++m]):_r(f,y)?(S(f,y,r,n,v),f=e[--g],y=n[--v]):_r(h,y)?(S(h,y,r,n,v),k&&p.insertBefore(t,h.elm,p.nextSibling(f.elm)),h=e[++u],y=n[--v]):_r(f,b)?(S(f,b,r,n,m),k&&p.insertBefore(t,f.elm,h.elm),f=e[--g],b=n[++m]):(s(o)&&(o=Cr(e,u,g)),s(l=a(b.key)?o[b.key]:T(b,e,u,g))?d(b,r,t,h.elm,!1,n,m):_r(c=e[l],b)?(S(c,b,r,n,m),e[l]=void 0,k&&p.insertBefore(t,c.elm,h.elm)):d(b,r,t,h.elm,!1,n,m),b=n[++m]);u>g?x(t,s(n[v+1])?null:n[v+1].elm,n,m,v,r):m>v&&w(e,u,g)}(u,h,v,n,c):a(v)?(a(t.text)&&p.setTextContent(u,""),x(u,null,v,0,v.length-1,n)):a(h)?w(h,0,h.length-1):a(t.text)&&p.setTextContent(u,""):t.text!==e.text&&p.setTextContent(u,e.text),a(g)&&a(m=g.hook)&&a(m=m.postpatch)&&m(t,e)}}}function _(t,e,n){if(o(n)&&a(t.parent))t.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var C=y("attrs,class,staticClass,staticStyle,key");function I(t,e,n,r){var i,s=e.tag,l=e.data,c=e.children;if(r=r||l&&l.pre,e.elm=t,o(e.isComment)&&a(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(a(l)&&(a(i=l.hook)&&a(i=i.init)&&i(e,!0),a(i=e.componentInstance)))return m(e,n),!0;if(a(s)){if(a(c))if(t.hasChildNodes())if(a(i=l)&&a(i=i.domProps)&&a(i=i.innerHTML)){if(i!==t.innerHTML)return!1}else{for(var p=!0,u=t.firstChild,d=0;d<c.length;d++){if(!u||!I(u,c[d],n,r)){p=!1;break}u=u.nextSibling}if(!p||u)return!1}else h(e,c,n);if(a(l)){var g=!1;for(var f in l)if(!C(f)){g=!0,v(e,n);break}!g&&l.class&&Fe(l.class)}}else t.data!==e.text&&(t.data=e.text);return!0}return function(t,e,n,i){if(!s(e)){var l,c=!1,u=[];if(s(t))c=!0,d(e,u);else{var m=a(t.nodeType);if(!m&&_r(t,e))S(t,e,u,null,null,i);else{if(m){if(1===t.nodeType&&t.hasAttribute("data-server-rendered")&&(t.removeAttribute("data-server-rendered"),n=!0),o(n)&&I(t,e,u))return _(e,u,!0),t;l=t,t=new mt(p.tagName(l).toLowerCase(),{},[],void 0,l)}var g=t.elm,h=p.parentNode(g);if(d(e,u,g._leaveCb?null:h,p.nextSibling(g)),a(e.parent))for(var v=e.parent,b=f(e);v;){for(var y=0;y<r.destroy.length;++y)r.destroy[y](v);if(v.elm=e.elm,b){for(var x=0;x<r.create.length;++x)r.create[x](Tr,v);var E=v.data.hook.insert;if(E.merged)for(var T=E.fns.slice(1),C=0;C<T.length;C++)T[C]()}else wr(v);v=v.parent}a(h)?w([t],0,0):a(t.tag)&&k(t)}}return _(e,u,c),e.elm}a(t)&&k(t)}}({nodeOps:xr,modules:[Br,Nr,Kr,Xr,li,Q?{create:ji,activate:ji,remove:function(t,e){!0!==t.data.show?qi(t,e):e()}}:{}].concat(zr)});Z&&document.addEventListener("selectionchange",(function(){var t=document.activeElement;t&&t.vmodel&&Ni(t,"input")}));var zi={inserted:function(t,e,n,r){"select"===n.tag?(r.elm&&!r.elm._vOptions?Wt(n,"postpatch",(function(){zi.componentUpdated(t,e,n)})):Mi(t,e,n.context),t._vOptions=[].map.call(t.options,Bi)):("textarea"===n.tag||yr(t.type))&&(t._vModifiers=e.modifiers,e.modifiers.lazy||(t.addEventListener("compositionstart",Li),t.addEventListener("compositionend",Ui),t.addEventListener("change",Ui),Z&&(t.vmodel=!0)))},componentUpdated:function(t,e,n){if("select"===n.tag){Mi(t,e,n.context);var r=t._vOptions,i=t._vOptions=[].map.call(t.options,Bi);if(i.some((function(t,e){return!R(t,r[e])})))(t.multiple?e.value.some((function(t){return Ri(t,i)})):e.value!==e.oldValue&&Ri(e.value,i))&&Ni(t,"change")}}};function Mi(t,e,n){Di(t,e,n),(X||J)&&setTimeout((function(){Di(t,e,n)}),0)}function Di(t,e,n){var r=e.value,i=t.multiple;if(!i||Array.isArray(r)){for(var s,a,o=0,l=t.options.length;o<l;o++)if(a=t.options[o],i)s=B(r,Bi(a))>-1,a.selected!==s&&(a.selected=s);else if(R(Bi(a),r))return void(t.selectedIndex!==o&&(t.selectedIndex=o));i||(t.selectedIndex=-1)}}function Ri(t,e){return e.every((function(e){return!R(e,t)}))}function Bi(t){return"_value"in t?t._value:t.value}function Li(t){t.target.composing=!0}function Ui(t){t.target.composing&&(t.target.composing=!1,Ni(t.target,"input"))}function Ni(t,e){var n=document.createEvent("HTMLEvents");n.initEvent(e,!0,!0),t.dispatchEvent(n)}function Fi(t){return!t.componentInstance||t.data&&t.data.transition?t:Fi(t.componentInstance._vnode)}var Hi={model:zi,show:{bind:function(t,e,n){var r=e.value,i=(n=Fi(n)).data&&n.data.transition,s=t.__vOriginalDisplay="none"===t.style.display?"":t.style.display;r&&i?(n.data.show=!0,Ii(n,(function(){t.style.display=s}))):t.style.display=r?s:"none"},update:function(t,e,n){var r=e.value;!r!=!e.oldValue&&((n=Fi(n)).data&&n.data.transition?(n.data.show=!0,r?Ii(n,(function(){t.style.display=t.__vOriginalDisplay})):qi(n,(function(){t.style.display="none"}))):t.style.display=r?t.__vOriginalDisplay:"none")},unbind:function(t,e,n,r,i){i||(t.style.display=t.__vOriginalDisplay)}}},$i={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function Vi(t){var e=t&&t.componentOptions;return e&&e.Ctor.options.abstract?Vi(Te(e.children)):t}function Gi(t){var e={},n=t.$options;for(var r in n.propsData)e[r]=t[r];var i=n._parentListeners;for(var r in i)e[_(r)]=i[r];return e}function Wi(t,e){if(/\d-keep-alive$/.test(e.tag))return t("keep-alive",{props:e.componentOptions.propsData})}var Ki=function(t){return t.tag||ge(t)},Qi=function(t){return"show"===t.name},Yi={name:"transition",props:$i,abstract:!0,render:function(t){var e=this,n=this.$slots.default;if(n&&(n=n.filter(Ki)).length){0;var r=this.mode;0;var i=n[0];if(function(t){for(;t=t.parent;)if(t.data.transition)return!0}(this.$vnode))return i;var s=Vi(i);if(!s)return i;if(this._leaving)return Wi(t,i);var a="__transition-".concat(this._uid,"-");s.key=null==s.key?s.isComment?a+"comment":a+s.tag:l(s.key)?0===String(s.key).indexOf(a)?s.key:a+s.key:s.key;var o=(s.data||(s.data={})).transition=Gi(this),c=this._vnode,p=Vi(c);if(s.data.directives&&s.data.directives.some(Qi)&&(s.data.show=!0),p&&p.data&&!function(t,e){return e.key===t.key&&e.tag===t.tag}(s,p)&&!ge(p)&&(!p.componentInstance||!p.componentInstance._vnode.isComment)){var u=p.data.transition=j({},o);if("out-in"===r)return this._leaving=!0,Wt(u,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),Wi(t,i);if("in-out"===r){if(ge(s))return c;var d,m=function(){d()};Wt(o,"afterEnter",m),Wt(o,"enterCancelled",m),Wt(u,"delayLeave",(function(t){d=t}))}}return i}}},Xi=j({tag:String,moveClass:String},$i);function Zi(t){t.elm._moveCb&&t.elm._moveCb(),t.elm._enterCb&&t.elm._enterCb()}function Ji(t){t.data.newPos=t.elm.getBoundingClientRect()}function ts(t){var e=t.data.pos,n=t.data.newPos,r=e.left-n.left,i=e.top-n.top;if(r||i){t.data.moved=!0;var s=t.elm.style;s.transform=s.WebkitTransform="translate(".concat(r,"px,").concat(i,"px)"),s.transitionDuration="0s"}}delete Xi.mode;var es={Transition:Yi,TransitionGroup:{props:Xi,beforeMount:function(){var t=this,e=this._update;this._update=function(n,r){var i=Xe(t);t.__patch__(t._vnode,t.kept,!1,!0),t._vnode=t.kept,i(),e.call(t,n,r)}},render:function(t){for(var e=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,i=this.$slots.default||[],s=this.children=[],a=Gi(this),o=0;o<i.length;o++){if((p=i[o]).tag)if(null!=p.key&&0!==String(p.key).indexOf("__vlist"))s.push(p),n[p.key]=p,(p.data||(p.data={})).transition=a;else;}if(r){var l=[],c=[];for(o=0;o<r.length;o++){var p;(p=r[o]).data.transition=a,p.data.pos=p.elm.getBoundingClientRect(),n[p.key]?l.push(p):c.push(p)}this.kept=t(e,null,l),this.removed=c}return t(e,null,s)},updated:function(){var t=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";t.length&&this.hasMove(t[0].elm,e)&&(t.forEach(Zi),t.forEach(Ji),t.forEach(ts),this._reflow=document.body.offsetHeight,t.forEach((function(t){if(t.data.moved){var n=t.elm,r=n.style;ki(n,e),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(fi,n._moveCb=function t(r){r&&r.target!==n||r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(fi,t),n._moveCb=null,wi(n,e))})}})))},methods:{hasMove:function(t,e){if(!gi)return!1;if(this._hasMove)return this._hasMove;var n=t.cloneNode();t._transitionClasses&&t._transitionClasses.forEach((function(t){ui(n,t)})),pi(n,e),n.style.display="none",this.$el.appendChild(n);var r=Si(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}}};function ns(t,e){for(var n in e)t[n]=e[n];return t}Wn.config.mustUseProp=function(t,e,n){return"value"===n&&nr(t)&&"button"!==e||"selected"===n&&"option"===t||"checked"===n&&"input"===t||"muted"===n&&"video"===t},Wn.config.isReservedTag=vr,Wn.config.isReservedAttr=er,Wn.config.getTagNamespace=function(t){return fr(t)?"svg":"math"===t?"math":void 0},Wn.config.isUnknownElement=function(t){if(!Q)return!0;if(vr(t))return!1;if(t=t.toLowerCase(),null!=br[t])return br[t];var e=document.createElement(t);return t.indexOf("-")>-1?br[t]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:br[t]=/HTMLUnknownElement/.test(e.toString())},j(Wn.options.directives,Hi),j(Wn.options.components,es),Wn.prototype.__patch__=Q?Oi:z,Wn.prototype.$mount=function(t,e){return function(t,e,n){var r;t.$el=e,t.$options.render||(t.$options.render=gt),tn(t,"beforeMount"),r=function(){t._update(t._render(),n)},new Ve(t,r,z,{before:function(){t._isMounted&&!t._isDestroyed&&tn(t,"beforeUpdate")}},!0),n=!1;var i=t._preWatchers;if(i)for(var s=0;s<i.length;s++)i[s].run();return null==t.$vnode&&(t._isMounted=!0,tn(t,"mounted")),t}(this,t=t&&Q?function(t){if("string"==typeof t){var e=document.querySelector(t);return e||document.createElement("div")}return t}(t):void 0,e)},Q&&setTimeout((function(){H.devtools&&ot&&ot.emit("init",Wn)}),0);var rs=/[!'()*]/g,is=function(t){return"%"+t.charCodeAt(0).toString(16)},ss=/%2C/g,as=function(t){return encodeURIComponent(t).replace(rs,is).replace(ss,",")};function os(t){try{return decodeURIComponent(t)}catch(t){0}return t}var ls=function(t){return null==t||"object"==typeof t?t:String(t)};function cs(t){var e={};return(t=t.trim().replace(/^(\?|#|&)/,""))?(t.split("&").forEach((function(t){var n=t.replace(/\+/g," ").split("="),r=os(n.shift()),i=n.length>0?os(n.join("=")):null;void 0===e[r]?e[r]=i:Array.isArray(e[r])?e[r].push(i):e[r]=[e[r],i]})),e):e}function ps(t){var e=t?Object.keys(t).map((function(e){var n=t[e];if(void 0===n)return"";if(null===n)return as(e);if(Array.isArray(n)){var r=[];return n.forEach((function(t){void 0!==t&&(null===t?r.push(as(e)):r.push(as(e)+"="+as(t)))})),r.join("&")}return as(e)+"="+as(n)})).filter((function(t){return t.length>0})).join("&"):null;return e?"?"+e:""}var us=/\/?$/;function ds(t,e,n,r){var i=r&&r.options.stringifyQuery,s=e.query||{};try{s=ms(s)}catch(t){}var a={name:e.name||t&&t.name,meta:t&&t.meta||{},path:e.path||"/",hash:e.hash||"",query:s,params:e.params||{},fullPath:fs(e,i),matched:t?hs(t):[]};return n&&(a.redirectedFrom=fs(n,i)),Object.freeze(a)}function ms(t){if(Array.isArray(t))return t.map(ms);if(t&&"object"==typeof t){var e={};for(var n in t)e[n]=ms(t[n]);return e}return t}var gs=ds(null,{path:"/"});function hs(t){for(var e=[];t;)e.unshift(t),t=t.parent;return e}function fs(t,e){var n=t.path,r=t.query;void 0===r&&(r={});var i=t.hash;return void 0===i&&(i=""),(n||"/")+(e||ps)(r)+i}function vs(t,e,n){return e===gs?t===e:!!e&&(t.path&&e.path?t.path.replace(us,"")===e.path.replace(us,"")&&(n||t.hash===e.hash&&bs(t.query,e.query)):!(!t.name||!e.name)&&(t.name===e.name&&(n||t.hash===e.hash&&bs(t.query,e.query)&&bs(t.params,e.params))))}function bs(t,e){if(void 0===t&&(t={}),void 0===e&&(e={}),!t||!e)return t===e;var n=Object.keys(t).sort(),r=Object.keys(e).sort();return n.length===r.length&&n.every((function(n,i){var s=t[n];if(r[i]!==n)return!1;var a=e[n];return null==s||null==a?s===a:"object"==typeof s&&"object"==typeof a?bs(s,a):String(s)===String(a)}))}function ys(t){for(var e=0;e<t.matched.length;e++){var n=t.matched[e];for(var r in n.instances){var i=n.instances[r],s=n.enteredCbs[r];if(i&&s){delete n.enteredCbs[r];for(var a=0;a<s.length;a++)i._isBeingDestroyed||s[a](i)}}}}var xs={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(t,e){var n=e.props,r=e.children,i=e.parent,s=e.data;s.routerView=!0;for(var a=i.$createElement,o=n.name,l=i.$route,c=i._routerViewCache||(i._routerViewCache={}),p=0,u=!1;i&&i._routerRoot!==i;){var d=i.$vnode?i.$vnode.data:{};d.routerView&&p++,d.keepAlive&&i._directInactive&&i._inactive&&(u=!0),i=i.$parent}if(s.routerViewDepth=p,u){var m=c[o],g=m&&m.component;return g?(m.configProps&&ks(g,s,m.route,m.configProps),a(g,s,r)):a()}var h=l.matched[p],f=h&&h.components[o];if(!h||!f)return c[o]=null,a();c[o]={component:f},s.registerRouteInstance=function(t,e){var n=h.instances[o];(e&&n!==t||!e&&n===t)&&(h.instances[o]=e)},(s.hook||(s.hook={})).prepatch=function(t,e){h.instances[o]=e.componentInstance},s.hook.init=function(t){t.data.keepAlive&&t.componentInstance&&t.componentInstance!==h.instances[o]&&(h.instances[o]=t.componentInstance),ys(l)};var v=h.props&&h.props[o];return v&&(ns(c[o],{route:l,configProps:v}),ks(f,s,l,v)),a(f,s,r)}};function ks(t,e,n,r){var i=e.props=function(t,e){switch(typeof e){case"undefined":return;case"object":return e;case"function":return e(t);case"boolean":return e?t.params:void 0;default:0}}(n,r);if(i){i=e.props=ns({},i);var s=e.attrs=e.attrs||{};for(var a in i)t.props&&a in t.props||(s[a]=i[a],delete i[a])}}function ws(t,e,n){var r=t.charAt(0);if("/"===r)return t;if("?"===r||"#"===r)return e+t;var i=e.split("/");n&&i[i.length-1]||i.pop();for(var s=t.replace(/^\//,"").split("/"),a=0;a<s.length;a++){var o=s[a];".."===o?i.pop():"."!==o&&i.push(o)}return""!==i[0]&&i.unshift(""),i.join("/")}function Es(t){return t.replace(/\/(?:\s*\/)+/g,"/")}var Ts=Array.isArray||function(t){return"[object Array]"==Object.prototype.toString.call(t)},Ss=Ls,_s=As,Cs=function(t,e){return Os(As(t,e),e)},Is=Os,qs=Bs,Ps=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function As(t,e){for(var n,r=[],i=0,s=0,a="",o=e&&e.delimiter||"/";null!=(n=Ps.exec(t));){var l=n[0],c=n[1],p=n.index;if(a+=t.slice(s,p),s=p+l.length,c)a+=c[1];else{var u=t[s],d=n[2],m=n[3],g=n[4],h=n[5],f=n[6],v=n[7];a&&(r.push(a),a="");var b=null!=d&&null!=u&&u!==d,y="+"===f||"*"===f,x="?"===f||"*"===f,k=n[2]||o,w=g||h;r.push({name:m||i++,prefix:d||"",delimiter:k,optional:x,repeat:y,partial:b,asterisk:!!v,pattern:w?Ms(w):v?".*":"[^"+zs(k)+"]+?"})}}return s<t.length&&(a+=t.substr(s)),a&&r.push(a),r}function js(t){return encodeURI(t).replace(/[\/?#]/g,(function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()}))}function Os(t,e){for(var n=new Array(t.length),r=0;r<t.length;r++)"object"==typeof t[r]&&(n[r]=new RegExp("^(?:"+t[r].pattern+")$",Rs(e)));return function(e,r){for(var i="",s=e||{},a=(r||{}).pretty?js:encodeURIComponent,o=0;o<t.length;o++){var l=t[o];if("string"!=typeof l){var c,p=s[l.name];if(null==p){if(l.optional){l.partial&&(i+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(Ts(p)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var u=0;u<p.length;u++){if(c=a(p[u]),!n[o].test(c))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(c)+"`");i+=(0===u?l.prefix:l.delimiter)+c}}else{if(c=l.asterisk?encodeURI(p).replace(/[?#]/g,(function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()})):a(p),!n[o].test(c))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+c+'"');i+=l.prefix+c}}else i+=l}return i}}function zs(t){return t.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function Ms(t){return t.replace(/([=!:$\/()])/g,"\\$1")}function Ds(t,e){return t.keys=e,t}function Rs(t){return t&&t.sensitive?"":"i"}function Bs(t,e,n){Ts(e)||(n=e||n,e=[]);for(var r=(n=n||{}).strict,i=!1!==n.end,s="",a=0;a<t.length;a++){var o=t[a];if("string"==typeof o)s+=zs(o);else{var l=zs(o.prefix),c="(?:"+o.pattern+")";e.push(o),o.repeat&&(c+="(?:"+l+c+")*"),s+=c=o.optional?o.partial?l+"("+c+")?":"(?:"+l+"("+c+"))?":l+"("+c+")"}}var p=zs(n.delimiter||"/"),u=s.slice(-p.length)===p;return r||(s=(u?s.slice(0,-p.length):s)+"(?:"+p+"(?=$))?"),s+=i?"$":r&&u?"":"(?="+p+"|$)",Ds(new RegExp("^"+s,Rs(n)),e)}function Ls(t,e,n){return Ts(e)||(n=e||n,e=[]),n=n||{},t instanceof RegExp?function(t,e){var n=t.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)e.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return Ds(t,e)}(t,e):Ts(t)?function(t,e,n){for(var r=[],i=0;i<t.length;i++)r.push(Ls(t[i],e,n).source);return Ds(new RegExp("(?:"+r.join("|")+")",Rs(n)),e)}(t,e,n):function(t,e,n){return Bs(As(t,n),e,n)}(t,e,n)}Ss.parse=_s,Ss.compile=Cs,Ss.tokensToFunction=Is,Ss.tokensToRegExp=qs;var Us=Object.create(null);function Ns(t,e,n){e=e||{};try{var r=Us[t]||(Us[t]=Ss.compile(t));return"string"==typeof e.pathMatch&&(e[0]=e.pathMatch),r(e,{pretty:!0})}catch(t){return""}finally{delete e[0]}}function Fs(t,e,n,r){var i="string"==typeof t?{path:t}:t;if(i._normalized)return i;if(i.name){var s=(i=ns({},t)).params;return s&&"object"==typeof s&&(i.params=ns({},s)),i}if(!i.path&&i.params&&e){(i=ns({},i))._normalized=!0;var a=ns(ns({},e.params),i.params);if(e.name)i.name=e.name,i.params=a;else if(e.matched.length){var o=e.matched[e.matched.length-1].path;i.path=Ns(o,a,e.path)}else 0;return i}var l=function(t){var e="",n="",r=t.indexOf("#");r>=0&&(e=t.slice(r),t=t.slice(0,r));var i=t.indexOf("?");return i>=0&&(n=t.slice(i+1),t=t.slice(0,i)),{path:t,query:n,hash:e}}(i.path||""),c=e&&e.path||"/",p=l.path?ws(l.path,c,n||i.append):c,u=function(t,e,n){void 0===e&&(e={});var r,i=n||cs;try{r=i(t||"")}catch(t){r={}}for(var s in e){var a=e[s];r[s]=Array.isArray(a)?a.map(ls):ls(a)}return r}(l.query,i.query,r&&r.options.parseQuery),d=i.hash||l.hash;return d&&"#"!==d.charAt(0)&&(d="#"+d),{_normalized:!0,path:p,query:u,hash:d}}var Hs,$s=function(){},Vs={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(t){var e=this,n=this.$router,r=this.$route,i=n.resolve(this.to,r,this.append),s=i.location,a=i.route,o=i.href,l={},c=n.options.linkActiveClass,p=n.options.linkExactActiveClass,u=null==c?"router-link-active":c,d=null==p?"router-link-exact-active":p,m=null==this.activeClass?u:this.activeClass,g=null==this.exactActiveClass?d:this.exactActiveClass,h=a.redirectedFrom?ds(null,Fs(a.redirectedFrom),null,n):a;l[g]=vs(r,h,this.exactPath),l[m]=this.exact||this.exactPath?l[g]:function(t,e){return 0===t.path.replace(us,"/").indexOf(e.path.replace(us,"/"))&&(!e.hash||t.hash===e.hash)&&function(t,e){for(var n in e)if(!(n in t))return!1;return!0}(t.query,e.query)}(r,h);var f=l[g]?this.ariaCurrentValue:null,v=function(t){Gs(t)&&(e.replace?n.replace(s,$s):n.push(s,$s))},b={click:Gs};Array.isArray(this.event)?this.event.forEach((function(t){b[t]=v})):b[this.event]=v;var y={class:l},x=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:o,route:a,navigate:v,isActive:l[m],isExactActive:l[g]});if(x){if(1===x.length)return x[0];if(x.length>1||!x.length)return 0===x.length?t():t("span",{},x)}if("a"===this.tag)y.on=b,y.attrs={href:o,"aria-current":f};else{var k=function t(e){var n;if(e)for(var r=0;r<e.length;r++){if("a"===(n=e[r]).tag)return n;if(n.children&&(n=t(n.children)))return n}}(this.$slots.default);if(k){k.isStatic=!1;var w=k.data=ns({},k.data);for(var E in w.on=w.on||{},w.on){var T=w.on[E];E in b&&(w.on[E]=Array.isArray(T)?T:[T])}for(var S in b)S in w.on?w.on[S].push(b[S]):w.on[S]=v;var _=k.data.attrs=ns({},k.data.attrs);_.href=o,_["aria-current"]=f}else y.on=b}return t(this.tag,y,this.$slots.default)}};function Gs(t){if(!(t.metaKey||t.altKey||t.ctrlKey||t.shiftKey||t.defaultPrevented||void 0!==t.button&&0!==t.button)){if(t.currentTarget&&t.currentTarget.getAttribute){var e=t.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(e))return}return t.preventDefault&&t.preventDefault(),!0}}var Ws="undefined"!=typeof window;function Ks(t,e,n,r,i){var s=e||[],a=n||Object.create(null),o=r||Object.create(null);t.forEach((function(t){!function t(e,n,r,i,s,a){var o=i.path,l=i.name;0;var c=i.pathToRegexpOptions||{},p=function(t,e,n){n||(t=t.replace(/\/$/,""));if("/"===t[0])return t;if(null==e)return t;return Es(e.path+"/"+t)}(o,s,c.strict);"boolean"==typeof i.caseSensitive&&(c.sensitive=i.caseSensitive);var u={path:p,regex:Qs(p,c),components:i.components||{default:i.component},alias:i.alias?"string"==typeof i.alias?[i.alias]:i.alias:[],instances:{},enteredCbs:{},name:l,parent:s,matchAs:a,redirect:i.redirect,beforeEnter:i.beforeEnter,meta:i.meta||{},props:null==i.props?{}:i.components?i.props:{default:i.props}};i.children&&i.children.forEach((function(i){var s=a?Es(a+"/"+i.path):void 0;t(e,n,r,i,u,s)}));n[u.path]||(e.push(u.path),n[u.path]=u);if(void 0!==i.alias)for(var d=Array.isArray(i.alias)?i.alias:[i.alias],m=0;m<d.length;++m){0;var g={path:d[m],children:i.children};t(e,n,r,g,s,u.path||"/")}l&&(r[l]||(r[l]=u))}(s,a,o,t,i)}));for(var l=0,c=s.length;l<c;l++)"*"===s[l]&&(s.push(s.splice(l,1)[0]),c--,l--);return{pathList:s,pathMap:a,nameMap:o}}function Qs(t,e){return Ss(t,[],e)}function Ys(t,e){var n=Ks(t),r=n.pathList,i=n.pathMap,s=n.nameMap;function a(t,n,a){var o=Fs(t,n,!1,e),c=o.name;if(c){var p=s[c];if(!p)return l(null,o);var u=p.regex.keys.filter((function(t){return!t.optional})).map((function(t){return t.name}));if("object"!=typeof o.params&&(o.params={}),n&&"object"==typeof n.params)for(var d in n.params)!(d in o.params)&&u.indexOf(d)>-1&&(o.params[d]=n.params[d]);return o.path=Ns(p.path,o.params),l(p,o,a)}if(o.path){o.params={};for(var m=0;m<r.length;m++){var g=r[m],h=i[g];if(Xs(h.regex,o.path,o.params))return l(h,o,a)}}return l(null,o)}function o(t,n){var r=t.redirect,i="function"==typeof r?r(ds(t,n,null,e)):r;if("string"==typeof i&&(i={path:i}),!i||"object"!=typeof i)return l(null,n);var o=i,c=o.name,p=o.path,u=n.query,d=n.hash,m=n.params;if(u=o.hasOwnProperty("query")?o.query:u,d=o.hasOwnProperty("hash")?o.hash:d,m=o.hasOwnProperty("params")?o.params:m,c){s[c];return a({_normalized:!0,name:c,query:u,hash:d,params:m},void 0,n)}if(p){var g=function(t,e){return ws(t,e.parent?e.parent.path:"/",!0)}(p,t);return a({_normalized:!0,path:Ns(g,m),query:u,hash:d},void 0,n)}return l(null,n)}function l(t,n,r){return t&&t.redirect?o(t,r||n):t&&t.matchAs?function(t,e,n){var r=a({_normalized:!0,path:Ns(n,e.params)});if(r){var i=r.matched,s=i[i.length-1];return e.params=r.params,l(s,e)}return l(null,e)}(0,n,t.matchAs):ds(t,n,r,e)}return{match:a,addRoute:function(t,e){var n="object"!=typeof t?s[t]:void 0;Ks([e||t],r,i,s,n),n&&n.alias.length&&Ks(n.alias.map((function(t){return{path:t,children:[e]}})),r,i,s,n)},getRoutes:function(){return r.map((function(t){return i[t]}))},addRoutes:function(t){Ks(t,r,i,s)}}}function Xs(t,e,n){var r=e.match(t);if(!r)return!1;if(!n)return!0;for(var i=1,s=r.length;i<s;++i){var a=t.keys[i-1];a&&(n[a.name||"pathMatch"]="string"==typeof r[i]?os(r[i]):r[i])}return!0}var Zs=Ws&&window.performance&&window.performance.now?window.performance:Date;function Js(){return Zs.now().toFixed(3)}var ta=Js();function ea(){return ta}function na(t){return ta=t}var ra=Object.create(null);function ia(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var t=window.location.protocol+"//"+window.location.host,e=window.location.href.replace(t,""),n=ns({},window.history.state);return n.key=ea(),window.history.replaceState(n,"",e),window.addEventListener("popstate",oa),function(){window.removeEventListener("popstate",oa)}}function sa(t,e,n,r){if(t.app){var i=t.options.scrollBehavior;i&&t.app.$nextTick((function(){var s=function(){var t=ea();if(t)return ra[t]}(),a=i.call(t,e,n,r?s:null);a&&("function"==typeof a.then?a.then((function(t){da(t,s)})).catch((function(t){0})):da(a,s))}))}}function aa(){var t=ea();t&&(ra[t]={x:window.pageXOffset,y:window.pageYOffset})}function oa(t){aa(),t.state&&t.state.key&&na(t.state.key)}function la(t){return pa(t.x)||pa(t.y)}function ca(t){return{x:pa(t.x)?t.x:window.pageXOffset,y:pa(t.y)?t.y:window.pageYOffset}}function pa(t){return"number"==typeof t}var ua=/^#\d/;function da(t,e){var n,r="object"==typeof t;if(r&&"string"==typeof t.selector){var i=ua.test(t.selector)?document.getElementById(t.selector.slice(1)):document.querySelector(t.selector);if(i){var s=t.offset&&"object"==typeof t.offset?t.offset:{};e=function(t,e){var n=document.documentElement.getBoundingClientRect(),r=t.getBoundingClientRect();return{x:r.left-n.left-e.x,y:r.top-n.top-e.y}}(i,s={x:pa((n=s).x)?n.x:0,y:pa(n.y)?n.y:0})}else la(t)&&(e=ca(t))}else r&&la(t)&&(e=ca(t));e&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:e.x,top:e.y,behavior:t.behavior}):window.scrollTo(e.x,e.y))}var ma,ga=Ws&&((-1===(ma=window.navigator.userAgent).indexOf("Android 2.")&&-1===ma.indexOf("Android 4.0")||-1===ma.indexOf("Mobile Safari")||-1!==ma.indexOf("Chrome")||-1!==ma.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function ha(t,e){aa();var n=window.history;try{if(e){var r=ns({},n.state);r.key=ea(),n.replaceState(r,"",t)}else n.pushState({key:na(Js())},"",t)}catch(n){window.location[e?"replace":"assign"](t)}}function fa(t){ha(t,!0)}var va={redirected:2,aborted:4,cancelled:8,duplicated:16};function ba(t,e){return xa(t,e,va.redirected,'Redirected when going from "'+t.fullPath+'" to "'+function(t){if("string"==typeof t)return t;if("path"in t)return t.path;var e={};return ka.forEach((function(n){n in t&&(e[n]=t[n])})),JSON.stringify(e,null,2)}(e)+'" via a navigation guard.')}function ya(t,e){return xa(t,e,va.cancelled,'Navigation cancelled from "'+t.fullPath+'" to "'+e.fullPath+'" with a new navigation.')}function xa(t,e,n,r){var i=new Error(r);return i._isRouter=!0,i.from=t,i.to=e,i.type=n,i}var ka=["params","query","hash"];function wa(t){return Object.prototype.toString.call(t).indexOf("Error")>-1}function Ea(t,e){return wa(t)&&t._isRouter&&(null==e||t.type===e)}function Ta(t,e,n){var r=function(i){i>=t.length?n():t[i]?e(t[i],(function(){r(i+1)})):r(i+1)};r(0)}function Sa(t){return function(e,n,r){var i=!1,s=0,a=null;_a(t,(function(t,e,n,o){if("function"==typeof t&&void 0===t.cid){i=!0,s++;var l,c=qa((function(e){var i;((i=e).__esModule||Ia&&"Module"===i[Symbol.toStringTag])&&(e=e.default),t.resolved="function"==typeof e?e:Hs.extend(e),n.components[o]=e,--s<=0&&r()})),p=qa((function(t){var e="Failed to resolve async component "+o+": "+t;a||(a=wa(t)?t:new Error(e),r(a))}));try{l=t(c,p)}catch(t){p(t)}if(l)if("function"==typeof l.then)l.then(c,p);else{var u=l.component;u&&"function"==typeof u.then&&u.then(c,p)}}})),i||r()}}function _a(t,e){return Ca(t.map((function(t){return Object.keys(t.components).map((function(n){return e(t.components[n],t.instances[n],t,n)}))})))}function Ca(t){return Array.prototype.concat.apply([],t)}var Ia="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function qa(t){var e=!1;return function(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];if(!e)return e=!0,t.apply(this,n)}}var Pa=function(t,e){this.router=t,this.base=function(t){if(!t)if(Ws){var e=document.querySelector("base");t=(t=e&&e.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else t="/";"/"!==t.charAt(0)&&(t="/"+t);return t.replace(/\/$/,"")}(e),this.current=gs,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function Aa(t,e,n,r){var i=_a(t,(function(t,r,i,s){var a=function(t,e){"function"!=typeof t&&(t=Hs.extend(t));return t.options[e]}(t,e);if(a)return Array.isArray(a)?a.map((function(t){return n(t,r,i,s)})):n(a,r,i,s)}));return Ca(r?i.reverse():i)}function ja(t,e){if(e)return function(){return t.apply(e,arguments)}}Pa.prototype.listen=function(t){this.cb=t},Pa.prototype.onReady=function(t,e){this.ready?t():(this.readyCbs.push(t),e&&this.readyErrorCbs.push(e))},Pa.prototype.onError=function(t){this.errorCbs.push(t)},Pa.prototype.transitionTo=function(t,e,n){var r,i=this;try{r=this.router.match(t,this.current)}catch(t){throw this.errorCbs.forEach((function(e){e(t)})),t}var s=this.current;this.confirmTransition(r,(function(){i.updateRoute(r),e&&e(r),i.ensureURL(),i.router.afterHooks.forEach((function(t){t&&t(r,s)})),i.ready||(i.ready=!0,i.readyCbs.forEach((function(t){t(r)})))}),(function(t){n&&n(t),t&&!i.ready&&(Ea(t,va.redirected)&&s===gs||(i.ready=!0,i.readyErrorCbs.forEach((function(e){e(t)}))))}))},Pa.prototype.confirmTransition=function(t,e,n){var r=this,i=this.current;this.pending=t;var s,a,o=function(t){!Ea(t)&&wa(t)&&(r.errorCbs.length?r.errorCbs.forEach((function(e){e(t)})):console.error(t)),n&&n(t)},l=t.matched.length-1,c=i.matched.length-1;if(vs(t,i)&&l===c&&t.matched[l]===i.matched[c])return this.ensureURL(),t.hash&&sa(this.router,i,t,!1),o(((a=xa(s=i,t,va.duplicated,'Avoided redundant navigation to current location: "'+s.fullPath+'".')).name="NavigationDuplicated",a));var p=function(t,e){var n,r=Math.max(t.length,e.length);for(n=0;n<r&&t[n]===e[n];n++);return{updated:e.slice(0,n),activated:e.slice(n),deactivated:t.slice(n)}}(this.current.matched,t.matched),u=p.updated,d=p.deactivated,m=p.activated,g=[].concat(function(t){return Aa(t,"beforeRouteLeave",ja,!0)}(d),this.router.beforeHooks,function(t){return Aa(t,"beforeRouteUpdate",ja)}(u),m.map((function(t){return t.beforeEnter})),Sa(m)),h=function(e,n){if(r.pending!==t)return o(ya(i,t));try{e(t,i,(function(e){!1===e?(r.ensureURL(!0),o(function(t,e){return xa(t,e,va.aborted,'Navigation aborted from "'+t.fullPath+'" to "'+e.fullPath+'" via a navigation guard.')}(i,t))):wa(e)?(r.ensureURL(!0),o(e)):"string"==typeof e||"object"==typeof e&&("string"==typeof e.path||"string"==typeof e.name)?(o(ba(i,t)),"object"==typeof e&&e.replace?r.replace(e):r.push(e)):n(e)}))}catch(t){o(t)}};Ta(g,h,(function(){Ta(function(t){return Aa(t,"beforeRouteEnter",(function(t,e,n,r){return function(t,e,n){return function(r,i,s){return t(r,i,(function(t){"function"==typeof t&&(e.enteredCbs[n]||(e.enteredCbs[n]=[]),e.enteredCbs[n].push(t)),s(t)}))}}(t,n,r)}))}(m).concat(r.router.resolveHooks),h,(function(){if(r.pending!==t)return o(ya(i,t));r.pending=null,e(t),r.router.app&&r.router.app.$nextTick((function(){ys(t)}))}))}))},Pa.prototype.updateRoute=function(t){this.current=t,this.cb&&this.cb(t)},Pa.prototype.setupListeners=function(){},Pa.prototype.teardown=function(){this.listeners.forEach((function(t){t()})),this.listeners=[],this.current=gs,this.pending=null};var Oa=function(t){function e(e,n){t.call(this,e,n),this._startLocation=za(this.base)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var t=this;if(!(this.listeners.length>0)){var e=this.router,n=e.options.scrollBehavior,r=ga&&n;r&&this.listeners.push(ia());var i=function(){var n=t.current,i=za(t.base);t.current===gs&&i===t._startLocation||t.transitionTo(i,(function(t){r&&sa(e,t,n,!0)}))};window.addEventListener("popstate",i),this.listeners.push((function(){window.removeEventListener("popstate",i)}))}},e.prototype.go=function(t){window.history.go(t)},e.prototype.push=function(t,e,n){var r=this,i=this.current;this.transitionTo(t,(function(t){ha(Es(r.base+t.fullPath)),sa(r.router,t,i,!1),e&&e(t)}),n)},e.prototype.replace=function(t,e,n){var r=this,i=this.current;this.transitionTo(t,(function(t){fa(Es(r.base+t.fullPath)),sa(r.router,t,i,!1),e&&e(t)}),n)},e.prototype.ensureURL=function(t){if(za(this.base)!==this.current.fullPath){var e=Es(this.base+this.current.fullPath);t?ha(e):fa(e)}},e.prototype.getCurrentLocation=function(){return za(this.base)},e}(Pa);function za(t){var e=window.location.pathname,n=e.toLowerCase(),r=t.toLowerCase();return!t||n!==r&&0!==n.indexOf(Es(r+"/"))||(e=e.slice(t.length)),(e||"/")+window.location.search+window.location.hash}var Ma=function(t){function e(e,n,r){t.call(this,e,n),r&&function(t){var e=za(t);if(!/^\/#/.test(e))return window.location.replace(Es(t+"/#"+e)),!0}(this.base)||Da()}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var t=this;if(!(this.listeners.length>0)){var e=this.router.options.scrollBehavior,n=ga&&e;n&&this.listeners.push(ia());var r=function(){var e=t.current;Da()&&t.transitionTo(Ra(),(function(r){n&&sa(t.router,r,e,!0),ga||Ua(r.fullPath)}))},i=ga?"popstate":"hashchange";window.addEventListener(i,r),this.listeners.push((function(){window.removeEventListener(i,r)}))}},e.prototype.push=function(t,e,n){var r=this,i=this.current;this.transitionTo(t,(function(t){La(t.fullPath),sa(r.router,t,i,!1),e&&e(t)}),n)},e.prototype.replace=function(t,e,n){var r=this,i=this.current;this.transitionTo(t,(function(t){Ua(t.fullPath),sa(r.router,t,i,!1),e&&e(t)}),n)},e.prototype.go=function(t){window.history.go(t)},e.prototype.ensureURL=function(t){var e=this.current.fullPath;Ra()!==e&&(t?La(e):Ua(e))},e.prototype.getCurrentLocation=function(){return Ra()},e}(Pa);function Da(){var t=Ra();return"/"===t.charAt(0)||(Ua("/"+t),!1)}function Ra(){var t=window.location.href,e=t.indexOf("#");return e<0?"":t=t.slice(e+1)}function Ba(t){var e=window.location.href,n=e.indexOf("#");return(n>=0?e.slice(0,n):e)+"#"+t}function La(t){ga?ha(Ba(t)):window.location.hash=t}function Ua(t){ga?fa(Ba(t)):window.location.replace(Ba(t))}var Na=function(t){function e(e,n){t.call(this,e,n),this.stack=[],this.index=-1}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.push=function(t,e,n){var r=this;this.transitionTo(t,(function(t){r.stack=r.stack.slice(0,r.index+1).concat(t),r.index++,e&&e(t)}),n)},e.prototype.replace=function(t,e,n){var r=this;this.transitionTo(t,(function(t){r.stack=r.stack.slice(0,r.index).concat(t),e&&e(t)}),n)},e.prototype.go=function(t){var e=this,n=this.index+t;if(!(n<0||n>=this.stack.length)){var r=this.stack[n];this.confirmTransition(r,(function(){var t=e.current;e.index=n,e.updateRoute(r),e.router.afterHooks.forEach((function(e){e&&e(r,t)}))}),(function(t){Ea(t,va.duplicated)&&(e.index=n)}))}},e.prototype.getCurrentLocation=function(){var t=this.stack[this.stack.length-1];return t?t.fullPath:"/"},e.prototype.ensureURL=function(){},e}(Pa),Fa=function(t){void 0===t&&(t={}),this.app=null,this.apps=[],this.options=t,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=Ys(t.routes||[],this);var e=t.mode||"hash";switch(this.fallback="history"===e&&!ga&&!1!==t.fallback,this.fallback&&(e="hash"),Ws||(e="abstract"),this.mode=e,e){case"history":this.history=new Oa(this,t.base);break;case"hash":this.history=new Ma(this,t.base,this.fallback);break;case"abstract":this.history=new Na(this,t.base);break;default:0}},Ha={currentRoute:{configurable:!0}};Fa.prototype.match=function(t,e,n){return this.matcher.match(t,e,n)},Ha.currentRoute.get=function(){return this.history&&this.history.current},Fa.prototype.init=function(t){var e=this;if(this.apps.push(t),t.$once("hook:destroyed",(function(){var n=e.apps.indexOf(t);n>-1&&e.apps.splice(n,1),e.app===t&&(e.app=e.apps[0]||null),e.app||e.history.teardown()})),!this.app){this.app=t;var n=this.history;if(n instanceof Oa||n instanceof Ma){var r=function(t){n.setupListeners(),function(t){var r=n.current,i=e.options.scrollBehavior;ga&&i&&"fullPath"in t&&sa(e,t,r,!1)}(t)};n.transitionTo(n.getCurrentLocation(),r,r)}n.listen((function(t){e.apps.forEach((function(e){e._route=t}))}))}},Fa.prototype.beforeEach=function(t){return Va(this.beforeHooks,t)},Fa.prototype.beforeResolve=function(t){return Va(this.resolveHooks,t)},Fa.prototype.afterEach=function(t){return Va(this.afterHooks,t)},Fa.prototype.onReady=function(t,e){this.history.onReady(t,e)},Fa.prototype.onError=function(t){this.history.onError(t)},Fa.prototype.push=function(t,e,n){var r=this;if(!e&&!n&&"undefined"!=typeof Promise)return new Promise((function(e,n){r.history.push(t,e,n)}));this.history.push(t,e,n)},Fa.prototype.replace=function(t,e,n){var r=this;if(!e&&!n&&"undefined"!=typeof Promise)return new Promise((function(e,n){r.history.replace(t,e,n)}));this.history.replace(t,e,n)},Fa.prototype.go=function(t){this.history.go(t)},Fa.prototype.back=function(){this.go(-1)},Fa.prototype.forward=function(){this.go(1)},Fa.prototype.getMatchedComponents=function(t){var e=t?t.matched?t:this.resolve(t).route:this.currentRoute;return e?[].concat.apply([],e.matched.map((function(t){return Object.keys(t.components).map((function(e){return t.components[e]}))}))):[]},Fa.prototype.resolve=function(t,e,n){var r=Fs(t,e=e||this.history.current,n,this),i=this.match(r,e),s=i.redirectedFrom||i.fullPath;return{location:r,route:i,href:function(t,e,n){var r="hash"===n?"#"+e:e;return t?Es(t+"/"+r):r}(this.history.base,s,this.mode),normalizedTo:r,resolved:i}},Fa.prototype.getRoutes=function(){return this.matcher.getRoutes()},Fa.prototype.addRoute=function(t,e){this.matcher.addRoute(t,e),this.history.current!==gs&&this.history.transitionTo(this.history.getCurrentLocation())},Fa.prototype.addRoutes=function(t){this.matcher.addRoutes(t),this.history.current!==gs&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(Fa.prototype,Ha);var $a=Fa;function Va(t,e){return t.push(e),function(){var n=t.indexOf(e);n>-1&&t.splice(n,1)}}Fa.install=function t(e){if(!t.installed||Hs!==e){t.installed=!0,Hs=e;var n=function(t){return void 0!==t},r=function(t,e){var r=t.$options._parentVnode;n(r)&&n(r=r.data)&&n(r=r.registerRouteInstance)&&r(t,e)};e.mixin({beforeCreate:function(){n(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),e.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,r(this,this)},destroyed:function(){r(this)}}),Object.defineProperty(e.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(e.prototype,"$route",{get:function(){return this._routerRoot._route}}),e.component("RouterView",xs),e.component("RouterLink",Vs);var i=e.config.optionMergeStrategies;i.beforeRouteEnter=i.beforeRouteLeave=i.beforeRouteUpdate=i.created}},Fa.version="3.6.5",Fa.isNavigationFailure=Ea,Fa.NavigationFailureType=va,Fa.START_LOCATION=gs,Ws&&window.Vue&&window.Vue.use(Fa);n(153),n(18),n(162);n(163),n(31);var Ga={"components/AlgoliaSearchBox":()=>Promise.all([n.e(0),n.e(14)]).then(n.bind(null,396)),"components/ArchivesPage":()=>Promise.all([n.e(0),n.e(17)]).then(n.bind(null,362)),"components/ArticleInfo":()=>Promise.all([n.e(0),n.e(20)]).then(n.bind(null,363)),"components/BloggerBar":()=>Promise.all([n.e(0),n.e(21)]).then(n.bind(null,364)),"components/BodyBgImg":()=>Promise.all([n.e(0),n.e(22)]).then(n.bind(null,365)),"components/Buttons":()=>Promise.all([n.e(0),n.e(18)]).then(n.bind(null,366)),"components/Catalogue":()=>Promise.all([n.e(0),n.e(23)]).then(n.bind(null,367)),"components/CategoriesBar":()=>Promise.all([n.e(0),n.e(24)]).then(n.bind(null,327)),"components/CategoriesPage":()=>Promise.all([n.e(0),n.e(11)]).then(n.bind(null,368)),"components/DropdownLink":()=>Promise.all([n.e(0),n.e(15)]).then(n.bind(null,305)),"components/DropdownTransition":()=>Promise.all([n.e(0),n.e(25)]).then(n.bind(null,283)),"components/Footer":()=>Promise.all([n.e(0),n.e(26)]).then(n.bind(null,369)),"components/Home":()=>Promise.all([n.e(0),n.e(2),n.e(37)]).then(n.bind(null,392)),"components/MainLayout":()=>Promise.all([n.e(0),n.e(27)]).then(n.bind(null,297)),"components/NavLink":()=>n.e(38).then(n.bind(null,282)),"components/NavLinks":()=>Promise.all([n.e(0),n.e(13)]).then(n.bind(null,329)),"components/Navbar":()=>Promise.all([n.e(0),n.e(1)]).then(n.bind(null,391)),"components/Page":()=>Promise.all([n.e(0),n.e(3),n.e(34)]).then(n.bind(null,393)),"components/PageEdit":()=>Promise.all([n.e(0),n.e(19)]).then(n.bind(null,370)),"components/PageNav":()=>Promise.all([n.e(0),n.e(16)]).then(n.bind(null,371)),"components/Pagination":()=>Promise.all([n.e(0),n.e(28)]).then(n.bind(null,296)),"components/PostList":()=>Promise.all([n.e(0),n.e(29)]).then(n.bind(null,295)),"components/RightMenu":()=>Promise.all([n.e(0),n.e(30)]).then(n.bind(null,372)),"components/Sidebar":()=>Promise.all([n.e(0),n.e(10)]).then(n.bind(null,373)),"components/SidebarButton":()=>Promise.all([n.e(0),n.e(31)]).then(n.bind(null,375)),"components/SidebarGroup":()=>Promise.all([n.e(0),n.e(5)]).then(n.bind(null,330)),"components/SidebarLink":()=>Promise.all([n.e(0),n.e(32)]).then(n.bind(null,306)),"components/SidebarLinks":()=>Promise.all([n.e(0),n.e(5)]).then(n.bind(null,303)),"components/TagsBar":()=>Promise.all([n.e(0),n.e(33)]).then(n.bind(null,328)),"components/TagsPage":()=>Promise.all([n.e(0),n.e(12)]).then(n.bind(null,374)),"components/UpdateArticle":()=>Promise.all([n.e(0),n.e(35)]).then(n.bind(null,333)),"global-components/Badge":()=>Promise.all([n.e(0),n.e(6)]).then(n.bind(null,399)),"global-components/CodeBlock":()=>Promise.resolve().then(n.bind(null,123)),"global-components/CodeGroup":()=>Promise.resolve().then(n.bind(null,124)),"layouts/404":()=>Promise.all([n.e(0),n.e(7)]).then(n.bind(null,397)),"layouts/Layout":()=>Promise.all([n.e(0),n.e(1),n.e(2),n.e(3),n.e(4)]).then(n.bind(null,398)),NotFound:()=>Promise.all([n.e(0),n.e(7)]).then(n.bind(null,397)),Layout:()=>Promise.all([n.e(0),n.e(1),n.e(2),n.e(3),n.e(4)]).then(n.bind(null,398))},Wa={"v-a34d6c24":()=>n.e(39).then(n.bind(null,400)),"v-125b7ba4":()=>n.e(41).then(n.bind(null,401)),"v-346ce496":()=>n.e(40).then(n.bind(null,402)),"v-90a17964":()=>n.e(42).then(n.bind(null,403)),"v-1551ecb0":()=>n.e(43).then(n.bind(null,404)),"v-3a4be74e":()=>n.e(44).then(n.bind(null,405)),"v-b5e736e4":()=>n.e(45).then(n.bind(null,406)),"v-ab6c9064":()=>n.e(46).then(n.bind(null,407)),"v-2bbc8e24":()=>n.e(47).then(n.bind(null,408)),"v-ac9fb018":()=>n.e(48).then(n.bind(null,409)),"v-6846b5e6":()=>n.e(49).then(n.bind(null,410)),"v-63861764":()=>n.e(50).then(n.bind(null,411)),"v-63ca04e4":()=>n.e(51).then(n.bind(null,412)),"v-19630a64":()=>n.e(52).then(n.bind(null,413)),"v-309d7d14":()=>n.e(53).then(n.bind(null,414)),"v-118fa3f4":()=>n.e(54).then(n.bind(null,415)),"v-072e52ae":()=>n.e(55).then(n.bind(null,416)),"v-97ba9864":()=>n.e(56).then(n.bind(null,417)),"v-454936ce":()=>n.e(57).then(n.bind(null,418)),"v-40268b24":()=>n.e(59).then(n.bind(null,419)),"v-14357e50":()=>n.e(60).then(n.bind(null,420)),"v-2036b1a4":()=>n.e(58).then(n.bind(null,421)),"v-411d1ab2":()=>n.e(61).then(n.bind(null,422)),"v-68b48522":()=>n.e(62).then(n.bind(null,423)),"v-bcf44548":()=>n.e(63).then(n.bind(null,424)),"v-2e346c4e":()=>n.e(64).then(n.bind(null,425)),"v-3e6b39ee":()=>n.e(65).then(n.bind(null,426)),"v-73e6eb0c":()=>n.e(66).then(n.bind(null,427)),"v-66dc0cea":()=>n.e(67).then(n.bind(null,428)),"v-b2ffec24":()=>n.e(69).then(n.bind(null,429)),"v-56303aa8":()=>n.e(70).then(n.bind(null,430)),"v-de508324":()=>n.e(71).then(n.bind(null,431)),"v-675a222c":()=>n.e(72).then(n.bind(null,432)),"v-730f3da4":()=>n.e(68).then(n.bind(null,433)),"v-1a8747e8":()=>n.e(73).then(n.bind(null,434)),"v-339db564":()=>n.e(74).then(n.bind(null,435)),"v-eb375964":()=>n.e(75).then(n.bind(null,436)),"v-3a036c88":()=>n.e(79).then(n.bind(null,437)),"v-ec7a7eec":()=>n.e(77).then(n.bind(null,438)),"v-40a9506e":()=>n.e(78).then(n.bind(null,439)),"v-1a34762e":()=>n.e(76).then(n.bind(null,440)),"v-40cbba76":()=>n.e(80).then(n.bind(null,441)),"v-9da4f530":()=>n.e(81).then(n.bind(null,442)),"v-03f84d34":()=>n.e(82).then(n.bind(null,443)),"v-6e8179ae":()=>n.e(84).then(n.bind(null,444)),"v-19ba89b4":()=>n.e(83).then(n.bind(null,445)),"v-48fcfd0c":()=>n.e(85).then(n.bind(null,446)),"v-299e7afb":()=>n.e(87).then(n.bind(null,447)),"v-d203bddc":()=>n.e(88).then(n.bind(null,448)),"v-e6ac8fd2":()=>n.e(89).then(n.bind(null,449)),"v-01c05974":()=>n.e(86).then(n.bind(null,450)),"v-280a66fa":()=>n.e(91).then(n.bind(null,451)),"v-6fdf502e":()=>n.e(92).then(n.bind(null,452)),"v-435b25ee":()=>n.e(93).then(n.bind(null,453)),"v-0eb5a24e":()=>n.e(94).then(n.bind(null,454)),"v-93428452":()=>n.e(90).then(n.bind(null,455)),"v-13b5f3a2":()=>n.e(95).then(n.bind(null,456)),"v-f03d785e":()=>n.e(96).then(n.bind(null,457)),"v-7bde6c00":()=>n.e(97).then(n.bind(null,458)),"v-3ab055e8":()=>n.e(98).then(n.bind(null,459)),"v-133e2ccb":()=>n.e(99).then(n.bind(null,460)),"v-2cab7970":()=>n.e(100).then(n.bind(null,461)),"v-32104ab3":()=>n.e(101).then(n.bind(null,462)),"v-8b2e8a08":()=>n.e(102).then(n.bind(null,463)),"v-61d09452":()=>n.e(104).then(n.bind(null,464)),"v-7879551d":()=>n.e(105).then(n.bind(null,465)),"v-6d08b50b":()=>n.e(103).then(n.bind(null,466)),"v-06c7d395":()=>n.e(106).then(n.bind(null,467)),"v-0781bd81":()=>n.e(107).then(n.bind(null,468)),"v-765b100f":()=>n.e(108).then(n.bind(null,469)),"v-607a078c":()=>n.e(110).then(n.bind(null,470)),"v-dfdfb98c":()=>n.e(111).then(n.bind(null,471)),"v-156fc168":()=>n.e(112).then(n.bind(null,472)),"v-6f30d314":()=>n.e(109).then(n.bind(null,473)),"v-6d691196":()=>n.e(115).then(n.bind(null,474)),"v-0006a629":()=>n.e(114).then(n.bind(null,475)),"v-37a6751e":()=>n.e(117).then(n.bind(null,476)),"v-36f5928f":()=>n.e(113).then(n.bind(null,477)),"v-013a7629":()=>n.e(118).then(n.bind(null,478)),"v-66672d47":()=>n.e(116).then(n.bind(null,479)),"v-7cffb40a":()=>n.e(119).then(n.bind(null,480)),"v-a1c8b71e":()=>n.e(120).then(n.bind(null,481)),"v-7b392dc2":()=>n.e(121).then(n.bind(null,482)),"v-36503df2":()=>n.e(122).then(n.bind(null,483)),"v-18bfd9b1":()=>n.e(123).then(n.bind(null,484)),"v-3a2c0ee4":()=>n.e(124).then(n.bind(null,485)),"v-1454054f":()=>n.e(125).then(n.bind(null,486)),"v-a8d5efd0":()=>n.e(126).then(n.bind(null,487)),"v-33d07a2c":()=>n.e(127).then(n.bind(null,488)),"v-9deea25c":()=>n.e(129).then(n.bind(null,489)),"v-649ecfa8":()=>n.e(130).then(n.bind(null,490)),"v-f4a666ec":()=>n.e(128).then(n.bind(null,491)),"v-0a41a4fc":()=>n.e(131).then(n.bind(null,492)),"v-5ea34d4a":()=>Promise.all([n.e(0),n.e(36)]).then(n.bind(null,493))};function Ka(t){const e=Object.create(null);return function(n){return e[n]||(e[n]=t(n))}}const Qa=/-(\w)/g,Ya=Ka(t=>t.replace(Qa,(t,e)=>e?e.toUpperCase():"")),Xa=/\B([A-Z])/g,Za=Ka(t=>t.replace(Xa,"-$1").toLowerCase()),Ja=Ka(t=>t.charAt(0).toUpperCase()+t.slice(1));function to(t,e){if(!e)return;if(t(e))return t(e);return e.includes("-")?t(Ja(Ya(e))):t(Ja(e))||t(Za(e))}const eo=Object.assign({},Ga,Wa),no=t=>eo[t],ro=t=>Wa[t],io=t=>Ga[t],so=t=>Wn.component(t);function ao(t){return to(ro,t)}function oo(t){return to(io,t)}function lo(t){return to(no,t)}function co(t){return to(so,t)}function po(...t){return Promise.all(t.filter(t=>t).map(async t=>{if(!co(t)&&lo(t)){const e=await lo(t)();Wn.component(t,e.default)}}))}function uo(t,e){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[t]=e)}var mo=n(121),go=n.n(mo),ho=n(122),fo=n.n(ho),vo={created(){if(this.siteMeta=this.$site.headTags.filter(([t])=>"meta"===t).map(([t,e])=>e),this.$ssrContext){const e=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(t=e)?t.map(t=>{let e="<meta";return Object.keys(t).forEach(n=>{e+=` ${n}="${fo()(t[n])}"`}),e+">"}).join("\n    "):"",this.$ssrContext.canonicalLink=yo(this.$canonicalUrl)}var t},mounted(){this.currentMetaTags=[...document.querySelectorAll("meta")],this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta(){document.title=this.$title,document.documentElement.lang=this.$lang;const t=this.getMergedMetaTags();this.currentMetaTags=xo(t,this.currentMetaTags)},getMergedMetaTags(){const t=this.$page.frontmatter.meta||[];return go()([{name:"description",content:this.$description}],t,this.siteMeta,ko)},updateCanonicalLink(){bo(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",yo(this.$canonicalUrl))}},watch:{$page(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy(){xo(null,this.currentMetaTags),bo()}};function bo(){const t=document.querySelector("link[rel='canonical']");t&&t.remove()}function yo(t=""){return t?`<link href="${t}" rel="canonical" />`:""}function xo(t,e){if(e&&[...e].filter(t=>t.parentNode===document.head).forEach(t=>document.head.removeChild(t)),t)return t.map(t=>{const e=document.createElement("meta");return Object.keys(t).forEach(n=>{e.setAttribute(n,t[n])}),document.head.appendChild(e),e})}function ko(t){for(const e of["name","property","itemprop"])if(t.hasOwnProperty(e))return t[e]+e;return JSON.stringify(t)}n(65);var wo=n(66),Eo={mounted(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:n.n(wo)()((function(){this.setActiveHash()}),300),setActiveHash(){const t=[].slice.call(document.querySelectorAll(".sidebar-link")),e=[].slice.call(document.querySelectorAll(".header-anchor")).filter(e=>t.some(t=>t.hash===e.hash)),n=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),r=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),i=window.innerHeight+n;for(let t=0;t<e.length;t++){const s=e[t],a=e[t+1],o=0===t&&0===n||n>=s.parentElement.offsetTop+10&&(!a||n<a.parentElement.offsetTop-10),l=decodeURIComponent(this.$route.hash);if(o&&l!==decodeURIComponent(s.hash)){const n=s;if(i===r)for(let n=t+1;n<e.length;n++)if(l===decodeURIComponent(e[n].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(n.hash),()=>{this.$nextTick(()=>{this.$vuepress.$set("disableScrollBehavior",!1)})})}}}},beforeDestroy(){window.removeEventListener("scroll",this.onScroll)}},To=n(45),So=n.n(To),_o={mounted(){So.a.configure({showSpinner:!1}),this.$router.beforeEach((t,e,n)=>{t.path===e.path||Wn.component(t.name)||So.a.start(),n()}),this.$router.afterEach(()=>{So.a.done(),this.isSidebarOpen=!1})}};n(272),n(273);class Co{constructor(){this.containerEl=document.getElementById("message-container"),this.containerEl||(this.containerEl=document.createElement("div"),this.containerEl.id="message-container",document.body.appendChild(this.containerEl))}show({text:t="",duration:e=3e3}){let n=document.createElement("div");n.className="message move-in",n.innerHTML=`\n      <i style="fill: #06a35a;font-size: 14px;display:inline-flex;align-items: center;">\n        <svg style="fill: #06a35a;font-size: 14px;" t="1572421810237" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2323" width="16" height="16"><path d="M822.811993 824.617989c-83.075838 81.99224-188.546032 124.613757-316.049383 127.86455-122.085362-3.250794-223.943563-45.87231-305.935802-127.86455s-124.613757-184.21164-127.86455-305.935802c3.250794-127.503351 45.87231-232.973545 127.86455-316.049383 81.99224-83.075838 184.21164-126.058554 305.935802-129.309347 127.503351 3.250794 232.973545 46.23351 316.049383 129.309347 83.075838 83.075838 126.058554 188.546032 129.309347 316.049383C949.231746 640.406349 905.887831 742.62575 822.811993 824.617989zM432.716755 684.111464c3.973192 3.973192 8.307584 5.779189 13.364374 6.140388 5.05679 0.361199 9.752381-1.444797 13.364374-5.417989l292.571429-287.514638c3.973192-3.973192 5.779189-8.307584 5.779189-13.364374 0-5.05679-1.805996-9.752381-5.779189-13.364374l1.805996 1.805996c-3.973192-3.973192-8.668783-5.779189-14.086772-6.140388-5.417989-0.361199-10.47478 1.444797-14.809171 5.417989l-264.397884 220.33157c-3.973192 3.250794-8.668783 4.695591-14.447972 4.695591-5.779189 0-10.835979-1.444797-15.53157-3.973192l-94.273016-72.962257c-4.334392-3.250794-9.391182-4.334392-14.447972-3.973192s-9.391182 3.250794-12.641975 7.585185l-2.889594 3.973192c-3.250794 4.334392-4.334392 9.391182-3.973192 14.809171 0.722399 5.417989 2.528395 10.11358 5.779189 14.086772L432.716755 684.111464z" p-id="2324"></path></svg>\n      </i>\n      <div class="text">${t}</div>\n    `,this.containerEl.appendChild(n),e>0&&setTimeout(()=>{this.close(n)},e)}close(t){t.className=t.className.replace("move-in",""),t.className+="move-out",t.addEventListener("animationend",()=>{t.remove()})}}var Io={mounted(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},updated(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},methods:{updateCopy(){setTimeout(()=>{(['div[class*="language-"] pre','div[class*="aside-code"] aside']instanceof Array||Array.isArray(['div[class*="language-"] pre','div[class*="aside-code"] aside']))&&['div[class*="language-"] pre','div[class*="aside-code"] aside'].forEach(t=>{document.querySelectorAll(t).forEach(this.generateCopyButton)})},1e3)},generateCopyButton(t){if(t.classList.contains("codecopy-enabled"))return;const e=document.createElement("i");e.className="code-copy",e.innerHTML='<svg  style="color:#aaa;font-size:14px" t="1572422231464" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3201" width="14" height="14"><path d="M866.461538 39.384615H354.461538c-43.323077 0-78.769231 35.446154-78.76923 78.769231v39.384616h472.615384c43.323077 0 78.769231 35.446154 78.769231 78.76923v551.384616h39.384615c43.323077 0 78.769231-35.446154 78.769231-78.769231V118.153846c0-43.323077-35.446154-78.769231-78.769231-78.769231z m-118.153846 275.692308c0-43.323077-35.446154-78.769231-78.76923-78.769231H157.538462c-43.323077 0-78.769231 35.446154-78.769231 78.769231v590.769231c0 43.323077 35.446154 78.769231 78.769231 78.769231h512c43.323077 0 78.769231-35.446154 78.76923-78.769231V315.076923z m-354.461538 137.846154c0 11.815385-7.876923 19.692308-19.692308 19.692308h-157.538461c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h157.538461c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z m157.538461 315.076923c0 11.815385-7.876923 19.692308-19.692307 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h315.076923c11.815385 0 19.692308 7.876923 19.692307 19.692308v39.384615z m78.769231-157.538462c0 11.815385-7.876923 19.692308-19.692308 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h393.846153c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z" p-id="3202"></path></svg>',e.title="Copy to clipboard",e.addEventListener("click",()=>{this.copyToClipboard(t.innerText)}),t.appendChild(e),t.classList.add("codecopy-enabled")},copyToClipboard(t){const e=document.createElement("textarea");e.value=t,e.setAttribute("readonly",""),e.style.position="absolute",e.style.left="-9999px",document.body.appendChild(e);const n=document.getSelection().rangeCount>0&&document.getSelection().getRangeAt(0);e.select(),document.execCommand("copy");(new Co).show({text:"复制成功",duration:1e3}),document.body.removeChild(e),n&&(document.getSelection().removeAllRanges(),document.getSelection().addRange(n))}}};!function(t,e){void 0===e&&(e={});var n=e.insertAt;if(t&&"undefined"!=typeof document){var r=document.head||document.getElementsByTagName("head")[0],i=document.createElement("style");i.type="text/css","top"===n&&r.firstChild?r.insertBefore(i,r.firstChild):r.appendChild(i),i.styleSheet?i.styleSheet.cssText=t:i.appendChild(document.createTextNode(t))}}("@media (max-width: 1000px) {\n  .vuepress-plugin-demo-block__h_code {\n    display: none;\n  }\n  .vuepress-plugin-demo-block__app {\n    margin-left: auto !important;\n    margin-right: auto !important;\n  }\n}\n.vuepress-plugin-demo-block__wrapper {\n  margin-top: 10px;\n  border: 1px solid #ebebeb;\n  border-radius: 4px;\n  transition: all 0.2s;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display {\n  height: 400px;\n  display: flex;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__app {\n  width: 300px;\n  border: 1px solid #ebebeb;\n  box-shadow: 1px 1px 3px #ebebeb;\n  margin-right: 5px;\n  overflow: auto;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__h_code {\n  flex: 1;\n  overflow: auto;\n  height: 100%;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__h_code > pre {\n  overflow: visible;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__display {\n  max-height: 400px;\n  overflow: auto;\n}\n.vuepress-plugin-demo-block__wrapper div {\n  box-sizing: border-box;\n}\n.vuepress-plugin-demo-block__wrapper:hover {\n  box-shadow: 0 0 11px rgba(33, 33, 33, 0.2);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__code {\n  overflow: hidden;\n  height: 0;\n  padding: 0 !important;\n  background-color: #282c34;\n  border-radius: 0 !important;\n  transition: height 0.5s;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__code pre {\n  margin: 0 !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__display {\n  padding: 20px;\n  border-bottom: 1px solid #ebebeb;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer {\n  position: relative;\n  text-align: center;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__codepen {\n  opacity: 1;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__expand::before {\n  border-top: none;\n  border-right: 6px solid transparent;\n  border-bottom: 6px solid #ccc;\n  border-left: 6px solid transparent;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__codepen,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand span,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand {\n  opacity: 1;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand::before {\n  border-top-color: #3eaf7c !important;\n  border-bottom-color: #3eaf7c !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover svg {\n  fill: #3eaf7c !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand-text {\n  transition: all 0.5s;\n  opacity: 0;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer form:nth-last-child(2) {\n  right: 50px;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer form:last-child {\n  right: 10px;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button {\n  border-color: transparent;\n  background-color: transparent;\n  font-size: 14px;\n  color: #3eaf7c;\n  cursor: pointer;\n  outline: none;\n  margin: 0;\n  width: 46px;\n  position: relative;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button:hover::before {\n  content: attr(data-tip);\n  white-space: nowrap;\n  position: absolute;\n  top: -30px;\n  left: 50%;\n  color: #eee;\n  line-height: 1;\n  z-index: 1000;\n  border-radius: 4px;\n  padding: 6px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  background-color: rgba(0, 0, 0, 0.8);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button:hover::after {\n  content: '' !important;\n  display: block;\n  position: absolute;\n  left: 50%;\n  top: -5px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  border: 5px solid transparent;\n  border-top-color: rgba(0, 0, 0, 0.8);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button svg {\n  width: 34px;\n  height: 20px;\n  fill: #ccc;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__codepen {\n  position: absolute;\n  top: 10px;\n  transition: all 0.5s;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand {\n  position: relative;\n  width: 100px;\n  height: 40px;\n  margin: 0;\n  color: #3eaf7c;\n  font-size: 14px;\n  background-color: transparent;\n  border-color: transparent;\n  outline: none;\n  transition: all 0.5s;\n  cursor: pointer;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand::before {\n  content: \"\";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 0;\n  height: 0;\n  border-top: 6px solid #ccc;\n  border-right: 6px solid transparent;\n  border-left: 6px solid transparent;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n}\n");var qo={jsLib:[],cssLib:[],jsfiddle:!0,codepen:!0,codepenLayout:"left",codepenJsProcessor:"babel",codepenEditors:"101",horizontal:!1,vue:"https://cdn.jsdelivr.net/npm/vue/dist/vue.min.js",react:"https://cdn.jsdelivr.net/npm/react/umd/react.production.min.js",reactDOM:"https://cdn.jsdelivr.net/npm/react-dom/umd/react-dom.production.min.js"},Po={},Ao=function(t){return'<div id="app">\n'.concat(t,"\n</div>")},jo=function(t){return window.$VUEPRESS_DEMO_BLOCK&&void 0!==window.$VUEPRESS_DEMO_BLOCK[t]?window.$VUEPRESS_DEMO_BLOCK[t]:qo[t]},Oo=function t(e,n,r){var i=document.createElement(e);return n&&Object.keys(n).forEach((function(t){if(t.indexOf("data"))i[t]=n[t];else{var e=t.replace("data","");i.dataset[e]=n[t]}})),r&&r.forEach((function(e){var n=e.tag,r=e.attrs,s=e.children;i.appendChild(t(n,r,s))})),i},zo=function(t,e,n){var r,i=(r=t.querySelectorAll(".".concat(e)),Array.prototype.slice.call(r));return 1!==i.length||n?i:i[0]},Mo=function(t,e){var n,r,i=t.match(/<style>([\s\S]+)<\/style>/),s=t.match(/<template>([\s\S]+)<\/template>/),a=t.match(/<script>([\s\S]+)<\/script>/),o={css:i&&i[1].replace(/^\n|\n$/g,""),html:s&&s[1].replace(/^\n|\n$/g,""),js:a&&a[1].replace(/^\n|\n$/g,""),jsLib:e.jsLib||[],cssLib:e.cssLib||[]};o.htmlTpl=Ao(o.html),o.jsTpl=(n=o.js,r=n.replace(/export\s+default\s*?\{\n*/,"").replace(/\n*\}\s*$/,"").trim(),"new Vue({\n  el: '#app',\n  ".concat(r,"\n})")),o.script=function(t,e){var n=t.split(/export\s+default/),r="(function() {".concat(n[0]," ; return ").concat(n[1],"})()"),i=window.Babel?window.Babel.transform(r,{presets:["es2015"]}).code:r,s=[eval][0](i);return s.template=e,s}(o.js,o.html);var l=jo("vue");return o.jsLib.unshift(l),o},Do=function(t,e){var n,r=t.match(/<style>([\s\S]+)<\/style>/),i=t.match(/<html>([\s\S]+)<\/html>/),s=t.match(/<script>([\s\S]+)<\/script>/),a={css:r&&r[1].replace(/^\n|\n$/g,""),html:i&&i[1].replace(/^\n|\n$/g,""),js:s&&s[1].replace(/^\n|\n$/g,""),jsLib:e.jsLib||[],cssLib:e.cssLib||[]};return a.htmlTpl=a.html,a.jsTpl=a.js,a.script=(n=a.js,window.Babel?window.Babel.transform(n,{presets:["es2015"]}).code:n),a},Ro=function(t){return t=t.replace("export default ","").replace(/App\.__style__(\s*)=(\s*)`([\s\S]*)?`/,""),t+='ReactDOM.render(React.createElement(App), document.getElementById("app"))'};function Bo(){var t=zo(document,"vuepress-plugin-demo-block__wrapper",!0);t.length?t.forEach((function(t){if("true"!==t.dataset.created){t.style.display="block";var e=zo(t,"vuepress-plugin-demo-block__code"),n=zo(t,"vuepress-plugin-demo-block__display"),r=zo(t,"vuepress-plugin-demo-block__footer"),i=zo(n,"vuepress-plugin-demo-block__app"),s=decodeURIComponent(t.dataset.code),a=decodeURIComponent(t.dataset.config),o=decodeURIComponent(t.dataset.type);a=a?JSON.parse(a):{};var l=e.querySelector("div").clientHeight,c="react"===o?function(t,e){var n=(0,window.Babel.transform)(t,{presets:["es2015","react"]}).code,r="(function(exports){var module={};module.exports=exports;".concat(n,";return module.exports.__esModule?module.exports.default:module.exports;})({})"),i=new Function("return ".concat(r))(),s={js:i,css:i.__style__||"",jsLib:e.jsLib||[],cssLib:e.cssLib||[],jsTpl:Ro(t),htmlTpl:Ao("")},a=jo("react"),o=jo("reactDOM");return s.jsLib.unshift(a,o),s}(s,a):"vanilla"===o?Do(s,a):Mo(s,a),p=Oo("button",{className:"".concat("vuepress-plugin-demo-block__expand")});if(r.appendChild(p),p.addEventListener("click",Lo.bind(null,p,l,e,r)),jo("jsfiddle")&&r.appendChild(function(t){var e=t.css,n=t.htmlTpl,r=t.jsTpl,i=t.jsLib,s=t.cssLib,a=i.concat(s).concat(jo("cssLib")).concat(jo("jsLib")).join(",");return Oo("form",{className:"vuepress-plugin-demo-block__jsfiddle",target:"_blank",action:"https://jsfiddle.net/api/post/library/pure/",method:"post"},[{tag:"input",attrs:{type:"hidden",name:"css",value:e}},{tag:"input",attrs:{type:"hidden",name:"html",value:n}},{tag:"input",attrs:{type:"hidden",name:"js",value:r}},{tag:"input",attrs:{type:"hidden",name:"panel_js",value:3}},{tag:"input",attrs:{type:"hidden",name:"wrap",value:1}},{tag:"input",attrs:{type:"hidden",name:"resources",value:a}},{tag:"button",attrs:{type:"submit",className:"vuepress-plugin-demo-block__button",innerHTML:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1547088289967" class="icon" style="" viewBox="0 0 1170 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1952" xmlns:xlink="http://www.w3.org/1999/xlink" width="228.515625" height="200"><defs><style type="text/css"></style></defs><path d="M1028.571429 441.142857q63.428571 26.285714 102.571428 83.142857T1170.285714 650.857143q0 93.714286-67.428571 160.285714T940 877.714286q-2.285714 0-6.571429-0.285715t-6-0.285714H232q-97.142857-5.714286-164.571429-71.714286T0 645.142857q0-62.857143 31.428571-116t84-84q-6.857143-22.285714-6.857142-46.857143 0-65.714286 46.857142-112t113.714286-46.285714q54.285714 0 98.285714 33.142857 42.857143-88 127.142858-141.714286t186.571428-53.714285q94.857143 0 174.857143 46T982.571429 248.571429t46.571428 172q0 3.428571-0.285714 10.285714t-0.285714 10.285714zM267.428571 593.142857q0 69.714286 48 110.285714t118.857143 40.571429q78.285714 0 137.142857-56.571429-9.142857-11.428571-27.142857-32.285714T519.428571 626.285714q-38.285714 37.142857-82.285714 37.142857-31.428571 0-53.428571-19.142857T361.714286 594.285714q0-30.285714 22-49.714285t52.285714-19.428572q25.142857 0 48.285714 12t41.714286 31.428572 37.142857 42.857142 39.428572 46.857143 44 42.857143 55.428571 31.428572 69.428571 12q69.142857 0 116.857143-40.857143T936 594.857143q0-69.142857-48-109.714286t-118.285714-40.571428q-81.714286 0-137.714286 55.428571l53.142857 61.714286q37.714286-36.571429 81.142857-36.571429 29.714286 0 52.571429 18.857143t22.857143 48q0 32.571429-21.142857 52.285714t-53.714286 19.714286q-24.571429 0-47.142857-12t-41.142857-31.428571-37.428572-42.857143-39.714286-46.857143-44.285714-42.857143-55.142857-31.428571T434.285714 444.571429q-69.714286 0-118.285714 40.285714T267.428571 593.142857z" p-id="1953"></path></svg>',datatip:"JSFiddle"}}])}(c)),jo("codepen")&&r.appendChild(function(t){var e=t.css,n=t.htmlTpl,r=t.jsTpl,i=t.jsLib,s=t.cssLib,a=JSON.stringify({css:e,html:n,js:r,js_external:i.concat(jo("jsLib")).join(";"),css_external:s.concat(jo("cssLib")).join(";"),layout:jo("codepenLayout"),js_pre_processor:jo("codepenJsProcessor"),editors:jo("codepenEditors")});return Oo("form",{className:"vuepress-plugin-demo-block__codepen",target:"_blank",action:"https://codepen.io/pen/define",method:"post"},[{tag:"input",attrs:{type:"hidden",name:"data",value:a}},{tag:"button",attrs:{type:"submit",innerHTML:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1547088271207" class="icon" style="" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1737" xmlns:xlink="http://www.w3.org/1999/xlink" width="200" height="200"><defs><style type="text/css"></style></defs><path d="M123.428571 668l344.571429 229.714286v-205.142857L277.142857 565.142857z m-35.428571-82.285714l110.285714-73.714286-110.285714-73.714286v147.428572z m468 312l344.571429-229.714286-153.714286-102.857143-190.857143 127.428572v205.142857z m-44-281.714286l155.428571-104-155.428571-104-155.428571 104zM277.142857 458.857143l190.857143-127.428572V126.285714L123.428571 356z m548.571429 53.142857l110.285714 73.714286V438.285714z m-78.857143-53.142857l153.714286-102.857143-344.571429-229.714286v205.142857z m277.142857-102.857143v312q0 23.428571-19.428571 36.571429l-468 312q-12 7.428571-24.571429 7.428571t-24.571429-7.428571L19.428571 704.571429q-19.428571-13.142857-19.428571-36.571429V356q0-23.428571 19.428571-36.571429L487.428571 7.428571q12-7.428571 24.571429-7.428571t24.571429 7.428571l468 312q19.428571 13.142857 19.428571 36.571429z" p-id="1738"></path></svg>',className:"vuepress-plugin-demo-block__button",datatip:"Codepen"}}])}(c)),void 0!==a.horizontal?a.horizontal:jo("horizontal")){t.classList.add("vuepress-plugin-demo-block__horizontal");var u=e.firstChild.cloneNode(!0);u.classList.add("vuepress-plugin-demo-block__h_code"),n.appendChild(u)}if(c.css&&function(t){if(!Po[t]){var e=Oo("style",{innerHTML:t});document.body.appendChild(e),Po[t]=!0}}(c.css),"react"===o)ReactDOM.render(React.createElement(c.js),i);else if("vue"===o){var d=(new(Vue.extend(c.script))).$mount();i.appendChild(d.$el)}else"vanilla"===o&&(i.innerHTML=c.html,new Function("return (function(){".concat(c.script,"})()"))());t.dataset.created="true"}})):setTimeout((function(t){Bo()}),300)}function Lo(t,e,n,r){var i="1"!==t.dataset.isExpand;n.style.height=i?"".concat(e,"px"):0,i?r.classList.add("vuepress-plugin-demo-block__show-link"):r.classList.remove("vuepress-plugin-demo-block__show-link"),t.dataset.isExpand=i?"1":"0"}var Uo={mounted:function(){window.$VUEPRESS_DEMO_BLOCK={jsfiddle:!1,codepen:!0,horizontal:!1},Bo()},updated:function(){Bo()}},No="auto",Fo="zoom-in",Ho="zoom-out",$o="grab",Vo="move";function Go(t,e,n){var r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],i={passive:!1};r?t.addEventListener(e,n,i):t.removeEventListener(e,n,i)}function Wo(t,e){if(t){var n=new Image;n.onload=function(){e&&e(n)},n.src=t}}function Ko(t){return t.dataset.original?t.dataset.original:"A"===t.parentNode.tagName?t.parentNode.getAttribute("href"):null}function Qo(t,e,n){!function(t){var e=Yo,n=Xo;if(t.transition){var r=t.transition;delete t.transition,t[e]=r}if(t.transform){var i=t.transform;delete t.transform,t[n]=i}}(e);var r=t.style,i={};for(var s in e)n&&(i[s]=r[s]||""),r[s]=e[s];return i}var Yo="transition",Xo="transform",Zo="transform",Jo="transitionend";var tl=function(){},el={enableGrab:!0,preloadImage:!1,closeOnWindowResize:!0,transitionDuration:.4,transitionTimingFunction:"cubic-bezier(0.4, 0, 0, 1)",bgColor:"rgb(255, 255, 255)",bgOpacity:1,scaleBase:1,scaleExtra:.5,scrollThreshold:40,zIndex:998,customSize:null,onOpen:tl,onClose:tl,onGrab:tl,onMove:tl,onRelease:tl,onBeforeOpen:tl,onBeforeClose:tl,onBeforeGrab:tl,onBeforeRelease:tl,onImageLoading:tl,onImageLoaded:tl},nl={init:function(t){var e,n;e=this,n=t,Object.getOwnPropertyNames(Object.getPrototypeOf(e)).forEach((function(t){e[t]=e[t].bind(n)}))},click:function(t){if(t.preventDefault(),il(t))return window.open(this.target.srcOriginal||t.currentTarget.src,"_blank");this.shown?this.released?this.close():this.release():this.open(t.currentTarget)},scroll:function(){var t=document.documentElement||document.body.parentNode||document.body,e=window.pageXOffset||t.scrollLeft,n=window.pageYOffset||t.scrollTop;null===this.lastScrollPosition&&(this.lastScrollPosition={x:e,y:n});var r=this.lastScrollPosition.x-e,i=this.lastScrollPosition.y-n,s=this.options.scrollThreshold;(Math.abs(i)>=s||Math.abs(r)>=s)&&(this.lastScrollPosition=null,this.close())},keydown:function(t){(function(t){return"Escape"===(t.key||t.code)||27===t.keyCode})(t)&&(this.released?this.close():this.release(this.close))},mousedown:function(t){if(rl(t)&&!il(t)){t.preventDefault();var e=t.clientX,n=t.clientY;this.pressTimer=setTimeout(function(){this.grab(e,n)}.bind(this),200)}},mousemove:function(t){this.released||this.move(t.clientX,t.clientY)},mouseup:function(t){rl(t)&&!il(t)&&(clearTimeout(this.pressTimer),this.released?this.close():this.release())},touchstart:function(t){t.preventDefault();var e=t.touches[0],n=e.clientX,r=e.clientY;this.pressTimer=setTimeout(function(){this.grab(n,r)}.bind(this),200)},touchmove:function(t){if(!this.released){var e=t.touches[0],n=e.clientX,r=e.clientY;this.move(n,r)}},touchend:function(t){(function(t){t.targetTouches.length})(t)||(clearTimeout(this.pressTimer),this.released?this.close():this.release())},clickOverlay:function(){this.close()},resizeWindow:function(){this.close()}};function rl(t){return 0===t.button}function il(t){return t.metaKey||t.ctrlKey}var sl={init:function(t){this.el=document.createElement("div"),this.instance=t,this.parent=document.body,Qo(this.el,{position:"fixed",top:0,left:0,right:0,bottom:0,opacity:0}),this.updateStyle(t.options),Go(this.el,"click",t.handler.clickOverlay.bind(t))},updateStyle:function(t){Qo(this.el,{zIndex:t.zIndex,backgroundColor:t.bgColor,transition:"opacity\n        "+t.transitionDuration+"s\n        "+t.transitionTimingFunction})},insert:function(){this.parent.appendChild(this.el)},remove:function(){this.parent.removeChild(this.el)},fadeIn:function(){this.el.offsetWidth,this.el.style.opacity=this.instance.options.bgOpacity},fadeOut:function(){this.el.style.opacity=0}},al="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ol=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),ll=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},cl={init:function(t,e){this.el=t,this.instance=e,this.srcThumbnail=this.el.getAttribute("src"),this.srcset=this.el.getAttribute("srcset"),this.srcOriginal=Ko(this.el),this.rect=this.el.getBoundingClientRect(),this.translate=null,this.scale=null,this.styleOpen=null,this.styleClose=null},zoomIn:function(){var t=this.instance.options,e=t.zIndex,n=t.enableGrab,r=t.transitionDuration,i=t.transitionTimingFunction;this.translate=this.calculateTranslate(),this.scale=this.calculateScale(),this.styleOpen={position:"relative",zIndex:e+1,cursor:n?$o:Ho,transition:Zo+"\n        "+r+"s\n        "+i,transform:"translate3d("+this.translate.x+"px, "+this.translate.y+"px, 0px)\n        scale("+this.scale.x+","+this.scale.y+")",height:this.rect.height+"px",width:this.rect.width+"px"},this.el.offsetWidth,this.styleClose=Qo(this.el,this.styleOpen,!0)},zoomOut:function(){this.el.offsetWidth,Qo(this.el,{transform:"none"})},grab:function(t,e,n){var r=pl(),i=r.x-t,s=r.y-e;Qo(this.el,{cursor:Vo,transform:"translate3d(\n        "+(this.translate.x+i)+"px, "+(this.translate.y+s)+"px, 0px)\n        scale("+(this.scale.x+n)+","+(this.scale.y+n)+")"})},move:function(t,e,n){var r=pl(),i=r.x-t,s=r.y-e;Qo(this.el,{transition:Zo,transform:"translate3d(\n        "+(this.translate.x+i)+"px, "+(this.translate.y+s)+"px, 0px)\n        scale("+(this.scale.x+n)+","+(this.scale.y+n)+")"})},restoreCloseStyle:function(){Qo(this.el,this.styleClose)},restoreOpenStyle:function(){Qo(this.el,this.styleOpen)},upgradeSource:function(){if(this.srcOriginal){var t=this.el.parentNode;this.srcset&&this.el.removeAttribute("srcset");var e=this.el.cloneNode(!1);e.setAttribute("src",this.srcOriginal),e.style.position="fixed",e.style.visibility="hidden",t.appendChild(e),setTimeout(function(){this.el.setAttribute("src",this.srcOriginal),t.removeChild(e)}.bind(this),50)}},downgradeSource:function(){this.srcOriginal&&(this.srcset&&this.el.setAttribute("srcset",this.srcset),this.el.setAttribute("src",this.srcThumbnail))},calculateTranslate:function(){var t=pl(),e=this.rect.left+this.rect.width/2,n=this.rect.top+this.rect.height/2;return{x:t.x-e,y:t.y-n}},calculateScale:function(){var t=this.el.dataset,e=t.zoomingHeight,n=t.zoomingWidth,r=this.instance.options,i=r.customSize,s=r.scaleBase;if(!i&&e&&n)return{x:n/this.rect.width,y:e/this.rect.height};if(i&&"object"===(void 0===i?"undefined":al(i)))return{x:i.width/this.rect.width,y:i.height/this.rect.height};var a=this.rect.width/2,o=this.rect.height/2,l=pl(),c={x:l.x-a,y:l.y-o},p=c.x/a,u=c.y/o,d=s+Math.min(p,u);if(i&&"string"==typeof i){var m=n||this.el.naturalWidth,g=e||this.el.naturalHeight,h=parseFloat(i)*m/(100*this.rect.width),f=parseFloat(i)*g/(100*this.rect.height);if(d>h||d>f)return{x:h,y:f}}return{x:d,y:d}}};function pl(){var t=document.documentElement;return{x:Math.min(t.clientWidth,window.innerWidth)/2,y:Math.min(t.clientHeight,window.innerHeight)/2}}function ul(t,e,n){["mousedown","mousemove","mouseup","touchstart","touchmove","touchend"].forEach((function(r){Go(t,r,e[r],n)}))}var dl=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.target=Object.create(cl),this.overlay=Object.create(sl),this.handler=Object.create(nl),this.body=document.body,this.shown=!1,this.lock=!1,this.released=!0,this.lastScrollPosition=null,this.pressTimer=null,this.options=ll({},el,e),this.overlay.init(this),this.handler.init(this)}return ol(t,[{key:"listen",value:function(t){if("string"==typeof t)for(var e=document.querySelectorAll(t),n=e.length;n--;)this.listen(e[n]);else"IMG"===t.tagName&&(t.style.cursor=Fo,Go(t,"click",this.handler.click),this.options.preloadImage&&Wo(Ko(t)));return this}},{key:"config",value:function(t){return t?(ll(this.options,t),this.overlay.updateStyle(this.options),this):this.options}},{key:"open",value:function(t){var e=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.options.onOpen;if(!this.shown&&!this.lock){var r="string"==typeof t?document.querySelector(t):t;if("IMG"===r.tagName){if(this.options.onBeforeOpen(r),this.target.init(r,this),!this.options.preloadImage){var i=this.target.srcOriginal;null!=i&&(this.options.onImageLoading(r),Wo(i,this.options.onImageLoaded))}this.shown=!0,this.lock=!0,this.target.zoomIn(),this.overlay.insert(),this.overlay.fadeIn(),Go(document,"scroll",this.handler.scroll),Go(document,"keydown",this.handler.keydown),this.options.closeOnWindowResize&&Go(window,"resize",this.handler.resizeWindow);var s=function t(){Go(r,Jo,t,!1),e.lock=!1,e.target.upgradeSource(),e.options.enableGrab&&ul(document,e.handler,!0),n(r)};return Go(r,Jo,s),this}}}},{key:"close",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onClose;if(this.shown&&!this.lock){var n=this.target.el;this.options.onBeforeClose(n),this.lock=!0,this.body.style.cursor=No,this.overlay.fadeOut(),this.target.zoomOut(),Go(document,"scroll",this.handler.scroll,!1),Go(document,"keydown",this.handler.keydown,!1),this.options.closeOnWindowResize&&Go(window,"resize",this.handler.resizeWindow,!1);var r=function r(){Go(n,Jo,r,!1),t.shown=!1,t.lock=!1,t.target.downgradeSource(),t.options.enableGrab&&ul(document,t.handler,!1),t.target.restoreCloseStyle(),t.overlay.remove(),e(n)};return Go(n,Jo,r),this}}},{key:"grab",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onGrab;if(this.shown&&!this.lock){var i=this.target.el;this.options.onBeforeGrab(i),this.released=!1,this.target.grab(t,e,n);var s=function t(){Go(i,Jo,t,!1),r(i)};return Go(i,Jo,s),this}}},{key:"move",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onMove;if(this.shown&&!this.lock){this.released=!1,this.body.style.cursor=Vo,this.target.move(t,e,n);var i=this.target.el,s=function t(){Go(i,Jo,t,!1),r(i)};return Go(i,Jo,s),this}}},{key:"release",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onRelease;if(this.shown&&!this.lock){var n=this.target.el;this.options.onBeforeRelease(n),this.lock=!0,this.body.style.cursor=No,this.target.restoreOpenStyle();var r=function r(){Go(n,Jo,r,!1),t.lock=!1,t.released=!0,e(n)};return Go(n,Jo,r),this}}}]),t}();const ml=JSON.parse('{"bgColor":"rgba(0,0,0,0.6)"}'),gl=Number("500");class hl{constructor(){this.instance=new dl(ml)}update(t=".theme-vdoing-content img:not(.no-zoom)"){"undefined"!=typeof window&&this.instance.listen(t)}updateDelay(t=".theme-vdoing-content img:not(.no-zoom)",e=gl){setTimeout(()=>this.update(t),e)}}var fl=[vo,Eo,_o,Io,Uo,{watch:{"$page.path"(){void 0!==this.$vuepress.zooming&&this.$vuepress.zooming.updateDelay()}},mounted(){this.$vuepress.zooming=new hl,this.$vuepress.zooming.updateDelay()}}],vl={name:"GlobalLayout",computed:{layout(){const t=this.getLayout();return uo("layout",t),Wn.component(t)}},methods:{getLayout(){if(this.$page.path){const t=this.$page.frontmatter.layout;return t&&(this.$vuepress.getLayoutAsyncComponent(t)||this.$vuepress.getVueComponent(t))?t:"Layout"}return"NotFound"}}},bl=n(15),yl=Object(bl.a)(vl,(function(){return(0,this._self._c)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(t,e,n){switch(e){case"components":t[e]||(t[e]={}),Object.assign(t[e],n);break;case"mixins":t[e]||(t[e]=[]),t[e].push(...n);break;default:throw new Error("Unknown option name.")}}(yl,"mixins",fl);const xl=[{name:"v-a34d6c24",path:"/pages/zj00/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-a34d6c24").then(n)}},{path:"/pages/zj00/index.html",redirect:"/pages/zj00/"},{path:"/01.指南/00.开发手册/00.组件【ai】.html",redirect:"/pages/zj00/"},{name:"v-125b7ba4",path:"/pages/zj02/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-125b7ba4").then(n)}},{path:"/pages/zj02/index.html",redirect:"/pages/zj02/"},{path:"/01.指南/00.开发手册/02.组件【banner】.html",redirect:"/pages/zj02/"},{name:"v-346ce496",path:"/pages/zj01/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-346ce496").then(n)}},{path:"/pages/zj01/index.html",redirect:"/pages/zj01/"},{path:"/01.指南/00.开发手册/01.组件【algorithm】.html",redirect:"/pages/zj01/"},{name:"v-90a17964",path:"/pages/zj04/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-90a17964").then(n)}},{path:"/pages/zj04/index.html",redirect:"/pages/zj04/"},{path:"/01.指南/00.开发手册/04.组件【core】.html",redirect:"/pages/zj04/"},{name:"v-1551ecb0",path:"/pages/zj05/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-1551ecb0").then(n)}},{path:"/pages/zj05/index.html",redirect:"/pages/zj05/"},{path:"/01.指南/00.开发手册/05.组件【bom】.html",redirect:"/pages/zj05/"},{name:"v-3a4be74e",path:"/pages/zj06/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-3a4be74e").then(n)}},{path:"/pages/zj06/index.html",redirect:"/pages/zj06/"},{path:"/01.指南/00.开发手册/06.组件【cors】.html",redirect:"/pages/zj06/"},{name:"v-b5e736e4",path:"/pages/zj07/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-b5e736e4").then(n)}},{path:"/pages/zj07/index.html",redirect:"/pages/zj07/"},{path:"/01.指南/00.开发手册/07.组件【domain】.html",redirect:"/pages/zj07/"},{name:"v-ab6c9064",path:"/pages/zj08/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-ab6c9064").then(n)}},{path:"/pages/zj08/index.html",redirect:"/pages/zj08/"},{path:"/01.指南/00.开发手册/08.组件【crypto】.html",redirect:"/pages/zj08/"},{name:"v-2bbc8e24",path:"/pages/zj09/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-2bbc8e24").then(n)}},{path:"/pages/zj09/index.html",redirect:"/pages/zj09/"},{path:"/01.指南/00.开发手册/09.组件【data-cache】.html",redirect:"/pages/zj09/"},{name:"v-ac9fb018",path:"/pages/zj11/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-ac9fb018").then(n)}},{path:"/pages/zj11/index.html",redirect:"/pages/zj11/"},{path:"/01.指南/00.开发手册/11.组件【elasticsearch】.html",redirect:"/pages/zj11/"},{name:"v-6846b5e6",path:"/pages/zj12/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-6846b5e6").then(n)}},{path:"/pages/zj12/index.html",redirect:"/pages/zj12/"},{path:"/01.指南/00.开发手册/12.组件【excel】.html",redirect:"/pages/zj12/"},{name:"v-63861764",path:"/pages/zj16/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-63861764").then(n)}},{path:"/pages/zj16/index.html",redirect:"/pages/zj16/"},{path:"/01.指南/00.开发手册/16.组件【i18n】.html",redirect:"/pages/zj16/"},{name:"v-63ca04e4",path:"/pages/zj17/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-63ca04e4").then(n)}},{path:"/pages/zj17/index.html",redirect:"/pages/zj17/"},{path:"/01.指南/00.开发手册/17.组件【idempotent】.html",redirect:"/pages/zj17/"},{name:"v-19630a64",path:"/pages/zj18/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-19630a64").then(n)}},{path:"/pages/zj18/index.html",redirect:"/pages/zj18/"},{path:"/01.指南/00.开发手册/18.组件【influxdb】.html",redirect:"/pages/zj18/"},{name:"v-309d7d14",path:"/pages/zj19/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-309d7d14").then(n)}},{path:"/pages/zj19/index.html",redirect:"/pages/zj19/"},{path:"/01.指南/00.开发手册/19.组件【kafka】.html",redirect:"/pages/zj19/"},{name:"v-118fa3f4",path:"/pages/zj20/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-118fa3f4").then(n)}},{path:"/pages/zj20/index.html",redirect:"/pages/zj20/"},{path:"/01.指南/00.开发手册/20.组件【log】.html",redirect:"/pages/zj20/"},{name:"v-072e52ae",path:"/pages/zj21/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-072e52ae").then(n)}},{path:"/pages/zj21/index.html",redirect:"/pages/zj21/"},{path:"/01.指南/00.开发手册/21.组件【lock】.html",redirect:"/pages/zj21/"},{name:"v-97ba9864",path:"/pages/zj22/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-97ba9864").then(n)}},{path:"/pages/zj22/index.html",redirect:"/pages/zj22/"},{path:"/01.指南/00.开发手册/22.组件【mail】.html",redirect:"/pages/zj22/"},{name:"v-454936ce",path:"/pages/zj23/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-454936ce").then(n)}},{path:"/pages/zj23/index.html",redirect:"/pages/zj23/"},{path:"/01.指南/00.开发手册/23.组件【log4j2】.html",redirect:"/pages/zj23/"},{name:"v-40268b24",path:"/pages/zj26/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-40268b24").then(n)}},{path:"/pages/zj26/index.html",redirect:"/pages/zj26/"},{path:"/01.指南/00.开发手册/26.组件【mybatis-plus】.html",redirect:"/pages/zj26/"},{name:"v-14357e50",path:"/pages/zj27/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-14357e50").then(n)}},{path:"/pages/zj27/index.html",redirect:"/pages/zj27/"},{path:"/01.指南/00.开发手册/27.组件【nacos】.html",redirect:"/pages/zj27/"},{name:"v-2036b1a4",path:"/pages/zj24/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-2036b1a4").then(n)}},{path:"/pages/zj24/index.html",redirect:"/pages/zj24/"},{path:"/01.指南/00.开发手册/24.组件【mqtt】.html",redirect:"/pages/zj24/"},{name:"v-411d1ab2",path:"/pages/zj28/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-411d1ab2").then(n)}},{path:"/pages/zj28/index.html",redirect:"/pages/zj28/"},{path:"/01.指南/00.开发手册/28.组件【netty】.html",redirect:"/pages/zj28/"},{name:"v-68b48522",path:"/pages/zj29/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-68b48522").then(n)}},{path:"/pages/zj29/index.html",redirect:"/pages/zj29/"},{path:"/01.指南/00.开发手册/29.组件【openapi-doc】.html",redirect:"/pages/zj29/"},{name:"v-bcf44548",path:"/pages/zj31/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-bcf44548").then(n)}},{path:"/pages/zj31/index.html",redirect:"/pages/zj31/"},{path:"/01.指南/00.开发手册/31.组件【oss】.html",redirect:"/pages/zj31/"},{name:"v-2e346c4e",path:"/pages/zj32/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-2e346c4e").then(n)}},{path:"/pages/zj32/index.html",redirect:"/pages/zj32/"},{path:"/01.指南/00.开发手册/32.组件【prometheus】.html",redirect:"/pages/zj32/"},{name:"v-3e6b39ee",path:"/pages/zj34/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-3e6b39ee").then(n)}},{path:"/pages/zj34/index.html",redirect:"/pages/zj34/"},{path:"/01.指南/00.开发手册/34.组件【rate-limiter】.html",redirect:"/pages/zj34/"},{name:"v-73e6eb0c",path:"/pages/zj35/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-73e6eb0c").then(n)}},{path:"/pages/zj35/index.html",redirect:"/pages/zj35/"},{path:"/01.指南/00.开发手册/35.组件【reactor】.html",redirect:"/pages/zj35/"},{name:"v-66dc0cea",path:"/pages/zj36/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-66dc0cea").then(n)}},{path:"/pages/zj36/index.html",redirect:"/pages/zj36/"},{path:"/01.指南/00.开发手册/36.组件【redis】.html",redirect:"/pages/zj36/"},{name:"v-b2ffec24",path:"/pages/zj40/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-b2ffec24").then(n)}},{path:"/pages/zj40/index.html",redirect:"/pages/zj40/"},{path:"/01.指南/00.开发手册/40.组件【security】.html",redirect:"/pages/zj40/"},{name:"v-56303aa8",path:"/pages/zj41/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-56303aa8").then(n)}},{path:"/pages/zj41/index.html",redirect:"/pages/zj41/"},{path:"/01.指南/00.开发手册/41.组件【sensitive】.html",redirect:"/pages/zj41/"},{name:"v-de508324",path:"/pages/zj43/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-de508324").then(n)}},{path:"/pages/zj43/index.html",redirect:"/pages/zj43/"},{path:"/01.指南/00.开发手册/43.组件【sms】.html",redirect:"/pages/zj43/"},{name:"v-675a222c",path:"/pages/zj44/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-675a222c").then(n)}},{path:"/pages/zj44/index.html",redirect:"/pages/zj44/"},{path:"/01.指南/00.开发手册/44.组件【snail-job】.html",redirect:"/pages/zj44/"},{name:"v-730f3da4",path:"/pages/zj39/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-730f3da4").then(n)}},{path:"/pages/zj39/index.html",redirect:"/pages/zj39/"},{path:"/01.指南/00.开发手册/39.组件【secret】.html",redirect:"/pages/zj39/"},{name:"v-1a8747e8",path:"/pages/zj48/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-1a8747e8").then(n)}},{path:"/pages/zj48/index.html",redirect:"/pages/zj48/"},{path:"/01.指南/00.开发手册/48.组件【storage】.html",redirect:"/pages/zj48/"},{name:"v-339db564",path:"/pages/zj49/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-339db564").then(n)}},{path:"/pages/zj49/index.html",redirect:"/pages/zj49/"},{path:"/01.指南/00.开发手册/49.组件【tdengine】.html",redirect:"/pages/zj49/"},{name:"v-eb375964",path:"/pages/zj50/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-eb375964").then(n)}},{path:"/pages/zj50/index.html",redirect:"/pages/zj50/"},{path:"/01.指南/00.开发手册/50.组件【tenant】.html",redirect:"/pages/zj50/"},{name:"v-3a036c88",path:"/pages/a2f161/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-3a036c88").then(n)}},{path:"/pages/a2f161/index.html",redirect:"/pages/a2f161/"},{path:"/01.指南/01.环境搭建/00.Centos7安装Mysql 8.0.33.html",redirect:"/pages/a2f161/"},{name:"v-ec7a7eec",path:"/pages/zj52/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-ec7a7eec").then(n)}},{path:"/pages/zj52/index.html",redirect:"/pages/zj52/"},{path:"/01.指南/00.开发手册/52.组件【trace】.html",redirect:"/pages/zj52/"},{name:"v-40a9506e",path:"/pages/zj53/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-40a9506e").then(n)}},{path:"/pages/zj53/index.html",redirect:"/pages/zj53/"},{path:"/01.指南/00.开发手册/53.组件【xss】.html",redirect:"/pages/zj53/"},{name:"v-1a34762e",path:"/pages/zj51/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-1a34762e").then(n)}},{path:"/pages/zj51/index.html",redirect:"/pages/zj51/"},{path:"/01.指南/00.开发手册/51.组件【test】.html",redirect:"/pages/zj51/"},{name:"v-40cbba76",path:"/pages/90401a/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-40cbba76").then(n)}},{path:"/pages/90401a/index.html",redirect:"/pages/90401a/"},{path:"/01.指南/01.环境搭建/01.Centos7安装Redis 7.0.11.html",redirect:"/pages/90401a/"},{name:"v-9da4f530",path:"/pages/0fb88c/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-9da4f530").then(n)}},{path:"/pages/0fb88c/index.html",redirect:"/pages/0fb88c/"},{path:"/01.指南/01.环境搭建/02.Centos7安装RocketMQ 5.1.1.html",redirect:"/pages/0fb88c/"},{name:"v-03f84d34",path:"/pages/65acfd/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-03f84d34").then(n)}},{path:"/pages/65acfd/index.html",redirect:"/pages/65acfd/"},{path:"/01.指南/01.环境搭建/03.Centos7安装Jdk 17.0.7.html",redirect:"/pages/65acfd/"},{name:"v-6e8179ae",path:"/pages/552b64/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-6e8179ae").then(n)}},{path:"/pages/552b64/index.html",redirect:"/pages/552b64/"},{path:"/01.指南/01.环境搭建/05.Docker安装RabbitMQ 3.12.2.html",redirect:"/pages/552b64/"},{name:"v-19ba89b4",path:"/pages/65acff/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-19ba89b4").then(n)}},{path:"/pages/65acff/index.html",redirect:"/pages/65acff/"},{path:"/01.指南/01.环境搭建/04.Centos7安装Docker 23.0.6.html",redirect:"/pages/65acff/"},{name:"v-48fcfd0c",path:"/pages/d715cf/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-48fcfd0c").then(n)}},{path:"/pages/d715cf/index.html",redirect:"/pages/d715cf/"},{path:"/01.指南/01.环境搭建/06.Centos7安装Elasticsearch 8.6.2.html",redirect:"/pages/d715cf/"},{name:"v-299e7afb",path:"/pages/fade19/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-299e7afb").then(n)}},{path:"/pages/fade19/index.html",redirect:"/pages/fade19/"},{path:"/01.指南/01.环境搭建/08.Ubuntu20.04安装Docker.html",redirect:"/pages/fade19/"},{name:"v-d203bddc",path:"/pages/d0b936/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-d203bddc").then(n)}},{path:"/pages/d0b936/index.html",redirect:"/pages/d0b936/"},{path:"/01.指南/01.环境搭建/09.Ubuntu20.04忘记密码或指纹错误.html",redirect:"/pages/d0b936/"},{name:"v-e6ac8fd2",path:"/pages/76bfa2/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-e6ac8fd2").then(n)}},{path:"/pages/76bfa2/index.html",redirect:"/pages/76bfa2/"},{path:"/01.指南/02.常用命令/00.Centos7常用命令.html",redirect:"/pages/76bfa2/"},{name:"v-01c05974",path:"/pages/d715cb/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-01c05974").then(n)}},{path:"/pages/d715cb/index.html",redirect:"/pages/d715cb/"},{path:"/01.指南/01.环境搭建/07.Docker安装Postgresql 16.1.html",redirect:"/pages/d715cb/"},{name:"v-280a66fa",path:"/pages/10bfa7/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-280a66fa").then(n)}},{path:"/pages/10bfa7/index.html",redirect:"/pages/10bfa7/"},{path:"/01.指南/03.快速上手/01.项目启动【dev环境】.html",redirect:"/pages/10bfa7/"},{name:"v-6fdf502e",path:"/pages/9fade8/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-6fdf502e").then(n)}},{path:"/pages/9fade8/index.html",redirect:"/pages/9fade8/"},{path:"/01.指南/03.快速上手/02.项目启动【test环境】.html",redirect:"/pages/9fade8/"},{name:"v-435b25ee",path:"/pages/7be29e/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-435b25ee").then(n)}},{path:"/pages/7be29e/index.html",redirect:"/pages/7be29e/"},{path:"/01.指南/03.快速上手/03.项目启动【prod环境】.html",redirect:"/pages/7be29e/"},{name:"v-0eb5a24e",path:"/pages/b04951/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-0eb5a24e").then(n)}},{path:"/pages/b04951/index.html",redirect:"/pages/b04951/"},{path:"/01.指南/03.快速上手/04.更新日志.html",redirect:"/pages/b04951/"},{name:"v-93428452",path:"/pages/2f475f/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-93428452").then(n)}},{path:"/pages/2f475f/index.html",redirect:"/pages/2f475f/"},{path:"/01.指南/02.常用命令/01.Docker常用命令.html",redirect:"/pages/2f475f/"},{name:"v-13b5f3a2",path:"/pages/a5d759/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-13b5f3a2").then(n)}},{path:"/pages/a5d759/index.html",redirect:"/pages/a5d759/"},{path:"/01.指南/04.前端指南/00.前端启动.html",redirect:"/pages/a5d759/"},{name:"v-f03d785e",path:"/pages/59afe2/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-f03d785e").then(n)}},{path:"/pages/59afe2/index.html",redirect:"/pages/59afe2/"},{path:"/01.指南/05.后端指南/00.COLA代码规范.html",redirect:"/pages/59afe2/"},{name:"v-7bde6c00",path:"/pages/10bfa8/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-7bde6c00").then(n)}},{path:"/pages/10bfa8/index.html",redirect:"/pages/10bfa8/"},{path:"/01.指南/05.后端指南/01.SSL证书.html",redirect:"/pages/10bfa8/"},{name:"v-3ab055e8",path:"/pages/10bfa9/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-3ab055e8").then(n)}},{path:"/pages/10bfa9/index.html",redirect:"/pages/10bfa9/"},{path:"/01.指南/05.后端指南/02.一键修改项目模块.html",redirect:"/pages/10bfa9/"},{name:"v-133e2ccb",path:"/pages/1e1e32/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-133e2ccb").then(n)}},{path:"/pages/1e1e32/index.html",redirect:"/pages/1e1e32/"},{path:"/01.指南/05.后端指南/03.一键生成项目骨架.html",redirect:"/pages/1e1e32/"},{name:"v-2cab7970",path:"/pages/77f103/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-2cab7970").then(n)}},{path:"/pages/77f103/index.html",redirect:"/pages/77f103/"},{path:"/01.指南/05.后端指南/04.一键修改项目版本号.html",redirect:"/pages/77f103/"},{name:"v-32104ab3",path:"/pages/843853/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-32104ab3").then(n)}},{path:"/pages/843853/index.html",redirect:"/pages/843853/"},{path:"/01.指南/05.后端指南/05.一键跳过测试用例.html",redirect:"/pages/843853/"},{name:"v-8b2e8a08",path:"/pages/889fdb/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-8b2e8a08").then(n)}},{path:"/pages/889fdb/index.html",redirect:"/pages/889fdb/"},{path:"/01.指南/05.后端指南/06.一键生成后端COLA代码.html",redirect:"/pages/889fdb/"},{name:"v-61d09452",path:"/pages/cf6984/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-61d09452").then(n)}},{path:"/pages/cf6984/index.html",redirect:"/pages/cf6984/"},{path:"/01.指南/05.后端指南/08.一键检查代码规范.html",redirect:"/pages/cf6984/"},{name:"v-7879551d",path:"/pages/4bce44/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-7879551d").then(n)}},{path:"/pages/4bce44/index.html",redirect:"/pages/4bce44/"},{path:"/01.指南/05.后端指南/09.动态路由.html",redirect:"/pages/4bce44/"},{name:"v-6d08b50b",path:"/pages/fe2754/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-6d08b50b").then(n)}},{path:"/pages/fe2754/index.html",redirect:"/pages/fe2754/"},{path:"/01.指南/05.后端指南/07.分布式链路跟踪之ELK日志.html",redirect:"/pages/fe2754/"},{name:"v-06c7d395",path:"/pages/766b36/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-06c7d395").then(n)}},{path:"/pages/766b36/index.html",redirect:"/pages/766b36/"},{path:"/01.指南/05.后端指南/10.OAuth2.1流程.html",redirect:"/pages/766b36/"},{name:"v-0781bd81",path:"/pages/61389d/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-0781bd81").then(n)}},{path:"/pages/61389d/index.html",redirect:"/pages/61389d/"},{path:"/01.指南/06.项目部署/00.项目部署之镜像打包与推送.html",redirect:"/pages/61389d/"},{name:"v-765b100f",path:"/pages/643da2/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-765b100f").then(n)}},{path:"/pages/643da2/index.html",redirect:"/pages/643da2/"},{path:"/01.指南/07.其他/00.Java如何快速转Go.html",redirect:"/pages/643da2/"},{name:"v-607a078c",path:"/pages/52f121/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-607a078c").then(n)}},{path:"/pages/52f121/index.html",redirect:"/pages/52f121/"},{path:"/01.指南/07.其他/02.Vue快速开发Api.html",redirect:"/pages/52f121/"},{name:"v-dfdfb98c",path:"/pages/3de3af/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-dfdfb98c").then(n)}},{path:"/pages/3de3af/index.html",redirect:"/pages/3de3af/"},{path:"/01.指南/07.其他/03.React快速开发Api.html",redirect:"/pages/3de3af/"},{name:"v-156fc168",path:"/pages/330c83/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-156fc168").then(n)}},{path:"/pages/330c83/index.html",redirect:"/pages/330c83/"},{path:"/01.指南/08.文章/00.物联网之对接MQTT最佳实践.html",redirect:"/pages/330c83/"},{name:"v-6f30d314",path:"/pages/b4322a/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-6f30d314").then(n)}},{path:"/pages/b4322a/index.html",redirect:"/pages/b4322a/"},{path:"/01.指南/07.其他/01.Go快速开发API.html",redirect:"/pages/b4322a/"},{name:"v-6d691196",path:"/pages/6da49d/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-6d691196").then(n)}},{path:"/pages/6da49d/index.html",redirect:"/pages/6da49d/"},{path:"/01.指南/08.文章/03.物联网之使用Vertx实现TCP最佳实践【响应式】.html",redirect:"/pages/6da49d/"},{name:"v-0006a629",path:"/pages/0aa18d/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-0006a629").then(n)}},{path:"/pages/0aa18d/index.html",redirect:"/pages/0aa18d/"},{path:"/01.指南/08.文章/02.vue3+lime-echart各种图表使用【懒人专用，建议收藏】.html",redirect:"/pages/0aa18d/"},{name:"v-37a6751e",path:"/pages/3e4283/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-37a6751e").then(n)}},{path:"/pages/3e4283/index.html",redirect:"/pages/3e4283/"},{path:"/01.指南/08.文章/05.物联网之使用Vertx实现UDP最佳实践【响应式】.html",redirect:"/pages/3e4283/"},{name:"v-36f5928f",path:"/pages/ca4ed7/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-36f5928f").then(n)}},{path:"/pages/ca4ed7/index.html",redirect:"/pages/ca4ed7/"},{path:"/01.指南/08.文章/01.物联网之使用Vertx实现MQTT-Server最佳实践【响应式】.html",redirect:"/pages/ca4ed7/"},{name:"v-013a7629",path:"/pages/4b37fa/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-013a7629").then(n)}},{path:"/pages/4b37fa/index.html",redirect:"/pages/4b37fa/"},{path:"/01.指南/08.文章/06.Spring Cloud Gateway实现分布式限流和熔断降级.html",redirect:"/pages/4b37fa/"},{name:"v-66672d47",path:"/pages/04e661/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-66672d47").then(n)}},{path:"/pages/04e661/index.html",redirect:"/pages/04e661/"},{path:"/01.指南/08.文章/04.物联网之使用Vertx实现HTTPWebSocket最佳实践.html",redirect:"/pages/04e661/"},{name:"v-7cffb40a",path:"/pages/9d20f6/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-7cffb40a").then(n)}},{path:"/pages/9d20f6/index.html",redirect:"/pages/9d20f6/"},{path:"/01.指南/08.文章/07.物联网之常见网络配置.html",redirect:"/pages/9d20f6/"},{name:"v-a1c8b71e",path:"/pages/a438ae/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-a1c8b71e").then(n)}},{path:"/pages/a438ae/index.html",redirect:"/pages/a438ae/"},{path:"/01.指南/09.推荐/00.IntelliJ IDEA插件推荐.html",redirect:"/pages/a438ae/"},{name:"v-7b392dc2",path:"/pages/a438ap/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-7b392dc2").then(n)}},{path:"/pages/a438ap/index.html",redirect:"/pages/a438ap/"},{path:"/01.指南/10.活动/00.KCloud-Platform-IoT 开源三周年快乐&父亲节快乐.html",redirect:"/pages/a438ap/"},{name:"v-36503df2",path:"/pages/1b12ed/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-36503df2").then(n)}},{path:"/pages/1b12ed/index.html",redirect:"/pages/1b12ed/"},{path:"/02.赞助/00.赞助.html",redirect:"/pages/1b12ed/"},{name:"v-18bfd9b1",path:"/pages/623577/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-18bfd9b1").then(n)}},{path:"/pages/623577/index.html",redirect:"/pages/623577/"},{path:"/03.感悟/01.读后感/00.读《强者，都是含泪奔跑的人》读后感.html",redirect:"/pages/623577/"},{name:"v-3a2c0ee4",path:"/pages/623578/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-3a2c0ee4").then(n)}},{path:"/pages/623578/index.html",redirect:"/pages/623578/"},{path:"/03.感悟/02.修行/00.修身_养生_情感.html",redirect:"/pages/623578/"},{name:"v-1454054f",path:"/pages/b5ee4c/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-1454054f").then(n)}},{path:"/pages/b5ee4c/index.html",redirect:"/pages/b5ee4c/"},{path:"/03.感悟/03.觉悟/00.觉悟日记（一）.html",redirect:"/pages/b5ee4c/"},{name:"v-a8d5efd0",path:"/pages/85233a/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-a8d5efd0").then(n)}},{path:"/pages/85233a/index.html",redirect:"/pages/85233a/"},{path:"/04.摘抄/01.儒学/00.儒学摘抄（一）.html",redirect:"/pages/85233a/"},{name:"v-33d07a2c",path:"/pages/59b0b4/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-33d07a2c").then(n)}},{path:"/pages/59b0b4/index.html",redirect:"/pages/59b0b4/"},{path:"/04.摘抄/02.禅学/00.禅语摘抄（一）.html",redirect:"/pages/59b0b4/"},{name:"v-9deea25c",path:"/pages/e03540/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-9deea25c").then(n)}},{path:"/pages/e03540/index.html",redirect:"/pages/e03540/"},{path:"/04.摘抄/04.道法/00.道法摘抄（一）.html",redirect:"/pages/e03540/"},{name:"v-649ecfa8",path:"/pages/e03541/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-649ecfa8").then(n)}},{path:"/pages/e03541/index.html",redirect:"/pages/e03541/"},{path:"/04.摘抄/05.养生/00.养生摘抄（一）.html",redirect:"/pages/e03541/"},{name:"v-f4a666ec",path:"/pages/f8adf5/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-f4a666ec").then(n)}},{path:"/pages/f8adf5/index.html",redirect:"/pages/f8adf5/"},{path:"/04.摘抄/03.诗词/00.诗词摘抄（一）.html",redirect:"/pages/f8adf5/"},{name:"v-0a41a4fc",path:"/archives/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-0a41a4fc").then(n)}},{path:"/archives/index.html",redirect:"/archives/"},{path:"/@pages/archivesPage.html",redirect:"/archives/"},{name:"v-5ea34d4a",path:"/",component:yl,beforeEnter:(t,e,n)=>{po("Layout","v-5ea34d4a").then(n)}},{path:"/index.html",redirect:"/"},{path:"*",component:yl}],kl={title:"KCloud-Platform-IoT",description:"一个企业级微服务架构的IoT云平台",base:"/",headTags:[["link",{rel:"icon",href:"/img/favicon.ico"}],["meta",{name:"keywords",content:"vuepress,theme,blog,vdoing"}],["meta",{name:"theme-color",content:"#11a8cd"}]],pages:[{title:"组件【ai】",frontmatter:{title:"组件【ai】",date:"2025-03-11T14:08:08.000Z",permalink:"/pages/zj00/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/00.%E7%BB%84%E4%BB%B6%E3%80%90ai%E3%80%91.html",relativePath:"01.指南/00.开发手册/00.组件【ai】.md",key:"v-a34d6c24",path:"/pages/zj00/",headers:[{level:3,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:46}],headersStr:"使用",content:"小伙伴们，你们好，欢迎来到老寇云平台，这个组件【ai】是用来对设备进行预测性维护的\n\n\n# 使用\n\n1.引入依赖\n\n  <dependencies>\n    <dependency>\n      <groupId>org.laokou</groupId>\n      <artifactId>laokou-common-ai</artifactId>\n    </dependency>\n  </dependencies>\n\n\n这个先放在这里，后面有灵感再写文档\n\n我是老寇，我们下次再见啦！",normalizedContent:"小伙伴们，你们好，欢迎来到老寇云平台，这个组件【ai】是用来对设备进行预测性维护的\n\n\n# 使用\n\n1.引入依赖\n\n  <dependencies>\n    <dependency>\n      <groupid>org.laokou</groupid>\n      <artifactid>laokou-common-ai</artifactid>\n    </dependency>\n  </dependencies>\n\n\n这个先放在这里，后面有灵感再写文档\n\n我是老寇，我们下次再见啦！",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【banner】",frontmatter:{title:"组件【banner】",date:"2025-03-11T14:14:48.000Z",permalink:"/pages/zj02/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/02.%E7%BB%84%E4%BB%B6%E3%80%90banner%E3%80%91.html",relativePath:"01.指南/00.开发手册/02.组件【banner】.md",key:"v-125b7ba4",path:"/pages/zj02/",headers:[{level:3,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:57}],headersStr:"使用",content:"小伙伴们，你们好，欢迎来到老寇云平台，这个组件【banner】是SpringBoot应用启动时展示的内容\n\n\n# 使用\n\n1.引入依赖\n\n  <dependencies>\n    <dependency>\n      <groupId>org.laokou</groupId>\n      <artifactId>laokou-common-banner</artifactId>\n    </dependency>\n  </dependencies>\n\n\n2.说明【这个没啥好说的，自己玩一玩就知道啦~】\n\n# 1.字体颜色，如${AnsiColor.BRIGHT_RED}表示红色\n# 2.系统变量，如${java.version}表示获取JDK版本的系统变量\n# 3.自定义变量，如${spring-cloud-alibaba-version}表示获取spring-cloud-alibaba版本的自定义变量\n\n\n我是老寇，我们下次再见啦！",normalizedContent:"小伙伴们，你们好，欢迎来到老寇云平台，这个组件【banner】是springboot应用启动时展示的内容\n\n\n# 使用\n\n1.引入依赖\n\n  <dependencies>\n    <dependency>\n      <groupid>org.laokou</groupid>\n      <artifactid>laokou-common-banner</artifactid>\n    </dependency>\n  </dependencies>\n\n\n2.说明【这个没啥好说的，自己玩一玩就知道啦~】\n\n# 1.字体颜色，如${ansicolor.bright_red}表示红色\n# 2.系统变量，如${java.version}表示获取jdk版本的系统变量\n# 3.自定义变量，如${spring-cloud-alibaba-version}表示获取spring-cloud-alibaba版本的自定义变量\n\n\n我是老寇，我们下次再见啦！",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【algorithm】",frontmatter:{title:"组件【algorithm】",date:"2025-03-11T14:11:42.000Z",permalink:"/pages/zj01/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/01.%E7%BB%84%E4%BB%B6%E3%80%90algorithm%E3%80%91.html",relativePath:"01.指南/00.开发手册/01.组件【algorithm】.md",key:"v-346ce496",path:"/pages/zj01/",headers:[{level:3,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:68}],headersStr:"使用",content:'小伙伴们，你们好，欢迎来到老寇云平台，这个组件【algorithm】是根据自定义策略对节点进行负载均衡，可以用于服务，API！\n\n\n# 使用\n\n1.引入依赖\n\n  <dependencies>\n    <dependency>\n      <groupId>org.laokou</groupId>\n      <artifactId>laokou-common-algorithm</artifactId>\n    </dependency>\n  </dependencies>\n\n\n2.测试用例\n\n@Slf4j\n@SpringBootTest\n@RequiredArgsConstructor\n@TestConstructor(autowireMode = TestConstructor.AutowireMode.ALL)\nclass AlgorithmTest {\n\n\t@Test\n\tvoid testApi() {\n\t\tList<OssApi> ossApis = List.of(new TencentcloudOssApi(), new AliyunOssApi());\n\t\t// 负载均衡【哈希算法】\n\t\tAlgorithm algorithm = new HashSelectAlgorithm();\n\t\talgorithm.select(ossApis, new Random().nextInt(10)).upload();\n\t\t// 负载均衡【轮询算法】\n\t\talgorithm = new PollSelectAlgorithm();\n\t\talgorithm.select(ossApis, "").upload();\n\t\t// 负载均衡【随机算法】\n\t\talgorithm = new RandomSelectAlgorithm();\n\t\talgorithm.select(ossApis, "").upload();\n\t}\n\n\tinterface OssApi {\n\n\t\tvoid upload();\n\n\t}\n\n\tstatic class AliyunOssApi implements OssApi {\n\n\t\t@Override\n\t\tpublic void upload() {\n\t\t\tlog.info("阿里云OSS => 上传文件成功");\n\t\t}\n\n\t}\n\n\tstatic class TencentcloudOssApi implements OssApi {\n\n\t\t@Override\n\t\tpublic void upload() {\n\t\t\tlog.info("腾讯云OSS => 上传文件成功");\n\t\t}\n\n\t}\n\n}\n\n\n我是老寇，我们下次再见啦！',normalizedContent:'小伙伴们，你们好，欢迎来到老寇云平台，这个组件【algorithm】是根据自定义策略对节点进行负载均衡，可以用于服务，api！\n\n\n# 使用\n\n1.引入依赖\n\n  <dependencies>\n    <dependency>\n      <groupid>org.laokou</groupid>\n      <artifactid>laokou-common-algorithm</artifactid>\n    </dependency>\n  </dependencies>\n\n\n2.测试用例\n\n@slf4j\n@springboottest\n@requiredargsconstructor\n@testconstructor(autowiremode = testconstructor.autowiremode.all)\nclass algorithmtest {\n\n\t@test\n\tvoid testapi() {\n\t\tlist<ossapi> ossapis = list.of(new tencentcloudossapi(), new aliyunossapi());\n\t\t// 负载均衡【哈希算法】\n\t\talgorithm algorithm = new hashselectalgorithm();\n\t\talgorithm.select(ossapis, new random().nextint(10)).upload();\n\t\t// 负载均衡【轮询算法】\n\t\talgorithm = new pollselectalgorithm();\n\t\talgorithm.select(ossapis, "").upload();\n\t\t// 负载均衡【随机算法】\n\t\talgorithm = new randomselectalgorithm();\n\t\talgorithm.select(ossapis, "").upload();\n\t}\n\n\tinterface ossapi {\n\n\t\tvoid upload();\n\n\t}\n\n\tstatic class aliyunossapi implements ossapi {\n\n\t\t@override\n\t\tpublic void upload() {\n\t\t\tlog.info("阿里云oss => 上传文件成功");\n\t\t}\n\n\t}\n\n\tstatic class tencentcloudossapi implements ossapi {\n\n\t\t@override\n\t\tpublic void upload() {\n\t\t\tlog.info("腾讯云oss => 上传文件成功");\n\t\t}\n\n\t}\n\n}\n\n\n我是老寇，我们下次再见啦！',charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【core】",frontmatter:{title:"组件【core】",date:"2025-03-11T14:17:03.000Z",permalink:"/pages/zj04/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/04.%E7%BB%84%E4%BB%B6%E3%80%90core%E3%80%91.html",relativePath:"01.指南/00.开发手册/04.组件【core】.md",key:"v-90a17964",path:"/pages/zj04/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【bom】",frontmatter:{title:"组件【bom】",date:"2025-03-11T14:17:47.000Z",permalink:"/pages/zj05/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/05.%E7%BB%84%E4%BB%B6%E3%80%90bom%E3%80%91.html",relativePath:"01.指南/00.开发手册/05.组件【bom】.md",key:"v-1551ecb0",path:"/pages/zj05/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【cors】",frontmatter:{title:"组件【cors】",date:"2025-03-11T15:06:00.000Z",permalink:"/pages/zj06/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/06.%E7%BB%84%E4%BB%B6%E3%80%90cors%E3%80%91.html",relativePath:"01.指南/00.开发手册/06.组件【cors】.md",key:"v-3a4be74e",path:"/pages/zj06/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【domain】",frontmatter:{title:"组件【domain】",date:"2025-03-11T15:06:40.000Z",permalink:"/pages/zj07/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/07.%E7%BB%84%E4%BB%B6%E3%80%90domain%E3%80%91.html",relativePath:"01.指南/00.开发手册/07.组件【domain】.md",key:"v-b5e736e4",path:"/pages/zj07/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【crypto】",frontmatter:{title:"组件【crypto】",date:"2025-03-11T15:07:41.000Z",permalink:"/pages/zj08/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/08.%E7%BB%84%E4%BB%B6%E3%80%90crypto%E3%80%91.html",relativePath:"01.指南/00.开发手册/08.组件【crypto】.md",key:"v-ab6c9064",path:"/pages/zj08/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【data-cache】",frontmatter:{title:"组件【data-cache】",date:"2025-03-11T15:08:33.000Z",permalink:"/pages/zj09/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/09.%E7%BB%84%E4%BB%B6%E3%80%90data-cache%E3%80%91.html",relativePath:"01.指南/00.开发手册/09.组件【data-cache】.md",key:"v-2bbc8e24",path:"/pages/zj09/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【elasticsearch】",frontmatter:{title:"组件【elasticsearch】",date:"2025-03-11T15:09:55.000Z",permalink:"/pages/zj11/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/11.%E7%BB%84%E4%BB%B6%E3%80%90elasticsearch%E3%80%91.html",relativePath:"01.指南/00.开发手册/11.组件【elasticsearch】.md",key:"v-ac9fb018",path:"/pages/zj11/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【excel】",frontmatter:{title:"组件【excel】",date:"2025-03-11T15:14:47.000Z",permalink:"/pages/zj12/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/12.%E7%BB%84%E4%BB%B6%E3%80%90excel%E3%80%91.html",relativePath:"01.指南/00.开发手册/12.组件【excel】.md",key:"v-6846b5e6",path:"/pages/zj12/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【i18n】",frontmatter:{title:"组件【i18n】",date:"2025-03-11T15:21:31.000Z",permalink:"/pages/zj16/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/16.%E7%BB%84%E4%BB%B6%E3%80%90i18n%E3%80%91.html",relativePath:"01.指南/00.开发手册/16.组件【i18n】.md",key:"v-63861764",path:"/pages/zj16/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【idempotent】",frontmatter:{title:"组件【idempotent】",date:"2025-03-11T15:21:31.000Z",permalink:"/pages/zj17/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/17.%E7%BB%84%E4%BB%B6%E3%80%90idempotent%E3%80%91.html",relativePath:"01.指南/00.开发手册/17.组件【idempotent】.md",key:"v-63ca04e4",path:"/pages/zj17/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【influxdb】",frontmatter:{title:"组件【influxdb】",date:"2025-03-11T15:21:31.000Z",permalink:"/pages/zj18/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/18.%E7%BB%84%E4%BB%B6%E3%80%90influxdb%E3%80%91.html",relativePath:"01.指南/00.开发手册/18.组件【influxdb】.md",key:"v-19630a64",path:"/pages/zj18/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【kafka】",frontmatter:{title:"组件【kafka】",date:"2025-03-11T15:21:31.000Z",permalink:"/pages/zj19/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/19.%E7%BB%84%E4%BB%B6%E3%80%90kafka%E3%80%91.html",relativePath:"01.指南/00.开发手册/19.组件【kafka】.md",key:"v-309d7d14",path:"/pages/zj19/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【log】",frontmatter:{title:"组件【log】",date:"2025-03-11T15:21:31.000Z",permalink:"/pages/zj20/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/20.%E7%BB%84%E4%BB%B6%E3%80%90log%E3%80%91.html",relativePath:"01.指南/00.开发手册/20.组件【log】.md",key:"v-118fa3f4",path:"/pages/zj20/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【lock】",frontmatter:{title:"组件【lock】",date:"2025-03-11T15:21:31.000Z",permalink:"/pages/zj21/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/21.%E7%BB%84%E4%BB%B6%E3%80%90lock%E3%80%91.html",relativePath:"01.指南/00.开发手册/21.组件【lock】.md",key:"v-072e52ae",path:"/pages/zj21/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【mail】",frontmatter:{title:"组件【mail】",date:"2025-03-11T15:21:31.000Z",permalink:"/pages/zj22/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/22.%E7%BB%84%E4%BB%B6%E3%80%90mail%E3%80%91.html",relativePath:"01.指南/00.开发手册/22.组件【mail】.md",key:"v-97ba9864",path:"/pages/zj22/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【log4j2】",frontmatter:{title:"组件【log4j2】",date:"2025-03-11T15:21:31.000Z",permalink:"/pages/zj23/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/23.%E7%BB%84%E4%BB%B6%E3%80%90log4j2%E3%80%91.html",relativePath:"01.指南/00.开发手册/23.组件【log4j2】.md",key:"v-454936ce",path:"/pages/zj23/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【mybatis-plus】",frontmatter:{title:"组件【mybatis-plus】",date:"2025-03-11T15:21:31.000Z",permalink:"/pages/zj26/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/26.%E7%BB%84%E4%BB%B6%E3%80%90mybatis-plus%E3%80%91.html",relativePath:"01.指南/00.开发手册/26.组件【mybatis-plus】.md",key:"v-40268b24",path:"/pages/zj26/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【nacos】",frontmatter:{title:"组件【nacos】",date:"2025-03-11T15:21:31.000Z",permalink:"/pages/zj27/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/27.%E7%BB%84%E4%BB%B6%E3%80%90nacos%E3%80%91.html",relativePath:"01.指南/00.开发手册/27.组件【nacos】.md",key:"v-14357e50",path:"/pages/zj27/",headers:[{level:3,title:"Nacos介绍【摘抄自官方文档】",slug:"nacos介绍【摘抄自官方文档】",normalizedTitle:"nacos介绍【摘抄自官方文档】",charIndex:64},{level:3,title:"Nacos架构",slug:"nacos架构",normalizedTitle:"nacos架构",charIndex:347},{level:3,title:"项目部署",slug:"项目部署",normalizedTitle:"项目部署",charIndex:710},{level:3,title:"Java SDK使用",slug:"java-sdk使用",normalizedTitle:"java sdk使用",charIndex:4037}],headersStr:"Nacos介绍【摘抄自官方文档】 Nacos架构 项目部署 Java SDK使用",content:'小伙伴们，你们好，欢迎来到老寇云平台，这个组件【nacos】是配置中心&服务注册&发现\n\nnacos官方地址【最新版】\n\n\n# Nacos介绍【摘抄自官方文档】\n\nNacos /nɑ:kəʊs/ 是 Dynamic Naming and Configuration Service的首字母简称，一个更易于构建云原生应用的动态服务发现、 配置管理和服务管理平台。\n\nNacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。\n\nNacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建以**“服务”**为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。\n\n\n# Nacos架构\n\n阅读架构图，我们可以得到以下结论\n\n * Nacos客户端配置了多级缓存【内存+文件】，即使Nacos集群不可用，仍然可以读取本地缓存\n * Nacos客户端与服务端通信采用gRPC，实现数据的高效传输，减少网络延迟\n * Nacos服务端将数据持久化到数据库或磁盘，确保数据不丢失\n * Nacos客户端发送心跳检测，超过时间标记为不健康服务，Nacos服务端通过心跳检测，将故障节点从路由表剔除\n * Nacos使用Raft协议管理集群元数据和配置数据，确保数据强一致性【数据写入多数节点（N/2+1）确认，避免出现脑裂问题】\n * Nacos服务注册数据默认存在内存中，通过Distro协议【AP模式】实现最终一致性\n\n总之，Nacos可以通过增加节点来水平扩展，提升系统的整体性能和承载能力\n\n\n# 项目部署\n\n\n\njasypt:\n\tencryptor:\n\t\t# 加密算法\n\t\t# springboot2加密密钥 => 使用MD5AndDES\n\t\talgorithm: PBEWithMD5AndDES\n\t\t# IV生成类\n\t\tiv-generator-classname: org.jasypt.iv.NoIvGenerator\n\t\t# 密钥\n\t\tpassword: laokou\n\ndb:\n\t# 数据库数量，请按照作者的来，请不要瞎几把改\n\t# 数据库数量，请按照作者的来，请不要瞎几把改\n\t# 数据库数量，请按照作者的来，请不要瞎几把改\n\tnum: 1\n\t# 数据库连接地址\n\turl.\'0\': jdbc:postgresql://postgresql:5432/kcloud_platform?tcpKeepAlive=true&reWriteBatchedInserts=true&ApplicationName=laokou-nacos&useSSL=false&reWriteBatchedInserts=true&stringtype=unspecified\n\t# 数据库用户名\n\tuser.\'0\': root\n\t# 数据库密码\n\tpassword.\'0\': laokou123\n\t# see DataSourcePoolProperties 与 ExternalDataSourceProperties\n\tpool:\n\t\tconfig:\n\t\t\t# see DataSourcePoolProperties\n\t\t\t# see HikariConfig\n\t\t\t# 最小空闲连接数\n\t\t\tminimum-idle: 5\n\t\t\t# 空闲连接的最大存活时间\n\t\t\tidle-timeout: 600000\n\t\t\t# 连接时间\n\t\t\tconnection-timeout: 30000\n\t\t\t# 超时时间\n\t\t\tvalidation-timeout: 10000\n\t\t\t# 最大连接数\n\t\t\tmaximum-pool-size: 50\n\t\t\t# 数据库驱动\n\t\t\tdriver-class-name: org.postgresql.Driver\nmanagement:\n\tmetrics:\n\t\texport:\n\t\t\telastic:\n\t\t\t\t# 不暴露指标到Elastic\n\t\t\t\tenabled: false\n\t\t\tinflux:\n\t\t\t\t# 不暴露指标到Influx\n\t\t\t\tenabled: false\nnacos:\n\tconfig:\n\t\tpush:\n\t\t\t# 配置推送失败时的最大重试次数\n\t\t\tmaxRetryTime: 50\n\tcore:\n\t\tauth:\n\t\t\tcaching:\n\t\t\t\t# 启用认证信息的缓存，减少重复认证的开销\n\t\t\t\tenabled: true\n\t\t\tenable:\n\t\t\t\t# 禁止通过 User-Agent 请求头进行白名单认证 => 设置为 false 表示所有请求必须携带有效凭证（如 Token）\n\t\t\t\tuserAgentAuthWhite: false\n\t\t\tenabled: true\n\t\t\tplugin:\n\t\t\t\tnacos:\n\t\t\t\t\ttoken:\n\t\t\t\t\t\tcache:\n\t\t\t\t\t\t\t# 禁用 Token 缓存，每次请求需重新验证 Token\n\t\t\t\t\t\t\tenable: false\n\t\t\t\t\t\texpire:\n\t\t\t\t\t\t\t#  Token 的有效期，超时后需重新获取\n\t\t\t\t\t\t\tseconds: 18000\n\t\t\t\t\t\tsecret:\n\t\t\t\t\t\t\t# 生成和验证 Token 的密钥\n\t\t\t\t\t\t\tkey: SecretKey012345678901234567890123456789012345678901234567890123456789\n\t\t\tserver:\n\t\t\t\tidentity:\n\t\t\t\t\t# 服务节点间通信的认证标识，用于集群内部身份校验\n\t\t\t\t\tkey: serverIdentity\n\t\t\t\t\tvalue: security\n\t\t\tsystem:\n\t\t\t\t# 指定系统类型为 Nacos\n\t\t\t\ttype: nacos\n\tistio:\n\t\tmcp:\n\t\t\tserver:\n\t\t\t\t# 禁用 Istio 的 Mesh Configuration Protocol (MCP) 服务 =>  若不使用 Istio 服务网格，可关闭此功能\n\t\t\t\tenabled: false\n\tnaming:\n\t\tempty-service:\n\t\t\t# 自动清理无实例注册的空服务\n\t\t\tauto-clean: true\n\t\t\tclean:\n\t\t\t\t# 服务清理任务的初始延迟时间\n\t\t\t\tinitial-delay-ms: 50000\n\t\t\t\t# 服务清理任务的执行间隔，每 30 秒检查一次\n\t\t\t\tperiod-time-ms: 30000\n\tsecurity:\n\t\tignore:\n\t\t\t# 配置无需认证即可访问的 URL 路径，通常用于静态资源或健康检查\n\t\t\turls: /,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-ui/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**\nserver:\n\terror:\n\t\t# 应用程序在发生错误时，HTTP 响应中始终返回具体的错误消息\n\t\tinclude-message: always\n\t# 端口\n\tport: ${SERVER_PORT:8848}\n\tservlet:\n\t\t# 请求上下文路径\n\t\tcontextPath: /nacos\n\tundertow:\n\t\tthreads:\n\t\t\t# 设置IO线程数，来执行非阻塞任务，负责多个连接数\n\t\t\tio: 16\n\t\t\t# 工作线程数\n\t\t\tworker: 512\n\t\t# 每块buffer的空间大小\n\t\tbuffer-size: 2048\n\t\t# 分配堆外内存\n\t\tdirect-buffers: true\n\t\taccesslog:\n\t\t\t# 开启日志\n\t\t\tenabled: true\n\tssl:\n\t\t# 关闭证书\n\t\tenabled: false\n\thttp2:\n\t\t# 关闭http2\n\t\tenabled: false\n\t# 优雅停机\n\tshutdown: graceful\nspring:\n\tmain:\n\t\t# banner模式\n\t\tbanner-mode: console\n\tapplication:\n\t\t# 应用名称\n\t\tname: laokou-nacos\n\tprofiles:\n\t\t# 环境\n\t\tactive: test\n\tsql:\n\t\tinit:\n\t\t\t# 指定数据库类型\n\t\t\tplatform: postgresql\n\tliquibase:\n\t\t# 开启数据库版本管理工具\n\t\tenabled: true\n\t\t# 数据库版本变更配置\n\t\tchange-log: classpath:/db/changelog/db.changelog-master.xml\n\t\t# 数据库用户名\n\t\tuser: root\n\t\t# 数据库密码\n\t\tpassword: laokou123\n\t\t# 数据库连接地址\n\t\turl: jdbc:postgresql://postgresql:5432/kcloud_platform_nacos?tcpKeepAlive=true&reWriteBatchedInserts=true&ApplicationName=laokou-nacos&useSSL=false&reWriteBatchedInserts=true&stringtype=unspecified\n\n\n\n# Java SDK使用\n\nConfigUtil\n\npublic final class ConfigUtil {\n\n\t/**\n\t * 获取分组名称.\n\t */\n\tpublic String getGroup();\n\n\t/**\n\t * 创建配置服务.\n\t * @param serverAddr 服务地址\n\t */\n\tpublic static ConfigService createConfigService(String serverAddr);\n\n\t/**\n\t * 创建服务地址.\n\t * @param properties 配置\n\t */\n\tpublic static ConfigService createConfigService(Properties properties);\n\n\t// @formatter:off\n\t/**\n\t * 获取配置.\n\t * @param dataId 配置 ID，采用类似 package.class（如com.taobao.tc.refund.log.level）的命名规则保证全局唯一性，class 部分建议是配置的业务含义。全部字符小写。只允许英文字符和 4 种特殊字符（”.”、”:”、”-”、”_”），不超过 256 字节\n\t * @param group 配置分组，建议填写产品名:模块名（Nacos）保证唯一性，只允许英文字符和4种特殊字符（”.”、”:”、”-”、”_”），不超过 128 字节\n\t * @param timeoutMs 读取配置超时时间，单位 ms，推荐值 3000\n\t * @return String\n\t */\n\tpublic String getConfig(String dataId, String group, long timeoutMs);\n\t// @formatter:on\n\n\t// @formatter:off\n\t/**\n\t * 获取配置.\n\t * @param dataId 配置 ID，采用类似 package.class（如com.taobao.tc.refund.log.level）的命名规则保证全局唯一性，class 部分建议是配置的业务含义。全部字符小写。只允许英文字符和 4 种特殊字符（”.”、”:”、”-”、”_”），不超过 256 字节\n\t * @param group 配置分组，建议填写产品名:模块名（Nacos）保证唯一性，只允许英文字符和4种特殊字符（”.”、”:”、”-”、”_”），不超过 128 字节\n\t * @param timeoutMs 读取配置超时时间，单位 ms，推荐值 3000\n\t * @param listener 监听器，配置变更进入监听器的回调函数\n\t * @return String\n\t */\n\tpublic String getConfig(String dataId, String group, long timeoutMs, Listener listener);\n\t// @formatter:on\n\n\t// @formatter:off\n\t/**\n\t * 增加监听配置.\n\t * @param dataId 配置 ID，采用类似 package.class（如com.taobao.tc.refund.log.level）的命名规则保证全局唯一性，class 部分建议是配置的业务含义。全部字符小写。只允许英文字符和 4 种特殊字符（”.”、”:”、”-”、”_”），不超过 256 字节\n\t * @param group 配置分组，建议填写产品名:模块名（Nacos）保证唯一性，只允许英文字符和4种特殊字符（”.”、”:”、”-”、”_”），不超过 128 字节\n\t * @param listener 监听器，配置变更进入监听器的回调函数\n\t */\n\tpublic void addListener(String dataId, String group, Listener listener);\n\t// @formatter:on\n\n\t// @formatter:off\n\t/**\n\t * 删除监听配置.\n\t * @param dataId 配置 ID，采用类似 package.class（如com.taobao.tc.refund.log.level）的命名规则保证全局唯一性，class 部分建议是配置的业务含义。全部字符小写。只允许英文字符和 4 种特殊字符（”.”、”:”、”-”、”_”），不超过 256 字节\n\t * @param group 配置分组，建议填写产品名:模块名（Nacos）保证唯一性，只允许英文字符和4种特殊字符（”.”、”:”、”-”、”_”），不超过 128 字节\n\t * @param listener 监听器，配置变更进入监听器的回调函数\n\t */\n\tpublic void removeListener(String dataId, String group, Listener listener);\n\t// @formatter:on\n\n\t// @formatter:off\n\t/**\n\t * 发布配置.\n\t * @param dataId 配置 ID，采用类似 package.class（如com.taobao.tc.refund.log.level）的命名规则保证全局唯一性，class 部分建议是配置的业务含义。全部字符小写。只允许英文字符和 4 种特殊字符（”.”、”:”、”-”、”_”），不超过 256 字节\n\t * @param group 配置分组，建议填写产品名:模块名（Nacos）保证唯一性，只允许英文字符和4种特殊字符（”.”、”:”、”-”、”_”），不超过 128 字节\n\t * @param content 配置内容\n\t */\n\tpublic boolean publishConfig(String dataId, String group, String content);\n\t// @formatter:on\n\n\t// @formatter:off\n\t/**\n\t * 发布配置.\n\t * @param dataId 配置 ID，采用类似 package.class（如com.taobao.tc.refund.log.level）的命名规则保证全局唯一性，class 部分建议是配置的业务含义。全部字符小写。只允许英文字符和 4 种特殊字符（”.”、”:”、”-”、”_”），不超过 256 字节\n\t * @param group 配置分组，建议填写产品名:模块名（Nacos）保证唯一性，只允许英文字符和4种特殊字符（”.”、”:”、”-”、”_”），不超过 128 字节\n\t * @param content 配置内容\n\t * @param type 配置类型【properties/xml/json/text/html/yaml/toml/unset】，默认为text\n\t */\n\tpublic boolean publishConfig(String dataId, String group, String content, String type);\n\t// @formatter:on\n\n\t// @formatter:off\n\t/**\n\t * 发布配置【CAS】.\n\t * @param dataId 配置 ID，采用类似 package.class（如com.taobao.tc.refund.log.level）的命名规则保证全局唯一性，class 部分建议是配置的业务含义。全部字符小写。只允许英文字符和 4 种特殊字符（”.”、”:”、”-”、”_”），不超过 256 字节\n\t * @param group 配置分组，建议填写产品名:模块名（Nacos）保证唯一性，只允许英文字符和4种特殊字符（”.”、”:”、”-”、”_”），不超过 128 字节\n\t * @param content 配置内容\n\t * @param casMd5 配置内容md5\n\t */\n\tpublic boolean publishConfigCas(String dataId, String group, String content, String casMd5);\n\t// @formatter:on\n\n\t// @formatter:off\n\t/**\n\t * 发布配置【CAS】.\n\t * @param dataId 配置 ID，采用类似 package.class（如com.taobao.tc.refund.log.level）的命名规则保证全局唯一性，class 部分建议是配置的业务含义。全部字符小写。只允许英文字符和 4 种特殊字符（”.”、”:”、”-”、”_”），不超过 256 字节\n\t * @param group 配置分组，建议填写产品名:模块名（Nacos）保证唯一性，只允许英文字符和4种特殊字符（”.”、”:”、”-”、”_”），不超过 128 字节\n\t * @param content 配置内容\n\t * @param casMd5 配置内容md5\n\t * @param type 配置类型【properties/xml/json/text/html/yaml/toml/unset】，默认为text\n\t */\n\tpublic boolean publishConfigCas(String dataId, String group, String content, String casMd5, String type);\n\t// @formatter:on\n\n\t// @formatter:off\n\t/**\n\t * 移除配置.\n\t * @param dataId 配置 ID，采用类似 package.class（如com.taobao.tc.refund.log.level）的命名规则保证全局唯一性，class 部分建议是配置的业务含义。全部字符小写。只允许英文字符和 4 种特殊字符（”.”、”:”、”-”、”_”），不超过 256 字节\n\t * @param group 配置分组，建议填写产品名:模块名（Nacos）保证唯一性，只允许英文字符和4种特殊字符（”.”、”:”、”-”、”_”），不超过 128 字节\n\t */\n\tpublic boolean removeConfig(String dataId, String group);\n\t// @formatter:on\n\n\t// @formatter:off\n\t/**\n\t * 获取服务状态.\n\t */\n\tpublic String getServerStatus();\n\t// @formatter:on\n\n\t// @formatter:off\n\t/**\n\t * 获取配置服务.\n\t */\n\tprivate ConfigService getConfigService();\n\t// @formatter:on\n\n}\n\n\nNamingUtil.util\n\npublic final class NamingUtil {\n\n\t/**\n\t * 创建服务发现.\n\t * @param serverAddr 服务地址\n\t */\n\tpublic static NamingService createNamingService(String serverAddr);\n\n\t/**\n\t * 创建服务发现.\n\t * @param properties 配置\n\t */\n\tpublic static NamingService createNamingService(Properties properties);\n\n\t/**\n\t * Nacos优雅停机.\n\t */\n\tpublic void nacosServiceShutDown();\n\n\t/**\n\t * 获取命名维护服务.\n\t * @param properties 配置\n\t */\n\tpublic NamingMaintainService getNamingMaintainService(Properties properties);\n\n\t/**\n\t * Nacos注册服务的信息是否变更.\n\t */\n\tpublic boolean isNacosDiscoveryInfoChanged(NacosDiscoveryProperties currentNacosDiscoveryPropertiesCache);\n\n\t/**\n\t * 通过服务ID获取服务实例.\n\t * @param serviceId 服务ID\n\t * @return 服务实例\n\t */\n\tpublic List<Instance> getAllInstances(String serviceId);\n\n\t/**\n\t * 通过服务ID和分组获取服务实例.\n\t * @param serviceId 服务ID\n\t * @param group 分组\n\t */\n\tpublic List<Instance> getAllInstances(String serviceId, String group);\n\n\t/**\n\t * 通过服务ID和订阅标识获取所有服务实例.\n\t * @param serviceId 服务ID\n\t * @param subscribe 是否订阅\n\t */\n\tpublic List<Instance> getAllInstances(String serviceId, boolean subscribe);\n\n\t/**\n\t * 通过服务ID、分组和订阅标识获取所有服务实例.\n\t * @param serviceId 服务ID\n\t * @param group 分组\n\t * @param subscribe 是否订阅\n\t */\n\tpublic List<Instance> getAllInstances(String serviceId, String group, boolean subscribe);\n\n\t/**\n\t * 通过服务ID和集群列表获取所有服务实例.\n\t * @param serviceId 服务ID\n\t * @param clusters 集群列表\n\t */\n\tpublic List<Instance> getAllInstances(String serviceId, List<String> clusters);\n\n\t/**\n\t * 通过服务ID、分组和集群列表获取所有服务实例.\n\t * @param serviceId 服务ID\n\t * @param group 分组\n\t * @param clusters 集群列表\n\t */\n\tpublic List<Instance> getAllInstances(String serviceId, String group, List<String> clusters);\n\n\t/**\n\t * 通过服务ID、集群列表和订阅标识获取所有服务实例.\n\t * @param serviceId 服务ID\n\t * @param clusters 集群列表\n\t * @param subscribe 是否订阅\n\t */\n\tpublic List<Instance> getAllInstances(String serviceId, List<String> clusters, boolean subscribe);\n\n\t/**\n\t * 通过服务ID、分组、集群列表和订阅标识获取所有服务实例.\n\t * @param serviceId 服务ID\n\t * @param group 分组\n\t * @param clusters 集群列表\n\t * @param subscribe 是否订阅\n\t */\n\tpublic List<Instance> getAllInstances(String serviceId, String group, List<String> clusters, boolean subscribe);\n\n\t/**\n\t * 注册实例.\n\t * @param serviceId 服务ID\n\t * @param ip 服务IP\n\t * @param port 服务端口\n\t */\n\tpublic void registerInstance(String serviceId, String ip, int port);\n\n\t/**\n\t * 注册服务.\n\t * @param serviceId 服务ID\n\t * @param group 服务分组\n\t * @param ip 服务IP\n\t * @param port 服务端口\n\t */\n\tpublic void registerInstance(String serviceId, String group, String ip, int port);\n\n\t/**\n\t * 注册服务实例.\n\t * @param serviceId 服务ID\n\t * @param clusterName 集群名称\n\t * @param ip 服务IP\n\t * @param port 服务端口\n\t */\n\tpublic void registerInstance(String serviceId, String ip, int port, String clusterName);\n\n\t/**\n\t * 注册服务实例.\n\t * @param serviceId 服务ID\n\t * @param clusterName 集群名称\n\t * @param ip 服务IP\n\t * @param port 服务端口\n\t * @param group 服务分组\n\t */\n\tpublic void registerInstance(String serviceId, String group, String ip, int port, String clusterName);\n\n\t/**\n\t * 注册服务实例.\n\t * @param serviceId 服务ID\n\t * @param instance 服务实例\n\t */\n\tpublic void registerInstance(String serviceId, Instance instance);\n\n\t/**\n\t * 注册服务实例.\n\t * @param serviceId 服务ID\n\t * @param group 服务分组\n\t * @param instance 服务实例\n\t */\n\tpublic void registerInstance(String serviceId, String group, Instance instance);\n\n\t/**\n\t * 注销服务实例.\n\t * @param serviceId 服务ID\n\t * @param ip 服务IP\n\t * @param port 服务端口\n\t */\n\tpublic void deregisterInstance(String serviceId, String ip, int port);\n\n\t/**\n\t * 注销服务实例.\n\t * @param serviceId 服务ID\n\t * @param group 服务分组\n\t * @param ip 服务IP\n\t * @param port 服务端口\n\t */\n\tpublic void deregisterInstance(String serviceId, String group, String ip, int port);\n\n\t/**\n\t * 注销服务实例.\n\t * @param serviceId 服务ID\n\t * @param clusterName 集群名称\n\t * @param ip 服务IP\n\t * @param port 服务端口\n\t */\n\tpublic void deregisterInstance(String serviceId, String ip, int port, String clusterName);\n\n\t/**\n\t * 注销服务实例.\n\t * @param serviceId 服务ID\n\t * @param clusterName 集群名称\n\t * @param ip 服务IP\n\t * @param port 服务端口\n\t * @param group 服务分组\n\t */\n\tpublic void deregisterInstance(String serviceId, String group, String ip, int port, String clusterName);\n\n\t/**\n\t * 注销服务实例.\n\t * @param serviceId 服务ID\n\t * @param instance 服务实例\n\t */\n\tpublic void deregisterInstance(String serviceId, Instance instance);\n\n\t/**\n\t * 注销服务实例.\n\t * @param serviceId 服务ID\n\t * @param instance 服务实例\n\t * @param group 服务分组\n\t */\n\tpublic void deregisterInstance(String serviceId, String group, Instance instance);\n\n\t/**\n\t * 根据服务ID和健康标识查询服务实例.\n\t * @param serviceId 服务ID\n\t * @param healthy 是否健康\n\t */\n\tpublic List<Instance> selectInstances(String serviceId, boolean healthy);\n\n\t/**\n\t * 根据服务ID、分组和健康标识查询服务实例.\n\t * @param serviceId 服务ID\n\t * @param group 分组\n\t * @param healthy 是否健康\n\t */\n\tpublic List<Instance> selectInstances(String serviceId, String group, boolean healthy);\n\n\t/**\n\t * 根据服务ID和集群列表查询服务实例.\n\t * @param serviceId 服务ID\n\t * @param healthy 是否健康\n\t * @param subscribe 是否订阅\n\t */\n\tpublic List<Instance> selectInstances(String serviceId, boolean healthy, boolean subscribe);\n\n\t/**\n\t * 根据服务ID、分组和集群列表查询服务实例.\n\t * @param serviceId 服务ID\n\t * @param group 分组\n\t * @param healthy 是否健康\n\t * @param subscribe 是否订阅\n\t */\n\tpublic List<Instance> selectInstances(String serviceId, String group, boolean healthy, boolean subscribe);\n\n\t/**\n\t * 根据服务ID、集群列表和健康查询服务实例.\n\t * @param serviceId 服务ID\n\t * @param clusters 集群列表\n\t * @param healthy 是否健康\n\t */\n\tpublic List<Instance> selectInstances(String serviceId, List<String> clusters, boolean healthy);\n\n\t/**\n\t * 根据服务ID、分组、集群列表和健康查询服务实例.\n\t * @param serviceId 服务ID\n\t * @param group 分组\n\t * @param clusters 集群列表\n\t * @param healthy 是否健康\n\t */\n\tpublic List<Instance> selectInstances(String serviceId, String group, List<String> clusters, boolean healthy);\n\n\t/**\n\t * 根据服务ID、集群列表、健康和订阅查询服务实例.\n\t * @param serviceId 服务ID\n\t * @param clusters 集群列表\n\t * @param healthy 是否健康\n\t * @param subscribe 是否订阅\n\t */\n\tpublic List<Instance> selectInstances(String serviceId, List<String> clusters, boolean healthy, boolean subscribe);\n\n\t/**\n\t * 根据服务ID、分组、集群列表、健康和订阅查询服务实例.\n\t * @param serviceId 服务ID\n\t * @param group 分组\n\t * @param clusters 集群列表\n\t * @param healthy 是否健康\n\t * @param subscribe 是否订阅\n\t */\n\tpublic List<Instance> selectInstances(String serviceId, String group, List<String> clusters, boolean healthy, boolean subscribe);\n\n\t/**\n\t * 根据服务ID查询健康的服务实例.\n\t * @param serviceId 服务ID\n\t */\n\tpublic Instance selectOneHealthyInstance(String serviceId);\n\n\t/**\n\t * 根据服务ID和分组查询健康的服务实例.\n\t * @param serviceId 服务ID\n\t * @param group 分组\n\t */\n\tpublic Instance selectOneHealthyInstance(String serviceId, String group);\n\n\t/**\n\t * 根据服务ID和订阅标识查询健康的服务实例.\n\t * @param serviceId 服务ID\n\t * @param subscribe 是否订阅\n\t */\n\tpublic Instance selectOneHealthyInstance(String serviceId, boolean subscribe);\n\n\t/**\n\t * 根据服务ID、分组和订阅标识查询一个健康的服务实例.\n\t * @param serviceId 服务ID\n\t * @param group 分组\n\t * @param subscribe 是否订阅\n\t */\n\tpublic Instance selectOneHealthyInstance(String serviceId, String group, boolean subscribe);\n\n\t/**\n\t * 根据服务ID和集群列表查询一个健康的服务实例.\n\t * @param serviceId 服务ID\n\t * @param clusters 集群列表\n\t */\n\tpublic Instance selectOneHealthyInstance(String serviceId, List<String> clusters);\n\n\t/**\n\t * 根据服务ID、分组和集群列表查询一个健康的服务实例.\n\t * @param serviceId 服务ID\n\t * @param group 分组\n\t * @param clusters 集群列表\n\t */\n\tpublic Instance selectOneHealthyInstance(String serviceId, String group, List<String> clusters);\n\n\t/**\n\t * 根据服务ID、集群列表和订阅查询一个健康的服务实例.\n\t * @param serviceId 服务ID\n\t * @param clusters 集群列表\n\t * @param subscribe 是否订阅\n\t */\n\tpublic Instance selectOneHealthyInstance(String serviceId, List<String> clusters, boolean subscribe);\n\n\t/**\n\t * 根据服务ID、分组、集群列表和订阅查询一个健康的服务实例.\n\t * @param serviceId 服务ID\n\t * @param group 分组\n\t * @param clusters 集群列表\n\t * @param subscribe 是否订阅\n\t */\n\tpublic Instance selectOneHealthyInstance(String serviceId, String group, List<String> clusters, boolean subscribe);\n\n\t/**\n\t * 根据服务ID订阅服务并监听.\n\t * @param serviceId 服务ID\n\t * @param listener 监听器\n\t */\n\tpublic void subscribe(String serviceId, EventListener listener);\n\n\t/**\n\t * 根据服务ID和分组订阅服务并监听.\n\t * @param serviceId 服务ID\n\t * @param group 分组\n\t * @param listener 监听器\n\t */\n\tpublic void subscribe(String serviceId, String group, EventListener listener);\n\n\t/**\n\t * 根据服务ID和集群列表订阅服务并监听.\n\t * @param serviceId 服务ID\n\t * @param clusters 集群列表\n\t * @param listener 监听器\n\t */\n\tpublic void subscribe(String serviceId, List<String> clusters, EventListener listener);\n\n\t/**\n\t * 根据服务ID、分组和集群列表订阅服务并监听.\n\t * @param serviceId 服务ID\n\t * @param group 分组\n\t * @param clusters 集群列表\n\t * @param listener 监听器\n\t */\n\tpublic void subscribe(String serviceId, String group, List<String> clusters, EventListener listener);\n\n\t/**\n\t * 根据服务ID取消订阅并监听.\n\t * @param serviceId 服务ID\n\t * @param listener 监听器\n\t */\n\tpublic void unsubscribe(String serviceId, EventListener listener);\n\n\t/**\n\t * 根据服务ID和分组取消订阅并监听.\n\t * @param serviceId 服务ID\n\t * @param group 分组\n\t * @param listener 监听器\n\t */\n\tpublic void unsubscribe(String serviceId, String group, EventListener listener);\n\n\t/**\n\t * 根据服务ID和集群列表取消订阅并监听.\n\t * @param serviceId 服务ID\n\t * @param clusters 集群列表\n\t * @param listener 监听器\n\t */\n\tpublic void unsubscribe(String serviceId, List<String> clusters, EventListener listener);\n\n\t/**\n\t * 根据服务ID、分组和集群列表取消订阅并监听.\n\t * @param serviceId 服务ID\n\t * @param group 分组\n\t * @param clusters 集群列表\n\t * @param listener 监听器\n\t */\n\tpublic void unsubscribe(String serviceId, String group, List<String> clusters, EventListener listener);\n\n\t/**\n\t * 根据服务ID、分组和服务实例列表批量注册服务实例.\n\t * @param serviceId 服务ID\n\t * @param group 分组\n\t * @param instances 服务实例列表\n\t */\n\tpublic void batchRegisterInstance(String serviceId, String group, List<Instance> instances);\n\n\t/**\n\t * 根据服务ID和服务实例列表批量取消注册服务实例.\n\t * @param serviceId 服务ID\n\t * @param group 分组\n\t * @param instances 服务实例列表\n\t */\n\tpublic void batchDeregisterInstance(String serviceId, String group, List<Instance> instances);\n\n\t/**\n\t * 根据服务ID和选择器订阅并监听事件.\n\t * @param serviceId 服务ID\n\t * @param selector 选择器\n\t * @param listener 事件监听器\n\t */\n\tpublic void subscribe(String serviceId, NamingSelector selector, EventListener listener);\n\n\t/**\n\t * 根据服务ID、分组和选择器订阅并监听事件.\n\t * @param serviceId 服务ID\n\t * @param group 分组\n\t * @param selector 选择器\n\t * @param listener 事件监听器\n\t */\n\tpublic void subscribe(String serviceId, String group, NamingSelector selector, EventListener listener);\n\n\t/**\n\t * 根据服务ID和选择器取消订阅并监听事件.\n\t * @param serviceId 服务ID\n\t * @param selector 选择器\n\t * @param listener 事件监听器\n\t */\n\tpublic void unsubscribe(String serviceId, NamingSelector selector, EventListener listener);\n\n\t/**\n\t * 根据服务ID、分组和选择器取消订阅并监听事件.\n\t * @param serviceId 服务ID\n\t * @param group 分组\n\t * @param selector 选择器\n\t * @param listener 事件监听器\n\t */\n\tpublic void unsubscribe(String serviceId, String group, NamingSelector selector, EventListener listener);\n\n\t/**\n\t * 分页获取服务列表.\n\t * @param pageNo 页数\n\t * @param pageSize 条数\n\t */\n\tpublic ListView<String> getServicesOfServer(int pageNo, int pageSize);\n\n\t/**\n\t * 根据分组分页获取服务列表.\n\t * @param pageNo 页数\n\t * @param pageSize 条数\n\t * @param group 分组\n\t */\n\tpublic ListView<String> getServicesOfServer(int pageNo, int pageSize, String group);\n\n\t/**\n\t * 获取订阅服务列表.\n\t */\n\tpublic List<ServiceInfo> getSubscribeServices();\n\n\t/**\n\t * 获取发现服务.\n\t */\n\tprivate NamingService getNamingService();\n\n}\n\n\n测试用例 ConfigUtilsTest\n\nclass ConfigUtilsTest {\n\n\t// @formatter:off\n\tprivate ConfigUtils configUtils;\n\n\tprivate NacosConfigProperties nacosConfigProperties;\n\n\t@BeforeEach\n\tvoid setUp() {\n\t\tnacosConfigProperties = new NacosConfigProperties();\n\t\tnacosConfigProperties.setServerAddr("127.0.0.1:8848");\n\t\tnacosConfigProperties.setNamespace("public");\n\t\tnacosConfigProperties.setUsername("nacos");\n\t\tnacosConfigProperties.setPassword("nacos");\n\t\tnacosConfigProperties.setGroup("DEFAULT_GROUP");\n\n\t\tassertThat(nacosConfigProperties).isNotNull();\n\t\tassertThat( nacosConfigProperties.getNamespace()).isEqualTo("public");\n\t\tassertThat( nacosConfigProperties.getServerAddr()).isEqualTo("127.0.0.1:8848");\n\t\tassertThat(nacosConfigProperties.getPassword()).isEqualTo("nacos");\n\t\tassertThat(nacosConfigProperties.getUsername()).isEqualTo("nacos");\n\t\tassertThat( nacosConfigProperties.getGroup()).isEqualTo("DEFAULT_GROUP");\n\t\tassertThat(nacosConfigProperties.assembleConfigServiceProperties()).isNotNull();\n\n\t\tNacosConfigManager nacosConfigManager = new NacosConfigManager(nacosConfigProperties);\n\t\tassertThat(nacosConfigManager).isNotNull();\n\n\t\tconfigUtils = new ConfigUtils(nacosConfigManager);\n\t\tassertThat(configUtils).isNotNull();\n\t}\n\n\t@Test\n\tvoid testGetGroup() {\n\t\tassertThat( configUtils.getGroup()).isEqualTo("DEFAULT_GROUP");\n\t}\n\n\t@Test\n\tvoid testCreateConfigService() throws NacosException {\n\t\tConfigService configService = ConfigUtils.createConfigService(nacosConfigProperties.getServerAddr());\n\t\tassertThat(configService).isNotNull();\n\t\tassertThat(configService.getServerStatus()).isEqualTo("UP");\n\n\t\tconfigService = ConfigUtils.createConfigService(nacosConfigProperties.assembleConfigServiceProperties());\n\t\tassertThat(configService).isNotNull();\n\t\tassertThat(configService.getServerStatus()).isEqualTo("UP");\n\t}\n\n\t@Test\n\tvoid testGetConfig() throws NacosException {\n\t\tString config = configUtils.getConfig("test.yaml", nacosConfigProperties.getGroup(), 5000);\n\t\tassertThat(config).isNotNull().contains("test");\n\t\tconfig = configUtils.getConfig("test.yaml", nacosConfigProperties.getGroup(), 5000, new Listener() {\n\t\t\t@Override\n\t\t\tpublic Executor getExecutor() {\n\t\t\t\treturn Executors.newSingleThreadExecutor();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void receiveConfigInfo(String s) {\n\t\t\t\tassertThat(s).isNotBlank().contains("test");\n\t\t\t}\n\t\t});\n\t\tassertThat(config).isNotNull().contains("test");\n\t}\n\n\t@Test\n\tvoid testAddListener() throws NacosException {\n\t\tconfigUtils.addListener("test.yaml", nacosConfigProperties.getGroup(), new Listener() {\n\t\t\t@Override\n\t\t\tpublic Executor getExecutor() {\n\t\t\t\treturn Executors.newSingleThreadExecutor();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void receiveConfigInfo(String s) {\n\t\t\t\tassertThat(s).isNotBlank().contains("test");\n\t\t\t}\n\t\t});\n\t}\n\n\t@Test\n\tvoid testRemoveListener() throws NacosException {\n\t\tconfigUtils.removeListener("test.yaml", nacosConfigProperties.getGroup(), new Listener() {\n\t\t\t@Override\n\t\t\tpublic Executor getExecutor() {\n\t\t\t\treturn Executors.newSingleThreadExecutor();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void receiveConfigInfo(String s) {\n\t\t\t\tassertThat(s).isNotBlank().contains("test");\n\t\t\t}\n\t\t});\n\t}\n\n\t@Test\n\tvoid testPublishConfig() throws NacosException, InterruptedException {\n\t\tassertThat(configUtils.publishConfig("test.yaml", nacosConfigProperties.getGroup(), "test: 123")).isTrue();\n\t\tThread.sleep(100);\n\t\tassertThat(configUtils.getConfig("test.yaml", nacosConfigProperties.getGroup(), 5000)).isEqualTo("test: 123");\n\n\t\tassertThat(configUtils.publishConfig("test.yaml", nacosConfigProperties.getGroup(), "test: 456", "yaml")).isTrue();\n\t\tassertThat(configUtils.getConfig("test.yaml", nacosConfigProperties.getGroup(), 5000)).isEqualTo("test: 456");\n\n\t\tassertThat(configUtils.publishConfig("test.yaml", nacosConfigProperties.getGroup(), "test: 123")).isTrue();\n\t\tassertThat(configUtils.getConfig("test.yaml", nacosConfigProperties.getGroup(), 5000)).isEqualTo("test: 123");\n\n\t\tString md5 = DigestUtils.md5DigestAsHex("test: 123".getBytes());\n\t\tassertThat(md5).isEqualTo("5e76b5e94b54e1372f8b452ef64dc55c");\n\t\tassertThat(configUtils.publishConfigCas("test.yaml", nacosConfigProperties.getGroup(), "test: 456", md5)).isTrue();\n\t\tassertThat(configUtils.getConfig("test.yaml", nacosConfigProperties.getGroup(), 5000)).isEqualTo("test: 456");\n\n\t\tmd5 = DigestUtils.md5DigestAsHex("test: 456".getBytes());\n\t\tassertThat(md5).isEqualTo("76e2eabbf24a8c90dc3b4372c20a72cf");\n\t\tassertThat(configUtils.publishConfigCas("test.yaml", nacosConfigProperties.getGroup(), "test: 789", md5, "yaml")).isTrue();\n\t\tassertThat(configUtils.getConfig("test.yaml", nacosConfigProperties.getGroup(), 5000)).isEqualTo("test: 789");\n\t}\n\n\t@Test\n\tvoid testRemoveConfig() throws NacosException, InterruptedException {\n\t\tassertThat(configUtils.publishConfig("test1.yaml", nacosConfigProperties.getGroup(), "test: 123")).isTrue();\n\t\tThread.sleep(2000);\n\t\tassertThat( configUtils.getConfig("test1.yaml", nacosConfigProperties.getGroup(), 5000)).isEqualTo("test: 123");\n\n\t\tassertThat(configUtils.removeConfig("test1.yaml", nacosConfigProperties.getGroup())).isTrue();\n\t\tassertThat(configUtils.getConfig("test1.yaml", nacosConfigProperties.getGroup(), 5000)).isNull();\n\t}\n\n\t@Test\n\tvoid testGetServerStatus() {\n\t\tassertThat(configUtils.getServerStatus()).isEqualTo("UP");\n\t}\n\t// @formatter:on\n\n}\n\n\n\nNamingUtilsTest\n\n@Slf4j\n@SpringBootTest\n@RequiredArgsConstructor\n@ContextConfiguration(classes = { NamingUtils.class,\n\tNacosServiceManager.class,\n\tNacosDiscoveryProperties.class,\n\tApplicationEventPublisher.class,\n\tInetUtilsProperties.class,\n\tEnvironment.class,\n\tInetUtils.class,\n\tInetIPv6Utils.class })\n@TestConstructor(autowireMode = TestConstructor.AutowireMode.ALL)\nclass NamingUtilsTest {\n\n\tprivate final NamingUtils namingUtils;\n\n\tprivate final NacosDiscoveryProperties nacosDiscoveryProperties;\n\n\t@BeforeEach\n\tvoid setUp() {\n\t\tassertThat(nacosDiscoveryProperties).isNotNull();\n\t\tassertThat(nacosDiscoveryProperties.getNamespace()).isEqualTo("public");\n\t\tassertThat(nacosDiscoveryProperties.getServerAddr()).isEqualTo("127.0.0.1:8848");\n\t\tassertThat(nacosDiscoveryProperties.getGroup()).isEqualTo("DEFAULT_GROUP");\n\t\tassertThat(nacosDiscoveryProperties.getUsername()).isEqualTo("nacos");\n\t\tassertThat(nacosDiscoveryProperties.getPassword()).isEqualTo("nacos");\n\t\tassertThat(nacosDiscoveryProperties.getEndpoint()).isEqualTo("");\n\t\tassertThat(nacosDiscoveryProperties.getAccessKey()).isEqualTo("");\n\t\tassertThat(nacosDiscoveryProperties.getSecretKey()).isEqualTo("");\n\t\tassertThat(nacosDiscoveryProperties.getClusterName()).isEqualTo("nacos-cluster");\n\t\tassertThat(nacosDiscoveryProperties.getNacosProperties()).isNotNull();\n\t\tassertThat(namingUtils).isNotNull();\n\t}\n\n\t@Test\n\tvoid testCreateNamingService() throws Exception {\n\t\tNamingService namingService = NamingUtils.createNamingService(nacosDiscoveryProperties.getServerAddr());\n\t\tassertThat(namingService).isNotNull();\n\t\tnamingService = NamingUtils.createNamingService(nacosDiscoveryProperties.getNacosProperties());\n\t\tassertThat(namingService).isNotNull();\n\t}\n\n\t@Test\n\tvoid testIsNacosDiscoveryInfoChanged() {\n\t\tassertThat(namingUtils.isNacosDiscoveryInfoChanged(nacosDiscoveryProperties)).isFalse();\n\t}\n\n\t@Test\n\tvoid testGetAllInstances() throws NacosException, InterruptedException {\n\t\tassertThat(namingUtils.getAllInstances("test-service").isEmpty()).isTrue();\n\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.registerInstance("test-service", "127.0.0.1", 8080));\n\t\tThread.sleep(1000);\n\t\tassertThat(namingUtils.getAllInstances("test-service").isEmpty()).isFalse();\n\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.deregisterInstance("test-service", "127.0.0.1", 8080));\n\t\tThread.sleep(1000);\n\t\tassertThat(namingUtils.getAllInstances("test-service", "DEFAULT_GROUP").isEmpty()).isTrue();\n\n\t\tInstance instance = new Instance();\n\t\tinstance.setIp("127.0.0.1");\n\t\tinstance.setPort(8080);\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.registerInstance("test-service", instance));\n\t\tThread.sleep(1000);\n\t\tassertThat(namingUtils.getAllInstances("test-service", "DEFAULT_GROUP", false).isEmpty()).isFalse();\n\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.deregisterInstance("test-service", instance));\n\t\tThread.sleep(1000);\n\t\tassertThat(namingUtils.getAllInstances("test-service", false).isEmpty()).isTrue();\n\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.registerInstance("test-service", "DEFAULT_GROUP", instance));\n\t\tThread.sleep(1000);\n\t\tassertThat(namingUtils.getAllInstances("test-service", Collections.emptyList()).isEmpty()).isFalse();\n\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.deregisterInstance("test-service", "DEFAULT_GROUP", instance));\n\t\tThread.sleep(1000);\n\t\tassertThat(namingUtils.getAllInstances("test-service", "DEFAULT_GROUP", Collections.emptyList()).isEmpty()).isTrue();\n\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.registerInstance("test-service", "DEFAULT_GROUP", "127.0.0.1", 8080, nacosDiscoveryProperties.getClusterName()));\n\t\tThread.sleep(1000);\n\t\tassertThat(namingUtils.getAllInstances("test-service", List.of(nacosDiscoveryProperties.getClusterName()), false).isEmpty()).isFalse();\n\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.deregisterInstance("test-service", "DEFAULT_GROUP", "127.0.0.1", 8080, nacosDiscoveryProperties.getClusterName()));\n\t\tThread.sleep(1000);\n\t\tassertThat(namingUtils.getAllInstances("test-service", "DEFAULT_GROUP", List.of(nacosDiscoveryProperties.getClusterName()), false).isEmpty()).isTrue();\n\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.registerInstance("test-service", "DEFAULT_GROUP", "127.0.0.1", 8080));\n\t\tThread.sleep(1000);\n\t\tassertThat(namingUtils.getAllInstances("test-service", "DEFAULT_GROUP", false).isEmpty()).isFalse();\n\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.deregisterInstance("test-service", "DEFAULT_GROUP", "127.0.0.1", 8080));\n\t\tThread.sleep(1000);\n\t\tassertThat(namingUtils.getAllInstances("test-service", "DEFAULT_GROUP", false).isEmpty()).isTrue();\n\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.registerInstance("test-service", "127.0.0.1", 8080, nacosDiscoveryProperties.getClusterName()));\n\t\tThread.sleep(1000);\n\t\tassertThat(namingUtils.getAllInstances("test-service", "DEFAULT_GROUP", List.of(nacosDiscoveryProperties.getClusterName()), false).isEmpty()).isFalse();\n\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.deregisterInstance("test-service", "127.0.0.1", 8080, nacosDiscoveryProperties.getClusterName()));\n\t\tThread.sleep(1000);\n\t\tassertThat(namingUtils.getAllInstances("test-service", "DEFAULT_GROUP", List.of(nacosDiscoveryProperties.getClusterName()), false).isEmpty()).isTrue();\n\t}\n\n\t@Test\n\tvoid testSelectInstances() throws NacosException, InterruptedException {\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.registerInstance("test-service", "127.0.0.1", 8080, nacosDiscoveryProperties.getClusterName()));\n\t\tThread.sleep(1000);\n\t\tassertThat(namingUtils.selectInstances("test-service", true).isEmpty()).isFalse();\n\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.deregisterInstance("test-service", "127.0.0.1", 8080, nacosDiscoveryProperties.getClusterName()));\n\t\tThread.sleep(1000);\n\t\tassertThat(namingUtils.selectInstances("test-service", true).isEmpty()).isTrue();\n\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.registerInstance("test-service", "127.0.0.1", 8080, nacosDiscoveryProperties.getClusterName()));\n\t\tThread.sleep(1000);\n\t\tassertThat(namingUtils.selectInstances("test-service", true, false).isEmpty()).isFalse();\n\n\t\tassertThat(namingUtils.selectInstances("test-service", "DEFAULT_GROUP", true, false).isEmpty()).isFalse();\n\t\tassertThat(namingUtils.selectInstances("test-service", List.of(nacosDiscoveryProperties.getClusterName()), true).isEmpty()).isFalse();\n\t\tassertThat(namingUtils.selectInstances("test-service", "DEFAULT_GROUP", List.of(nacosDiscoveryProperties.getClusterName()), true, false).isEmpty()).isFalse();\n\t\tassertThat(namingUtils.selectInstances("test-service", List.of(nacosDiscoveryProperties.getClusterName()), true, false).isEmpty()).isFalse();\n\t\tassertThat(namingUtils.selectInstances("test-service", "DEFAULT_GROUP", true).isEmpty()).isFalse();\n\t\tassertThat(namingUtils.selectInstances("test-service", "DEFAULT_GROUP", List.of(nacosDiscoveryProperties.getClusterName()), true).isEmpty()).isFalse();\n\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.deregisterInstance("test-service", "127.0.0.1", 8080, nacosDiscoveryProperties.getClusterName()));\n\t\tThread.sleep(1000);\n\t\tassertThat(namingUtils.getAllInstances("test-service", "DEFAULT_GROUP", List.of(nacosDiscoveryProperties.getClusterName()), false).isEmpty()).isTrue();\n\t}\n\n\t@Test\n\tvoid testSelectOneHealthyInstance() throws NacosException, InterruptedException {\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.registerInstance("test-service", "127.0.0.1", 8080, nacosDiscoveryProperties.getClusterName()));\n\t\tThread.sleep(1000);\n\t\tassertThat(namingUtils.selectInstances("test-service", true).isEmpty()).isFalse();\n\n\t\tassertThat(namingUtils.selectOneHealthyInstance("test-service")).isNotNull();\n\t\tassertThat(namingUtils.selectOneHealthyInstance("test-service", "DEFAULT_GROUP")).isNotNull();\n\t\tassertThat(namingUtils.selectOneHealthyInstance("test-service", false)).isNotNull();\n\t\tassertThat(namingUtils.selectOneHealthyInstance("test-service", "DEFAULT_GROUP", false)).isNotNull();\n\t\tassertThat(namingUtils.selectOneHealthyInstance("test-service", List.of(nacosDiscoveryProperties.getClusterName()))).isNotNull();\n\t\tassertThat(namingUtils.selectOneHealthyInstance("test-service", "DEFAULT_GROUP", List.of(nacosDiscoveryProperties.getClusterName()))).isNotNull();\n\t\tassertThat(namingUtils.selectOneHealthyInstance("test-service", List.of(nacosDiscoveryProperties.getClusterName()), false)).isNotNull();\n\t\tassertThat(namingUtils.selectOneHealthyInstance("test-service", "DEFAULT_GROUP", List.of(nacosDiscoveryProperties.getClusterName()), false)).isNotNull();\n\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.deregisterInstance("test-service", "127.0.0.1", 8080, nacosDiscoveryProperties.getClusterName()));\n\t\tThread.sleep(1000);\n\t\tassertThat(namingUtils.selectInstances("test-service", true).isEmpty()).isTrue();\n\t}\n\n\t@Test\n\tvoid testSubscribeService() throws NacosException, InterruptedException {\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.registerInstance("test-service", "127.0.0.1", 8080, nacosDiscoveryProperties.getClusterName()));\n\t\tThread.sleep(1000);\n\t\tassertThat(namingUtils.selectInstances("test-service", true).isEmpty()).isFalse();\n\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.subscribe("test-service", "DEFAULT_GROUP", evt -> assertThat(evt).isNotNull()));\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.unsubscribe("test-service", "DEFAULT_GROUP", evt -> assertThat(evt).isNotNull()));\n\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.subscribe("test-service", evt -> assertThat(evt).isNotNull()));\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.unsubscribe("test-service", evt -> assertThat(evt).isNotNull()));\n\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.subscribe("test-service", "DEFAULT_GROUP", List.of(nacosDiscoveryProperties.getClusterName()), evt -> assertThat(evt).isNotNull()));\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.unsubscribe("test-service", "DEFAULT_GROUP", List.of(nacosDiscoveryProperties.getClusterName()), evt -> assertThat(evt).isNotNull()));\n\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.subscribe("test-service", List.of(nacosDiscoveryProperties.getClusterName()), evt -> assertThat(evt).isNotNull()));\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.unsubscribe("test-service", List.of(nacosDiscoveryProperties.getClusterName()), evt -> assertThat(evt).isNotNull()));\n\n\t\t// 只选择订阅ip为`127.0`开头的实例。\n\t\tNamingSelector selector = NamingSelectorFactory.newIpSelector("127.0.*");\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.subscribe("test-service", "DEFAULT_GROUP", selector, evt -> assertThat(evt).isNotNull()));\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.unsubscribe("test-service", "DEFAULT_GROUP", selector, evt -> assertThat(evt).isNotNull()));\n\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.subscribe("test-service", selector, evt -> assertThat(evt).isNotNull()));\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.unsubscribe("test-service", selector, evt -> assertThat(evt).isNotNull()));\n\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.deregisterInstance("test-service", "127.0.0.1", 8080, nacosDiscoveryProperties.getClusterName()));\n\t\tThread.sleep(1000);\n\t\tassertThat(namingUtils.selectInstances("test-service", true).isEmpty()).isTrue();\n\t}\n\n\t@Test\n\tvoid testGetServicesOfServer() throws NacosException, InterruptedException {\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.registerInstance("test-service", "DEFAULT_GROUP", "127.0.0.1", 8080, nacosDiscoveryProperties.getClusterName()));\n\t\tThread.sleep(1000);\n\t\tassertThat(namingUtils.selectInstances("test-service", true).isEmpty()).isFalse();\n\n\t\tassertThat(namingUtils.getServicesOfServer(1, 10, "DEFAULT_GROUP").getCount() > 0).isTrue();\n\t\tassertThat(namingUtils.getServicesOfServer(1, 10).getCount() > 0).isTrue();\n\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.subscribe("test-service", "DEFAULT_GROUP", evt -> assertThat(evt).isNotNull()));\n\t\tassertThat(namingUtils.getSubscribeServices().isEmpty()).isFalse();\n\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.deregisterInstance("test-service", "DEFAULT_GROUP", "127.0.0.1", 8080, nacosDiscoveryProperties.getClusterName()));\n\t\tThread.sleep(1000);\n\t\tassertThat(namingUtils.selectInstances("test-service", true).isEmpty()).isTrue();\n\t}\n\n\t@Test\n\tvoid testBatchRegisterInstance() throws NacosException, InterruptedException {\n\t\tInstance instance = new Instance();\n\t\tinstance.setIp("127.0.0.1");\n\t\tinstance.setPort(8080);\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.batchRegisterInstance("test-service", "DEFAULT_GROUP", List.of(instance)));\n\t\tThread.sleep(1000);\n\t\tassertThat(namingUtils.selectInstances("test-service", true).size()).isEqualTo(1);\n\n\t\tassertThatNoException().isThrownBy(() -> namingUtils.batchDeregisterInstance("test-service", "DEFAULT_GROUP", List.of(instance)));\n\t\tThread.sleep(1000);\n\t\tassertThat(namingUtils.selectInstances("test-service", false).size()).isEqualTo(0);\n\t}\n\n\t@Test\n\tvoid testNacosServiceShutDown() throws InterruptedException {\n\t\tThread.sleep(1000);\n\t\tassertThatNoException().isThrownBy(namingUtils::nacosServiceShutDown);\n\t}\n\n}\n// @formatter:on\n\n\nspring:\n  config:\n    import:\n\t  # 导入配置文件\n      - optional:nacos:application-common.yaml?refreshEnabled=true&group=DEFAULT_GROUP\n  cloud:\n    nacos:\n      discovery:\n\t\t# 开启服务注册&发现\n\t\tenabled: true\n\t\t# 服务发现地址\n        server-addr: nacos:8848\n\t\t# 命名空间\n\t\tnamespace: public\n\t\t# 用户名\n\t\tusername: nacos\n        # 密码\n\t\tpassword: nacos\n\t\t# 分组名称\n        group: DEFAULT_GROUP\n        # https\n        secure: true\n        # true 临时 false 持久\n        ephemeral: true\n        # 集群名称\n        cluster-name: nacos-cluster\n\t\theart-beat:\n\t\t\t# 开启心跳\n\t\t\tenabled: true\n\t\t# 每10秒发送一次心跳【单位毫秒】\n\t\theart-beat-interval: 10000\n\t\t# 超过30秒，则标记为不健康\n\t\theart-beat-timeout: 30000\n      config:\n\t\t# 开启配置中心\n\t\tenabled: true\n\t\t# 服务配置的地址\n        server-addr: nacos:8848\n\t\t# 命名空间\n        namespace: public\n\t\t# 用户名\n        username: nacos\n\t\t# 密码\n        password: nacos\n\t\t# 集群名称\n        cluster-name: nacos-cluster\n        # https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/spring-cloud-alibaba-docs/src/main/asciidoc-zh/nacos-config.adoc\n        # 指定读取的文件格式\n        file-extension: yaml\n\t\t# 分组名称\n        group: DEFAULT_GROUP\n\t\t# 开启刷新\n        refresh-enabled: true\n\n\n我是老寇，我们下次再见啦！',normalizedContent:'小伙伴们，你们好，欢迎来到老寇云平台，这个组件【nacos】是配置中心&服务注册&发现\n\nnacos官方地址【最新版】\n\n\n# nacos介绍【摘抄自官方文档】\n\nnacos /nɑ:kəʊs/ 是 dynamic naming and configuration service的首字母简称，一个更易于构建云原生应用的动态服务发现、 配置管理和服务管理平台。\n\nnacos 致力于帮助您发现、配置和管理微服务。nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。\n\nnacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 nacos 是构建以**“服务”**为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。\n\n\n# nacos架构\n\n阅读架构图，我们可以得到以下结论\n\n * nacos客户端配置了多级缓存【内存+文件】，即使nacos集群不可用，仍然可以读取本地缓存\n * nacos客户端与服务端通信采用grpc，实现数据的高效传输，减少网络延迟\n * nacos服务端将数据持久化到数据库或磁盘，确保数据不丢失\n * nacos客户端发送心跳检测，超过时间标记为不健康服务，nacos服务端通过心跳检测，将故障节点从路由表剔除\n * nacos使用raft协议管理集群元数据和配置数据，确保数据强一致性【数据写入多数节点（n/2+1）确认，避免出现脑裂问题】\n * nacos服务注册数据默认存在内存中，通过distro协议【ap模式】实现最终一致性\n\n总之，nacos可以通过增加节点来水平扩展，提升系统的整体性能和承载能力\n\n\n# 项目部署\n\n\n\njasypt:\n\tencryptor:\n\t\t# 加密算法\n\t\t# springboot2加密密钥 => 使用md5anddes\n\t\talgorithm: pbewithmd5anddes\n\t\t# iv生成类\n\t\tiv-generator-classname: org.jasypt.iv.noivgenerator\n\t\t# 密钥\n\t\tpassword: laokou\n\ndb:\n\t# 数据库数量，请按照作者的来，请不要瞎几把改\n\t# 数据库数量，请按照作者的来，请不要瞎几把改\n\t# 数据库数量，请按照作者的来，请不要瞎几把改\n\tnum: 1\n\t# 数据库连接地址\n\turl.\'0\': jdbc:postgresql://postgresql:5432/kcloud_platform?tcpkeepalive=true&rewritebatchedinserts=true&applicationname=laokou-nacos&usessl=false&rewritebatchedinserts=true&stringtype=unspecified\n\t# 数据库用户名\n\tuser.\'0\': root\n\t# 数据库密码\n\tpassword.\'0\': laokou123\n\t# see datasourcepoolproperties 与 externaldatasourceproperties\n\tpool:\n\t\tconfig:\n\t\t\t# see datasourcepoolproperties\n\t\t\t# see hikariconfig\n\t\t\t# 最小空闲连接数\n\t\t\tminimum-idle: 5\n\t\t\t# 空闲连接的最大存活时间\n\t\t\tidle-timeout: 600000\n\t\t\t# 连接时间\n\t\t\tconnection-timeout: 30000\n\t\t\t# 超时时间\n\t\t\tvalidation-timeout: 10000\n\t\t\t# 最大连接数\n\t\t\tmaximum-pool-size: 50\n\t\t\t# 数据库驱动\n\t\t\tdriver-class-name: org.postgresql.driver\nmanagement:\n\tmetrics:\n\t\texport:\n\t\t\telastic:\n\t\t\t\t# 不暴露指标到elastic\n\t\t\t\tenabled: false\n\t\t\tinflux:\n\t\t\t\t# 不暴露指标到influx\n\t\t\t\tenabled: false\nnacos:\n\tconfig:\n\t\tpush:\n\t\t\t# 配置推送失败时的最大重试次数\n\t\t\tmaxretrytime: 50\n\tcore:\n\t\tauth:\n\t\t\tcaching:\n\t\t\t\t# 启用认证信息的缓存，减少重复认证的开销\n\t\t\t\tenabled: true\n\t\t\tenable:\n\t\t\t\t# 禁止通过 user-agent 请求头进行白名单认证 => 设置为 false 表示所有请求必须携带有效凭证（如 token）\n\t\t\t\tuseragentauthwhite: false\n\t\t\tenabled: true\n\t\t\tplugin:\n\t\t\t\tnacos:\n\t\t\t\t\ttoken:\n\t\t\t\t\t\tcache:\n\t\t\t\t\t\t\t# 禁用 token 缓存，每次请求需重新验证 token\n\t\t\t\t\t\t\tenable: false\n\t\t\t\t\t\texpire:\n\t\t\t\t\t\t\t#  token 的有效期，超时后需重新获取\n\t\t\t\t\t\t\tseconds: 18000\n\t\t\t\t\t\tsecret:\n\t\t\t\t\t\t\t# 生成和验证 token 的密钥\n\t\t\t\t\t\t\tkey: secretkey012345678901234567890123456789012345678901234567890123456789\n\t\t\tserver:\n\t\t\t\tidentity:\n\t\t\t\t\t# 服务节点间通信的认证标识，用于集群内部身份校验\n\t\t\t\t\tkey: serveridentity\n\t\t\t\t\tvalue: security\n\t\t\tsystem:\n\t\t\t\t# 指定系统类型为 nacos\n\t\t\t\ttype: nacos\n\tistio:\n\t\tmcp:\n\t\t\tserver:\n\t\t\t\t# 禁用 istio 的 mesh configuration protocol (mcp) 服务 =>  若不使用 istio 服务网格，可关闭此功能\n\t\t\t\tenabled: false\n\tnaming:\n\t\tempty-service:\n\t\t\t# 自动清理无实例注册的空服务\n\t\t\tauto-clean: true\n\t\t\tclean:\n\t\t\t\t# 服务清理任务的初始延迟时间\n\t\t\t\tinitial-delay-ms: 50000\n\t\t\t\t# 服务清理任务的执行间隔，每 30 秒检查一次\n\t\t\t\tperiod-time-ms: 30000\n\tsecurity:\n\t\tignore:\n\t\t\t# 配置无需认证即可访问的 url 路径，通常用于静态资源或健康检查\n\t\t\turls: /,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-ui/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**\nserver:\n\terror:\n\t\t# 应用程序在发生错误时，http 响应中始终返回具体的错误消息\n\t\tinclude-message: always\n\t# 端口\n\tport: ${server_port:8848}\n\tservlet:\n\t\t# 请求上下文路径\n\t\tcontextpath: /nacos\n\tundertow:\n\t\tthreads:\n\t\t\t# 设置io线程数，来执行非阻塞任务，负责多个连接数\n\t\t\tio: 16\n\t\t\t# 工作线程数\n\t\t\tworker: 512\n\t\t# 每块buffer的空间大小\n\t\tbuffer-size: 2048\n\t\t# 分配堆外内存\n\t\tdirect-buffers: true\n\t\taccesslog:\n\t\t\t# 开启日志\n\t\t\tenabled: true\n\tssl:\n\t\t# 关闭证书\n\t\tenabled: false\n\thttp2:\n\t\t# 关闭http2\n\t\tenabled: false\n\t# 优雅停机\n\tshutdown: graceful\nspring:\n\tmain:\n\t\t# banner模式\n\t\tbanner-mode: console\n\tapplication:\n\t\t# 应用名称\n\t\tname: laokou-nacos\n\tprofiles:\n\t\t# 环境\n\t\tactive: test\n\tsql:\n\t\tinit:\n\t\t\t# 指定数据库类型\n\t\t\tplatform: postgresql\n\tliquibase:\n\t\t# 开启数据库版本管理工具\n\t\tenabled: true\n\t\t# 数据库版本变更配置\n\t\tchange-log: classpath:/db/changelog/db.changelog-master.xml\n\t\t# 数据库用户名\n\t\tuser: root\n\t\t# 数据库密码\n\t\tpassword: laokou123\n\t\t# 数据库连接地址\n\t\turl: jdbc:postgresql://postgresql:5432/kcloud_platform_nacos?tcpkeepalive=true&rewritebatchedinserts=true&applicationname=laokou-nacos&usessl=false&rewritebatchedinserts=true&stringtype=unspecified\n\n\n\n# java sdk使用\n\nconfigutil\n\npublic final class configutil {\n\n\t/**\n\t * 获取分组名称.\n\t */\n\tpublic string getgroup();\n\n\t/**\n\t * 创建配置服务.\n\t * @param serveraddr 服务地址\n\t */\n\tpublic static configservice createconfigservice(string serveraddr);\n\n\t/**\n\t * 创建服务地址.\n\t * @param properties 配置\n\t */\n\tpublic static configservice createconfigservice(properties properties);\n\n\t// @formatter:off\n\t/**\n\t * 获取配置.\n\t * @param dataid 配置 id，采用类似 package.class（如com.taobao.tc.refund.log.level）的命名规则保证全局唯一性，class 部分建议是配置的业务含义。全部字符小写。只允许英文字符和 4 种特殊字符（”.”、”:”、”-”、”_”），不超过 256 字节\n\t * @param group 配置分组，建议填写产品名:模块名（nacos）保证唯一性，只允许英文字符和4种特殊字符（”.”、”:”、”-”、”_”），不超过 128 字节\n\t * @param timeoutms 读取配置超时时间，单位 ms，推荐值 3000\n\t * @return string\n\t */\n\tpublic string getconfig(string dataid, string group, long timeoutms);\n\t// @formatter:on\n\n\t// @formatter:off\n\t/**\n\t * 获取配置.\n\t * @param dataid 配置 id，采用类似 package.class（如com.taobao.tc.refund.log.level）的命名规则保证全局唯一性，class 部分建议是配置的业务含义。全部字符小写。只允许英文字符和 4 种特殊字符（”.”、”:”、”-”、”_”），不超过 256 字节\n\t * @param group 配置分组，建议填写产品名:模块名（nacos）保证唯一性，只允许英文字符和4种特殊字符（”.”、”:”、”-”、”_”），不超过 128 字节\n\t * @param timeoutms 读取配置超时时间，单位 ms，推荐值 3000\n\t * @param listener 监听器，配置变更进入监听器的回调函数\n\t * @return string\n\t */\n\tpublic string getconfig(string dataid, string group, long timeoutms, listener listener);\n\t// @formatter:on\n\n\t// @formatter:off\n\t/**\n\t * 增加监听配置.\n\t * @param dataid 配置 id，采用类似 package.class（如com.taobao.tc.refund.log.level）的命名规则保证全局唯一性，class 部分建议是配置的业务含义。全部字符小写。只允许英文字符和 4 种特殊字符（”.”、”:”、”-”、”_”），不超过 256 字节\n\t * @param group 配置分组，建议填写产品名:模块名（nacos）保证唯一性，只允许英文字符和4种特殊字符（”.”、”:”、”-”、”_”），不超过 128 字节\n\t * @param listener 监听器，配置变更进入监听器的回调函数\n\t */\n\tpublic void addlistener(string dataid, string group, listener listener);\n\t// @formatter:on\n\n\t// @formatter:off\n\t/**\n\t * 删除监听配置.\n\t * @param dataid 配置 id，采用类似 package.class（如com.taobao.tc.refund.log.level）的命名规则保证全局唯一性，class 部分建议是配置的业务含义。全部字符小写。只允许英文字符和 4 种特殊字符（”.”、”:”、”-”、”_”），不超过 256 字节\n\t * @param group 配置分组，建议填写产品名:模块名（nacos）保证唯一性，只允许英文字符和4种特殊字符（”.”、”:”、”-”、”_”），不超过 128 字节\n\t * @param listener 监听器，配置变更进入监听器的回调函数\n\t */\n\tpublic void removelistener(string dataid, string group, listener listener);\n\t// @formatter:on\n\n\t// @formatter:off\n\t/**\n\t * 发布配置.\n\t * @param dataid 配置 id，采用类似 package.class（如com.taobao.tc.refund.log.level）的命名规则保证全局唯一性，class 部分建议是配置的业务含义。全部字符小写。只允许英文字符和 4 种特殊字符（”.”、”:”、”-”、”_”），不超过 256 字节\n\t * @param group 配置分组，建议填写产品名:模块名（nacos）保证唯一性，只允许英文字符和4种特殊字符（”.”、”:”、”-”、”_”），不超过 128 字节\n\t * @param content 配置内容\n\t */\n\tpublic boolean publishconfig(string dataid, string group, string content);\n\t// @formatter:on\n\n\t// @formatter:off\n\t/**\n\t * 发布配置.\n\t * @param dataid 配置 id，采用类似 package.class（如com.taobao.tc.refund.log.level）的命名规则保证全局唯一性，class 部分建议是配置的业务含义。全部字符小写。只允许英文字符和 4 种特殊字符（”.”、”:”、”-”、”_”），不超过 256 字节\n\t * @param group 配置分组，建议填写产品名:模块名（nacos）保证唯一性，只允许英文字符和4种特殊字符（”.”、”:”、”-”、”_”），不超过 128 字节\n\t * @param content 配置内容\n\t * @param type 配置类型【properties/xml/json/text/html/yaml/toml/unset】，默认为text\n\t */\n\tpublic boolean publishconfig(string dataid, string group, string content, string type);\n\t// @formatter:on\n\n\t// @formatter:off\n\t/**\n\t * 发布配置【cas】.\n\t * @param dataid 配置 id，采用类似 package.class（如com.taobao.tc.refund.log.level）的命名规则保证全局唯一性，class 部分建议是配置的业务含义。全部字符小写。只允许英文字符和 4 种特殊字符（”.”、”:”、”-”、”_”），不超过 256 字节\n\t * @param group 配置分组，建议填写产品名:模块名（nacos）保证唯一性，只允许英文字符和4种特殊字符（”.”、”:”、”-”、”_”），不超过 128 字节\n\t * @param content 配置内容\n\t * @param casmd5 配置内容md5\n\t */\n\tpublic boolean publishconfigcas(string dataid, string group, string content, string casmd5);\n\t// @formatter:on\n\n\t// @formatter:off\n\t/**\n\t * 发布配置【cas】.\n\t * @param dataid 配置 id，采用类似 package.class（如com.taobao.tc.refund.log.level）的命名规则保证全局唯一性，class 部分建议是配置的业务含义。全部字符小写。只允许英文字符和 4 种特殊字符（”.”、”:”、”-”、”_”），不超过 256 字节\n\t * @param group 配置分组，建议填写产品名:模块名（nacos）保证唯一性，只允许英文字符和4种特殊字符（”.”、”:”、”-”、”_”），不超过 128 字节\n\t * @param content 配置内容\n\t * @param casmd5 配置内容md5\n\t * @param type 配置类型【properties/xml/json/text/html/yaml/toml/unset】，默认为text\n\t */\n\tpublic boolean publishconfigcas(string dataid, string group, string content, string casmd5, string type);\n\t// @formatter:on\n\n\t// @formatter:off\n\t/**\n\t * 移除配置.\n\t * @param dataid 配置 id，采用类似 package.class（如com.taobao.tc.refund.log.level）的命名规则保证全局唯一性，class 部分建议是配置的业务含义。全部字符小写。只允许英文字符和 4 种特殊字符（”.”、”:”、”-”、”_”），不超过 256 字节\n\t * @param group 配置分组，建议填写产品名:模块名（nacos）保证唯一性，只允许英文字符和4种特殊字符（”.”、”:”、”-”、”_”），不超过 128 字节\n\t */\n\tpublic boolean removeconfig(string dataid, string group);\n\t// @formatter:on\n\n\t// @formatter:off\n\t/**\n\t * 获取服务状态.\n\t */\n\tpublic string getserverstatus();\n\t// @formatter:on\n\n\t// @formatter:off\n\t/**\n\t * 获取配置服务.\n\t */\n\tprivate configservice getconfigservice();\n\t// @formatter:on\n\n}\n\n\nnamingutil.util\n\npublic final class namingutil {\n\n\t/**\n\t * 创建服务发现.\n\t * @param serveraddr 服务地址\n\t */\n\tpublic static namingservice createnamingservice(string serveraddr);\n\n\t/**\n\t * 创建服务发现.\n\t * @param properties 配置\n\t */\n\tpublic static namingservice createnamingservice(properties properties);\n\n\t/**\n\t * nacos优雅停机.\n\t */\n\tpublic void nacosserviceshutdown();\n\n\t/**\n\t * 获取命名维护服务.\n\t * @param properties 配置\n\t */\n\tpublic namingmaintainservice getnamingmaintainservice(properties properties);\n\n\t/**\n\t * nacos注册服务的信息是否变更.\n\t */\n\tpublic boolean isnacosdiscoveryinfochanged(nacosdiscoveryproperties currentnacosdiscoverypropertiescache);\n\n\t/**\n\t * 通过服务id获取服务实例.\n\t * @param serviceid 服务id\n\t * @return 服务实例\n\t */\n\tpublic list<instance> getallinstances(string serviceid);\n\n\t/**\n\t * 通过服务id和分组获取服务实例.\n\t * @param serviceid 服务id\n\t * @param group 分组\n\t */\n\tpublic list<instance> getallinstances(string serviceid, string group);\n\n\t/**\n\t * 通过服务id和订阅标识获取所有服务实例.\n\t * @param serviceid 服务id\n\t * @param subscribe 是否订阅\n\t */\n\tpublic list<instance> getallinstances(string serviceid, boolean subscribe);\n\n\t/**\n\t * 通过服务id、分组和订阅标识获取所有服务实例.\n\t * @param serviceid 服务id\n\t * @param group 分组\n\t * @param subscribe 是否订阅\n\t */\n\tpublic list<instance> getallinstances(string serviceid, string group, boolean subscribe);\n\n\t/**\n\t * 通过服务id和集群列表获取所有服务实例.\n\t * @param serviceid 服务id\n\t * @param clusters 集群列表\n\t */\n\tpublic list<instance> getallinstances(string serviceid, list<string> clusters);\n\n\t/**\n\t * 通过服务id、分组和集群列表获取所有服务实例.\n\t * @param serviceid 服务id\n\t * @param group 分组\n\t * @param clusters 集群列表\n\t */\n\tpublic list<instance> getallinstances(string serviceid, string group, list<string> clusters);\n\n\t/**\n\t * 通过服务id、集群列表和订阅标识获取所有服务实例.\n\t * @param serviceid 服务id\n\t * @param clusters 集群列表\n\t * @param subscribe 是否订阅\n\t */\n\tpublic list<instance> getallinstances(string serviceid, list<string> clusters, boolean subscribe);\n\n\t/**\n\t * 通过服务id、分组、集群列表和订阅标识获取所有服务实例.\n\t * @param serviceid 服务id\n\t * @param group 分组\n\t * @param clusters 集群列表\n\t * @param subscribe 是否订阅\n\t */\n\tpublic list<instance> getallinstances(string serviceid, string group, list<string> clusters, boolean subscribe);\n\n\t/**\n\t * 注册实例.\n\t * @param serviceid 服务id\n\t * @param ip 服务ip\n\t * @param port 服务端口\n\t */\n\tpublic void registerinstance(string serviceid, string ip, int port);\n\n\t/**\n\t * 注册服务.\n\t * @param serviceid 服务id\n\t * @param group 服务分组\n\t * @param ip 服务ip\n\t * @param port 服务端口\n\t */\n\tpublic void registerinstance(string serviceid, string group, string ip, int port);\n\n\t/**\n\t * 注册服务实例.\n\t * @param serviceid 服务id\n\t * @param clustername 集群名称\n\t * @param ip 服务ip\n\t * @param port 服务端口\n\t */\n\tpublic void registerinstance(string serviceid, string ip, int port, string clustername);\n\n\t/**\n\t * 注册服务实例.\n\t * @param serviceid 服务id\n\t * @param clustername 集群名称\n\t * @param ip 服务ip\n\t * @param port 服务端口\n\t * @param group 服务分组\n\t */\n\tpublic void registerinstance(string serviceid, string group, string ip, int port, string clustername);\n\n\t/**\n\t * 注册服务实例.\n\t * @param serviceid 服务id\n\t * @param instance 服务实例\n\t */\n\tpublic void registerinstance(string serviceid, instance instance);\n\n\t/**\n\t * 注册服务实例.\n\t * @param serviceid 服务id\n\t * @param group 服务分组\n\t * @param instance 服务实例\n\t */\n\tpublic void registerinstance(string serviceid, string group, instance instance);\n\n\t/**\n\t * 注销服务实例.\n\t * @param serviceid 服务id\n\t * @param ip 服务ip\n\t * @param port 服务端口\n\t */\n\tpublic void deregisterinstance(string serviceid, string ip, int port);\n\n\t/**\n\t * 注销服务实例.\n\t * @param serviceid 服务id\n\t * @param group 服务分组\n\t * @param ip 服务ip\n\t * @param port 服务端口\n\t */\n\tpublic void deregisterinstance(string serviceid, string group, string ip, int port);\n\n\t/**\n\t * 注销服务实例.\n\t * @param serviceid 服务id\n\t * @param clustername 集群名称\n\t * @param ip 服务ip\n\t * @param port 服务端口\n\t */\n\tpublic void deregisterinstance(string serviceid, string ip, int port, string clustername);\n\n\t/**\n\t * 注销服务实例.\n\t * @param serviceid 服务id\n\t * @param clustername 集群名称\n\t * @param ip 服务ip\n\t * @param port 服务端口\n\t * @param group 服务分组\n\t */\n\tpublic void deregisterinstance(string serviceid, string group, string ip, int port, string clustername);\n\n\t/**\n\t * 注销服务实例.\n\t * @param serviceid 服务id\n\t * @param instance 服务实例\n\t */\n\tpublic void deregisterinstance(string serviceid, instance instance);\n\n\t/**\n\t * 注销服务实例.\n\t * @param serviceid 服务id\n\t * @param instance 服务实例\n\t * @param group 服务分组\n\t */\n\tpublic void deregisterinstance(string serviceid, string group, instance instance);\n\n\t/**\n\t * 根据服务id和健康标识查询服务实例.\n\t * @param serviceid 服务id\n\t * @param healthy 是否健康\n\t */\n\tpublic list<instance> selectinstances(string serviceid, boolean healthy);\n\n\t/**\n\t * 根据服务id、分组和健康标识查询服务实例.\n\t * @param serviceid 服务id\n\t * @param group 分组\n\t * @param healthy 是否健康\n\t */\n\tpublic list<instance> selectinstances(string serviceid, string group, boolean healthy);\n\n\t/**\n\t * 根据服务id和集群列表查询服务实例.\n\t * @param serviceid 服务id\n\t * @param healthy 是否健康\n\t * @param subscribe 是否订阅\n\t */\n\tpublic list<instance> selectinstances(string serviceid, boolean healthy, boolean subscribe);\n\n\t/**\n\t * 根据服务id、分组和集群列表查询服务实例.\n\t * @param serviceid 服务id\n\t * @param group 分组\n\t * @param healthy 是否健康\n\t * @param subscribe 是否订阅\n\t */\n\tpublic list<instance> selectinstances(string serviceid, string group, boolean healthy, boolean subscribe);\n\n\t/**\n\t * 根据服务id、集群列表和健康查询服务实例.\n\t * @param serviceid 服务id\n\t * @param clusters 集群列表\n\t * @param healthy 是否健康\n\t */\n\tpublic list<instance> selectinstances(string serviceid, list<string> clusters, boolean healthy);\n\n\t/**\n\t * 根据服务id、分组、集群列表和健康查询服务实例.\n\t * @param serviceid 服务id\n\t * @param group 分组\n\t * @param clusters 集群列表\n\t * @param healthy 是否健康\n\t */\n\tpublic list<instance> selectinstances(string serviceid, string group, list<string> clusters, boolean healthy);\n\n\t/**\n\t * 根据服务id、集群列表、健康和订阅查询服务实例.\n\t * @param serviceid 服务id\n\t * @param clusters 集群列表\n\t * @param healthy 是否健康\n\t * @param subscribe 是否订阅\n\t */\n\tpublic list<instance> selectinstances(string serviceid, list<string> clusters, boolean healthy, boolean subscribe);\n\n\t/**\n\t * 根据服务id、分组、集群列表、健康和订阅查询服务实例.\n\t * @param serviceid 服务id\n\t * @param group 分组\n\t * @param clusters 集群列表\n\t * @param healthy 是否健康\n\t * @param subscribe 是否订阅\n\t */\n\tpublic list<instance> selectinstances(string serviceid, string group, list<string> clusters, boolean healthy, boolean subscribe);\n\n\t/**\n\t * 根据服务id查询健康的服务实例.\n\t * @param serviceid 服务id\n\t */\n\tpublic instance selectonehealthyinstance(string serviceid);\n\n\t/**\n\t * 根据服务id和分组查询健康的服务实例.\n\t * @param serviceid 服务id\n\t * @param group 分组\n\t */\n\tpublic instance selectonehealthyinstance(string serviceid, string group);\n\n\t/**\n\t * 根据服务id和订阅标识查询健康的服务实例.\n\t * @param serviceid 服务id\n\t * @param subscribe 是否订阅\n\t */\n\tpublic instance selectonehealthyinstance(string serviceid, boolean subscribe);\n\n\t/**\n\t * 根据服务id、分组和订阅标识查询一个健康的服务实例.\n\t * @param serviceid 服务id\n\t * @param group 分组\n\t * @param subscribe 是否订阅\n\t */\n\tpublic instance selectonehealthyinstance(string serviceid, string group, boolean subscribe);\n\n\t/**\n\t * 根据服务id和集群列表查询一个健康的服务实例.\n\t * @param serviceid 服务id\n\t * @param clusters 集群列表\n\t */\n\tpublic instance selectonehealthyinstance(string serviceid, list<string> clusters);\n\n\t/**\n\t * 根据服务id、分组和集群列表查询一个健康的服务实例.\n\t * @param serviceid 服务id\n\t * @param group 分组\n\t * @param clusters 集群列表\n\t */\n\tpublic instance selectonehealthyinstance(string serviceid, string group, list<string> clusters);\n\n\t/**\n\t * 根据服务id、集群列表和订阅查询一个健康的服务实例.\n\t * @param serviceid 服务id\n\t * @param clusters 集群列表\n\t * @param subscribe 是否订阅\n\t */\n\tpublic instance selectonehealthyinstance(string serviceid, list<string> clusters, boolean subscribe);\n\n\t/**\n\t * 根据服务id、分组、集群列表和订阅查询一个健康的服务实例.\n\t * @param serviceid 服务id\n\t * @param group 分组\n\t * @param clusters 集群列表\n\t * @param subscribe 是否订阅\n\t */\n\tpublic instance selectonehealthyinstance(string serviceid, string group, list<string> clusters, boolean subscribe);\n\n\t/**\n\t * 根据服务id订阅服务并监听.\n\t * @param serviceid 服务id\n\t * @param listener 监听器\n\t */\n\tpublic void subscribe(string serviceid, eventlistener listener);\n\n\t/**\n\t * 根据服务id和分组订阅服务并监听.\n\t * @param serviceid 服务id\n\t * @param group 分组\n\t * @param listener 监听器\n\t */\n\tpublic void subscribe(string serviceid, string group, eventlistener listener);\n\n\t/**\n\t * 根据服务id和集群列表订阅服务并监听.\n\t * @param serviceid 服务id\n\t * @param clusters 集群列表\n\t * @param listener 监听器\n\t */\n\tpublic void subscribe(string serviceid, list<string> clusters, eventlistener listener);\n\n\t/**\n\t * 根据服务id、分组和集群列表订阅服务并监听.\n\t * @param serviceid 服务id\n\t * @param group 分组\n\t * @param clusters 集群列表\n\t * @param listener 监听器\n\t */\n\tpublic void subscribe(string serviceid, string group, list<string> clusters, eventlistener listener);\n\n\t/**\n\t * 根据服务id取消订阅并监听.\n\t * @param serviceid 服务id\n\t * @param listener 监听器\n\t */\n\tpublic void unsubscribe(string serviceid, eventlistener listener);\n\n\t/**\n\t * 根据服务id和分组取消订阅并监听.\n\t * @param serviceid 服务id\n\t * @param group 分组\n\t * @param listener 监听器\n\t */\n\tpublic void unsubscribe(string serviceid, string group, eventlistener listener);\n\n\t/**\n\t * 根据服务id和集群列表取消订阅并监听.\n\t * @param serviceid 服务id\n\t * @param clusters 集群列表\n\t * @param listener 监听器\n\t */\n\tpublic void unsubscribe(string serviceid, list<string> clusters, eventlistener listener);\n\n\t/**\n\t * 根据服务id、分组和集群列表取消订阅并监听.\n\t * @param serviceid 服务id\n\t * @param group 分组\n\t * @param clusters 集群列表\n\t * @param listener 监听器\n\t */\n\tpublic void unsubscribe(string serviceid, string group, list<string> clusters, eventlistener listener);\n\n\t/**\n\t * 根据服务id、分组和服务实例列表批量注册服务实例.\n\t * @param serviceid 服务id\n\t * @param group 分组\n\t * @param instances 服务实例列表\n\t */\n\tpublic void batchregisterinstance(string serviceid, string group, list<instance> instances);\n\n\t/**\n\t * 根据服务id和服务实例列表批量取消注册服务实例.\n\t * @param serviceid 服务id\n\t * @param group 分组\n\t * @param instances 服务实例列表\n\t */\n\tpublic void batchderegisterinstance(string serviceid, string group, list<instance> instances);\n\n\t/**\n\t * 根据服务id和选择器订阅并监听事件.\n\t * @param serviceid 服务id\n\t * @param selector 选择器\n\t * @param listener 事件监听器\n\t */\n\tpublic void subscribe(string serviceid, namingselector selector, eventlistener listener);\n\n\t/**\n\t * 根据服务id、分组和选择器订阅并监听事件.\n\t * @param serviceid 服务id\n\t * @param group 分组\n\t * @param selector 选择器\n\t * @param listener 事件监听器\n\t */\n\tpublic void subscribe(string serviceid, string group, namingselector selector, eventlistener listener);\n\n\t/**\n\t * 根据服务id和选择器取消订阅并监听事件.\n\t * @param serviceid 服务id\n\t * @param selector 选择器\n\t * @param listener 事件监听器\n\t */\n\tpublic void unsubscribe(string serviceid, namingselector selector, eventlistener listener);\n\n\t/**\n\t * 根据服务id、分组和选择器取消订阅并监听事件.\n\t * @param serviceid 服务id\n\t * @param group 分组\n\t * @param selector 选择器\n\t * @param listener 事件监听器\n\t */\n\tpublic void unsubscribe(string serviceid, string group, namingselector selector, eventlistener listener);\n\n\t/**\n\t * 分页获取服务列表.\n\t * @param pageno 页数\n\t * @param pagesize 条数\n\t */\n\tpublic listview<string> getservicesofserver(int pageno, int pagesize);\n\n\t/**\n\t * 根据分组分页获取服务列表.\n\t * @param pageno 页数\n\t * @param pagesize 条数\n\t * @param group 分组\n\t */\n\tpublic listview<string> getservicesofserver(int pageno, int pagesize, string group);\n\n\t/**\n\t * 获取订阅服务列表.\n\t */\n\tpublic list<serviceinfo> getsubscribeservices();\n\n\t/**\n\t * 获取发现服务.\n\t */\n\tprivate namingservice getnamingservice();\n\n}\n\n\n测试用例 configutilstest\n\nclass configutilstest {\n\n\t// @formatter:off\n\tprivate configutils configutils;\n\n\tprivate nacosconfigproperties nacosconfigproperties;\n\n\t@beforeeach\n\tvoid setup() {\n\t\tnacosconfigproperties = new nacosconfigproperties();\n\t\tnacosconfigproperties.setserveraddr("127.0.0.1:8848");\n\t\tnacosconfigproperties.setnamespace("public");\n\t\tnacosconfigproperties.setusername("nacos");\n\t\tnacosconfigproperties.setpassword("nacos");\n\t\tnacosconfigproperties.setgroup("default_group");\n\n\t\tassertthat(nacosconfigproperties).isnotnull();\n\t\tassertthat( nacosconfigproperties.getnamespace()).isequalto("public");\n\t\tassertthat( nacosconfigproperties.getserveraddr()).isequalto("127.0.0.1:8848");\n\t\tassertthat(nacosconfigproperties.getpassword()).isequalto("nacos");\n\t\tassertthat(nacosconfigproperties.getusername()).isequalto("nacos");\n\t\tassertthat( nacosconfigproperties.getgroup()).isequalto("default_group");\n\t\tassertthat(nacosconfigproperties.assembleconfigserviceproperties()).isnotnull();\n\n\t\tnacosconfigmanager nacosconfigmanager = new nacosconfigmanager(nacosconfigproperties);\n\t\tassertthat(nacosconfigmanager).isnotnull();\n\n\t\tconfigutils = new configutils(nacosconfigmanager);\n\t\tassertthat(configutils).isnotnull();\n\t}\n\n\t@test\n\tvoid testgetgroup() {\n\t\tassertthat( configutils.getgroup()).isequalto("default_group");\n\t}\n\n\t@test\n\tvoid testcreateconfigservice() throws nacosexception {\n\t\tconfigservice configservice = configutils.createconfigservice(nacosconfigproperties.getserveraddr());\n\t\tassertthat(configservice).isnotnull();\n\t\tassertthat(configservice.getserverstatus()).isequalto("up");\n\n\t\tconfigservice = configutils.createconfigservice(nacosconfigproperties.assembleconfigserviceproperties());\n\t\tassertthat(configservice).isnotnull();\n\t\tassertthat(configservice.getserverstatus()).isequalto("up");\n\t}\n\n\t@test\n\tvoid testgetconfig() throws nacosexception {\n\t\tstring config = configutils.getconfig("test.yaml", nacosconfigproperties.getgroup(), 5000);\n\t\tassertthat(config).isnotnull().contains("test");\n\t\tconfig = configutils.getconfig("test.yaml", nacosconfigproperties.getgroup(), 5000, new listener() {\n\t\t\t@override\n\t\t\tpublic executor getexecutor() {\n\t\t\t\treturn executors.newsinglethreadexecutor();\n\t\t\t}\n\n\t\t\t@override\n\t\t\tpublic void receiveconfiginfo(string s) {\n\t\t\t\tassertthat(s).isnotblank().contains("test");\n\t\t\t}\n\t\t});\n\t\tassertthat(config).isnotnull().contains("test");\n\t}\n\n\t@test\n\tvoid testaddlistener() throws nacosexception {\n\t\tconfigutils.addlistener("test.yaml", nacosconfigproperties.getgroup(), new listener() {\n\t\t\t@override\n\t\t\tpublic executor getexecutor() {\n\t\t\t\treturn executors.newsinglethreadexecutor();\n\t\t\t}\n\n\t\t\t@override\n\t\t\tpublic void receiveconfiginfo(string s) {\n\t\t\t\tassertthat(s).isnotblank().contains("test");\n\t\t\t}\n\t\t});\n\t}\n\n\t@test\n\tvoid testremovelistener() throws nacosexception {\n\t\tconfigutils.removelistener("test.yaml", nacosconfigproperties.getgroup(), new listener() {\n\t\t\t@override\n\t\t\tpublic executor getexecutor() {\n\t\t\t\treturn executors.newsinglethreadexecutor();\n\t\t\t}\n\n\t\t\t@override\n\t\t\tpublic void receiveconfiginfo(string s) {\n\t\t\t\tassertthat(s).isnotblank().contains("test");\n\t\t\t}\n\t\t});\n\t}\n\n\t@test\n\tvoid testpublishconfig() throws nacosexception, interruptedexception {\n\t\tassertthat(configutils.publishconfig("test.yaml", nacosconfigproperties.getgroup(), "test: 123")).istrue();\n\t\tthread.sleep(100);\n\t\tassertthat(configutils.getconfig("test.yaml", nacosconfigproperties.getgroup(), 5000)).isequalto("test: 123");\n\n\t\tassertthat(configutils.publishconfig("test.yaml", nacosconfigproperties.getgroup(), "test: 456", "yaml")).istrue();\n\t\tassertthat(configutils.getconfig("test.yaml", nacosconfigproperties.getgroup(), 5000)).isequalto("test: 456");\n\n\t\tassertthat(configutils.publishconfig("test.yaml", nacosconfigproperties.getgroup(), "test: 123")).istrue();\n\t\tassertthat(configutils.getconfig("test.yaml", nacosconfigproperties.getgroup(), 5000)).isequalto("test: 123");\n\n\t\tstring md5 = digestutils.md5digestashex("test: 123".getbytes());\n\t\tassertthat(md5).isequalto("5e76b5e94b54e1372f8b452ef64dc55c");\n\t\tassertthat(configutils.publishconfigcas("test.yaml", nacosconfigproperties.getgroup(), "test: 456", md5)).istrue();\n\t\tassertthat(configutils.getconfig("test.yaml", nacosconfigproperties.getgroup(), 5000)).isequalto("test: 456");\n\n\t\tmd5 = digestutils.md5digestashex("test: 456".getbytes());\n\t\tassertthat(md5).isequalto("76e2eabbf24a8c90dc3b4372c20a72cf");\n\t\tassertthat(configutils.publishconfigcas("test.yaml", nacosconfigproperties.getgroup(), "test: 789", md5, "yaml")).istrue();\n\t\tassertthat(configutils.getconfig("test.yaml", nacosconfigproperties.getgroup(), 5000)).isequalto("test: 789");\n\t}\n\n\t@test\n\tvoid testremoveconfig() throws nacosexception, interruptedexception {\n\t\tassertthat(configutils.publishconfig("test1.yaml", nacosconfigproperties.getgroup(), "test: 123")).istrue();\n\t\tthread.sleep(2000);\n\t\tassertthat( configutils.getconfig("test1.yaml", nacosconfigproperties.getgroup(), 5000)).isequalto("test: 123");\n\n\t\tassertthat(configutils.removeconfig("test1.yaml", nacosconfigproperties.getgroup())).istrue();\n\t\tassertthat(configutils.getconfig("test1.yaml", nacosconfigproperties.getgroup(), 5000)).isnull();\n\t}\n\n\t@test\n\tvoid testgetserverstatus() {\n\t\tassertthat(configutils.getserverstatus()).isequalto("up");\n\t}\n\t// @formatter:on\n\n}\n\n\n\nnamingutilstest\n\n@slf4j\n@springboottest\n@requiredargsconstructor\n@contextconfiguration(classes = { namingutils.class,\n\tnacosservicemanager.class,\n\tnacosdiscoveryproperties.class,\n\tapplicationeventpublisher.class,\n\tinetutilsproperties.class,\n\tenvironment.class,\n\tinetutils.class,\n\tinetipv6utils.class })\n@testconstructor(autowiremode = testconstructor.autowiremode.all)\nclass namingutilstest {\n\n\tprivate final namingutils namingutils;\n\n\tprivate final nacosdiscoveryproperties nacosdiscoveryproperties;\n\n\t@beforeeach\n\tvoid setup() {\n\t\tassertthat(nacosdiscoveryproperties).isnotnull();\n\t\tassertthat(nacosdiscoveryproperties.getnamespace()).isequalto("public");\n\t\tassertthat(nacosdiscoveryproperties.getserveraddr()).isequalto("127.0.0.1:8848");\n\t\tassertthat(nacosdiscoveryproperties.getgroup()).isequalto("default_group");\n\t\tassertthat(nacosdiscoveryproperties.getusername()).isequalto("nacos");\n\t\tassertthat(nacosdiscoveryproperties.getpassword()).isequalto("nacos");\n\t\tassertthat(nacosdiscoveryproperties.getendpoint()).isequalto("");\n\t\tassertthat(nacosdiscoveryproperties.getaccesskey()).isequalto("");\n\t\tassertthat(nacosdiscoveryproperties.getsecretkey()).isequalto("");\n\t\tassertthat(nacosdiscoveryproperties.getclustername()).isequalto("nacos-cluster");\n\t\tassertthat(nacosdiscoveryproperties.getnacosproperties()).isnotnull();\n\t\tassertthat(namingutils).isnotnull();\n\t}\n\n\t@test\n\tvoid testcreatenamingservice() throws exception {\n\t\tnamingservice namingservice = namingutils.createnamingservice(nacosdiscoveryproperties.getserveraddr());\n\t\tassertthat(namingservice).isnotnull();\n\t\tnamingservice = namingutils.createnamingservice(nacosdiscoveryproperties.getnacosproperties());\n\t\tassertthat(namingservice).isnotnull();\n\t}\n\n\t@test\n\tvoid testisnacosdiscoveryinfochanged() {\n\t\tassertthat(namingutils.isnacosdiscoveryinfochanged(nacosdiscoveryproperties)).isfalse();\n\t}\n\n\t@test\n\tvoid testgetallinstances() throws nacosexception, interruptedexception {\n\t\tassertthat(namingutils.getallinstances("test-service").isempty()).istrue();\n\n\t\tassertthatnoexception().isthrownby(() -> namingutils.registerinstance("test-service", "127.0.0.1", 8080));\n\t\tthread.sleep(1000);\n\t\tassertthat(namingutils.getallinstances("test-service").isempty()).isfalse();\n\n\t\tassertthatnoexception().isthrownby(() -> namingutils.deregisterinstance("test-service", "127.0.0.1", 8080));\n\t\tthread.sleep(1000);\n\t\tassertthat(namingutils.getallinstances("test-service", "default_group").isempty()).istrue();\n\n\t\tinstance instance = new instance();\n\t\tinstance.setip("127.0.0.1");\n\t\tinstance.setport(8080);\n\t\tassertthatnoexception().isthrownby(() -> namingutils.registerinstance("test-service", instance));\n\t\tthread.sleep(1000);\n\t\tassertthat(namingutils.getallinstances("test-service", "default_group", false).isempty()).isfalse();\n\n\t\tassertthatnoexception().isthrownby(() -> namingutils.deregisterinstance("test-service", instance));\n\t\tthread.sleep(1000);\n\t\tassertthat(namingutils.getallinstances("test-service", false).isempty()).istrue();\n\n\t\tassertthatnoexception().isthrownby(() -> namingutils.registerinstance("test-service", "default_group", instance));\n\t\tthread.sleep(1000);\n\t\tassertthat(namingutils.getallinstances("test-service", collections.emptylist()).isempty()).isfalse();\n\n\t\tassertthatnoexception().isthrownby(() -> namingutils.deregisterinstance("test-service", "default_group", instance));\n\t\tthread.sleep(1000);\n\t\tassertthat(namingutils.getallinstances("test-service", "default_group", collections.emptylist()).isempty()).istrue();\n\n\t\tassertthatnoexception().isthrownby(() -> namingutils.registerinstance("test-service", "default_group", "127.0.0.1", 8080, nacosdiscoveryproperties.getclustername()));\n\t\tthread.sleep(1000);\n\t\tassertthat(namingutils.getallinstances("test-service", list.of(nacosdiscoveryproperties.getclustername()), false).isempty()).isfalse();\n\n\t\tassertthatnoexception().isthrownby(() -> namingutils.deregisterinstance("test-service", "default_group", "127.0.0.1", 8080, nacosdiscoveryproperties.getclustername()));\n\t\tthread.sleep(1000);\n\t\tassertthat(namingutils.getallinstances("test-service", "default_group", list.of(nacosdiscoveryproperties.getclustername()), false).isempty()).istrue();\n\n\t\tassertthatnoexception().isthrownby(() -> namingutils.registerinstance("test-service", "default_group", "127.0.0.1", 8080));\n\t\tthread.sleep(1000);\n\t\tassertthat(namingutils.getallinstances("test-service", "default_group", false).isempty()).isfalse();\n\n\t\tassertthatnoexception().isthrownby(() -> namingutils.deregisterinstance("test-service", "default_group", "127.0.0.1", 8080));\n\t\tthread.sleep(1000);\n\t\tassertthat(namingutils.getallinstances("test-service", "default_group", false).isempty()).istrue();\n\n\t\tassertthatnoexception().isthrownby(() -> namingutils.registerinstance("test-service", "127.0.0.1", 8080, nacosdiscoveryproperties.getclustername()));\n\t\tthread.sleep(1000);\n\t\tassertthat(namingutils.getallinstances("test-service", "default_group", list.of(nacosdiscoveryproperties.getclustername()), false).isempty()).isfalse();\n\n\t\tassertthatnoexception().isthrownby(() -> namingutils.deregisterinstance("test-service", "127.0.0.1", 8080, nacosdiscoveryproperties.getclustername()));\n\t\tthread.sleep(1000);\n\t\tassertthat(namingutils.getallinstances("test-service", "default_group", list.of(nacosdiscoveryproperties.getclustername()), false).isempty()).istrue();\n\t}\n\n\t@test\n\tvoid testselectinstances() throws nacosexception, interruptedexception {\n\t\tassertthatnoexception().isthrownby(() -> namingutils.registerinstance("test-service", "127.0.0.1", 8080, nacosdiscoveryproperties.getclustername()));\n\t\tthread.sleep(1000);\n\t\tassertthat(namingutils.selectinstances("test-service", true).isempty()).isfalse();\n\n\t\tassertthatnoexception().isthrownby(() -> namingutils.deregisterinstance("test-service", "127.0.0.1", 8080, nacosdiscoveryproperties.getclustername()));\n\t\tthread.sleep(1000);\n\t\tassertthat(namingutils.selectinstances("test-service", true).isempty()).istrue();\n\n\t\tassertthatnoexception().isthrownby(() -> namingutils.registerinstance("test-service", "127.0.0.1", 8080, nacosdiscoveryproperties.getclustername()));\n\t\tthread.sleep(1000);\n\t\tassertthat(namingutils.selectinstances("test-service", true, false).isempty()).isfalse();\n\n\t\tassertthat(namingutils.selectinstances("test-service", "default_group", true, false).isempty()).isfalse();\n\t\tassertthat(namingutils.selectinstances("test-service", list.of(nacosdiscoveryproperties.getclustername()), true).isempty()).isfalse();\n\t\tassertthat(namingutils.selectinstances("test-service", "default_group", list.of(nacosdiscoveryproperties.getclustername()), true, false).isempty()).isfalse();\n\t\tassertthat(namingutils.selectinstances("test-service", list.of(nacosdiscoveryproperties.getclustername()), true, false).isempty()).isfalse();\n\t\tassertthat(namingutils.selectinstances("test-service", "default_group", true).isempty()).isfalse();\n\t\tassertthat(namingutils.selectinstances("test-service", "default_group", list.of(nacosdiscoveryproperties.getclustername()), true).isempty()).isfalse();\n\n\t\tassertthatnoexception().isthrownby(() -> namingutils.deregisterinstance("test-service", "127.0.0.1", 8080, nacosdiscoveryproperties.getclustername()));\n\t\tthread.sleep(1000);\n\t\tassertthat(namingutils.getallinstances("test-service", "default_group", list.of(nacosdiscoveryproperties.getclustername()), false).isempty()).istrue();\n\t}\n\n\t@test\n\tvoid testselectonehealthyinstance() throws nacosexception, interruptedexception {\n\t\tassertthatnoexception().isthrownby(() -> namingutils.registerinstance("test-service", "127.0.0.1", 8080, nacosdiscoveryproperties.getclustername()));\n\t\tthread.sleep(1000);\n\t\tassertthat(namingutils.selectinstances("test-service", true).isempty()).isfalse();\n\n\t\tassertthat(namingutils.selectonehealthyinstance("test-service")).isnotnull();\n\t\tassertthat(namingutils.selectonehealthyinstance("test-service", "default_group")).isnotnull();\n\t\tassertthat(namingutils.selectonehealthyinstance("test-service", false)).isnotnull();\n\t\tassertthat(namingutils.selectonehealthyinstance("test-service", "default_group", false)).isnotnull();\n\t\tassertthat(namingutils.selectonehealthyinstance("test-service", list.of(nacosdiscoveryproperties.getclustername()))).isnotnull();\n\t\tassertthat(namingutils.selectonehealthyinstance("test-service", "default_group", list.of(nacosdiscoveryproperties.getclustername()))).isnotnull();\n\t\tassertthat(namingutils.selectonehealthyinstance("test-service", list.of(nacosdiscoveryproperties.getclustername()), false)).isnotnull();\n\t\tassertthat(namingutils.selectonehealthyinstance("test-service", "default_group", list.of(nacosdiscoveryproperties.getclustername()), false)).isnotnull();\n\n\t\tassertthatnoexception().isthrownby(() -> namingutils.deregisterinstance("test-service", "127.0.0.1", 8080, nacosdiscoveryproperties.getclustername()));\n\t\tthread.sleep(1000);\n\t\tassertthat(namingutils.selectinstances("test-service", true).isempty()).istrue();\n\t}\n\n\t@test\n\tvoid testsubscribeservice() throws nacosexception, interruptedexception {\n\t\tassertthatnoexception().isthrownby(() -> namingutils.registerinstance("test-service", "127.0.0.1", 8080, nacosdiscoveryproperties.getclustername()));\n\t\tthread.sleep(1000);\n\t\tassertthat(namingutils.selectinstances("test-service", true).isempty()).isfalse();\n\n\t\tassertthatnoexception().isthrownby(() -> namingutils.subscribe("test-service", "default_group", evt -> assertthat(evt).isnotnull()));\n\t\tassertthatnoexception().isthrownby(() -> namingutils.unsubscribe("test-service", "default_group", evt -> assertthat(evt).isnotnull()));\n\n\t\tassertthatnoexception().isthrownby(() -> namingutils.subscribe("test-service", evt -> assertthat(evt).isnotnull()));\n\t\tassertthatnoexception().isthrownby(() -> namingutils.unsubscribe("test-service", evt -> assertthat(evt).isnotnull()));\n\n\t\tassertthatnoexception().isthrownby(() -> namingutils.subscribe("test-service", "default_group", list.of(nacosdiscoveryproperties.getclustername()), evt -> assertthat(evt).isnotnull()));\n\t\tassertthatnoexception().isthrownby(() -> namingutils.unsubscribe("test-service", "default_group", list.of(nacosdiscoveryproperties.getclustername()), evt -> assertthat(evt).isnotnull()));\n\n\t\tassertthatnoexception().isthrownby(() -> namingutils.subscribe("test-service", list.of(nacosdiscoveryproperties.getclustername()), evt -> assertthat(evt).isnotnull()));\n\t\tassertthatnoexception().isthrownby(() -> namingutils.unsubscribe("test-service", list.of(nacosdiscoveryproperties.getclustername()), evt -> assertthat(evt).isnotnull()));\n\n\t\t// 只选择订阅ip为`127.0`开头的实例。\n\t\tnamingselector selector = namingselectorfactory.newipselector("127.0.*");\n\t\tassertthatnoexception().isthrownby(() -> namingutils.subscribe("test-service", "default_group", selector, evt -> assertthat(evt).isnotnull()));\n\t\tassertthatnoexception().isthrownby(() -> namingutils.unsubscribe("test-service", "default_group", selector, evt -> assertthat(evt).isnotnull()));\n\n\t\tassertthatnoexception().isthrownby(() -> namingutils.subscribe("test-service", selector, evt -> assertthat(evt).isnotnull()));\n\t\tassertthatnoexception().isthrownby(() -> namingutils.unsubscribe("test-service", selector, evt -> assertthat(evt).isnotnull()));\n\n\t\tassertthatnoexception().isthrownby(() -> namingutils.deregisterinstance("test-service", "127.0.0.1", 8080, nacosdiscoveryproperties.getclustername()));\n\t\tthread.sleep(1000);\n\t\tassertthat(namingutils.selectinstances("test-service", true).isempty()).istrue();\n\t}\n\n\t@test\n\tvoid testgetservicesofserver() throws nacosexception, interruptedexception {\n\t\tassertthatnoexception().isthrownby(() -> namingutils.registerinstance("test-service", "default_group", "127.0.0.1", 8080, nacosdiscoveryproperties.getclustername()));\n\t\tthread.sleep(1000);\n\t\tassertthat(namingutils.selectinstances("test-service", true).isempty()).isfalse();\n\n\t\tassertthat(namingutils.getservicesofserver(1, 10, "default_group").getcount() > 0).istrue();\n\t\tassertthat(namingutils.getservicesofserver(1, 10).getcount() > 0).istrue();\n\n\t\tassertthatnoexception().isthrownby(() -> namingutils.subscribe("test-service", "default_group", evt -> assertthat(evt).isnotnull()));\n\t\tassertthat(namingutils.getsubscribeservices().isempty()).isfalse();\n\n\t\tassertthatnoexception().isthrownby(() -> namingutils.deregisterinstance("test-service", "default_group", "127.0.0.1", 8080, nacosdiscoveryproperties.getclustername()));\n\t\tthread.sleep(1000);\n\t\tassertthat(namingutils.selectinstances("test-service", true).isempty()).istrue();\n\t}\n\n\t@test\n\tvoid testbatchregisterinstance() throws nacosexception, interruptedexception {\n\t\tinstance instance = new instance();\n\t\tinstance.setip("127.0.0.1");\n\t\tinstance.setport(8080);\n\t\tassertthatnoexception().isthrownby(() -> namingutils.batchregisterinstance("test-service", "default_group", list.of(instance)));\n\t\tthread.sleep(1000);\n\t\tassertthat(namingutils.selectinstances("test-service", true).size()).isequalto(1);\n\n\t\tassertthatnoexception().isthrownby(() -> namingutils.batchderegisterinstance("test-service", "default_group", list.of(instance)));\n\t\tthread.sleep(1000);\n\t\tassertthat(namingutils.selectinstances("test-service", false).size()).isequalto(0);\n\t}\n\n\t@test\n\tvoid testnacosserviceshutdown() throws interruptedexception {\n\t\tthread.sleep(1000);\n\t\tassertthatnoexception().isthrownby(namingutils::nacosserviceshutdown);\n\t}\n\n}\n// @formatter:on\n\n\nspring:\n  config:\n    import:\n\t  # 导入配置文件\n      - optional:nacos:application-common.yaml?refreshenabled=true&group=default_group\n  cloud:\n    nacos:\n      discovery:\n\t\t# 开启服务注册&发现\n\t\tenabled: true\n\t\t# 服务发现地址\n        server-addr: nacos:8848\n\t\t# 命名空间\n\t\tnamespace: public\n\t\t# 用户名\n\t\tusername: nacos\n        # 密码\n\t\tpassword: nacos\n\t\t# 分组名称\n        group: default_group\n        # https\n        secure: true\n        # true 临时 false 持久\n        ephemeral: true\n        # 集群名称\n        cluster-name: nacos-cluster\n\t\theart-beat:\n\t\t\t# 开启心跳\n\t\t\tenabled: true\n\t\t# 每10秒发送一次心跳【单位毫秒】\n\t\theart-beat-interval: 10000\n\t\t# 超过30秒，则标记为不健康\n\t\theart-beat-timeout: 30000\n      config:\n\t\t# 开启配置中心\n\t\tenabled: true\n\t\t# 服务配置的地址\n        server-addr: nacos:8848\n\t\t# 命名空间\n        namespace: public\n\t\t# 用户名\n        username: nacos\n\t\t# 密码\n        password: nacos\n\t\t# 集群名称\n        cluster-name: nacos-cluster\n        # https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/spring-cloud-alibaba-docs/src/main/asciidoc-zh/nacos-config.adoc\n        # 指定读取的文件格式\n        file-extension: yaml\n\t\t# 分组名称\n        group: default_group\n\t\t# 开启刷新\n        refresh-enabled: true\n\n\n我是老寇，我们下次再见啦！',charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【mqtt】",frontmatter:{title:"组件【mqtt】",date:"2025-03-11T15:21:31.000Z",permalink:"/pages/zj24/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/24.%E7%BB%84%E4%BB%B6%E3%80%90mqtt%E3%80%91.html",relativePath:"01.指南/00.开发手册/24.组件【mqtt】.md",key:"v-2036b1a4",path:"/pages/zj24/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【netty】",frontmatter:{title:"组件【netty】",date:"2025-03-11T15:21:31.000Z",permalink:"/pages/zj28/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/28.%E7%BB%84%E4%BB%B6%E3%80%90netty%E3%80%91.html",relativePath:"01.指南/00.开发手册/28.组件【netty】.md",key:"v-411d1ab2",path:"/pages/zj28/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【openapi-doc】",frontmatter:{title:"组件【openapi-doc】",date:"2025-03-11T15:21:31.000Z",permalink:"/pages/zj29/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/29.%E7%BB%84%E4%BB%B6%E3%80%90openapi-doc%E3%80%91.html",relativePath:"01.指南/00.开发手册/29.组件【openapi-doc】.md",key:"v-68b48522",path:"/pages/zj29/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【oss】",frontmatter:{title:"组件【oss】",date:"2025-03-11T15:21:31.000Z",permalink:"/pages/zj31/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/31.%E7%BB%84%E4%BB%B6%E3%80%90oss%E3%80%91.html",relativePath:"01.指南/00.开发手册/31.组件【oss】.md",key:"v-bcf44548",path:"/pages/zj31/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【prometheus】",frontmatter:{title:"组件【prometheus】",date:"2025-03-11T15:21:31.000Z",permalink:"/pages/zj32/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/32.%E7%BB%84%E4%BB%B6%E3%80%90prometheus%E3%80%91.html",relativePath:"01.指南/00.开发手册/32.组件【prometheus】.md",key:"v-2e346c4e",path:"/pages/zj32/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【rate-limiter】",frontmatter:{title:"组件【rate-limiter】",date:"2025-03-11T15:21:31.000Z",permalink:"/pages/zj34/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/34.%E7%BB%84%E4%BB%B6%E3%80%90rate-limiter%E3%80%91.html",relativePath:"01.指南/00.开发手册/34.组件【rate-limiter】.md",key:"v-3e6b39ee",path:"/pages/zj34/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【reactor】",frontmatter:{title:"组件【reactor】",date:"2025-03-11T15:21:31.000Z",permalink:"/pages/zj35/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/35.%E7%BB%84%E4%BB%B6%E3%80%90reactor%E3%80%91.html",relativePath:"01.指南/00.开发手册/35.组件【reactor】.md",key:"v-73e6eb0c",path:"/pages/zj35/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【redis】",frontmatter:{title:"组件【redis】",date:"2025-03-11T15:21:31.000Z",permalink:"/pages/zj36/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/36.%E7%BB%84%E4%BB%B6%E3%80%90redis%E3%80%91.html",relativePath:"01.指南/00.开发手册/36.组件【redis】.md",key:"v-66dc0cea",path:"/pages/zj36/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【security】",frontmatter:{title:"组件【security】",date:"2025-03-11T15:21:31.000Z",permalink:"/pages/zj40/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/40.%E7%BB%84%E4%BB%B6%E3%80%90security%E3%80%91.html",relativePath:"01.指南/00.开发手册/40.组件【security】.md",key:"v-b2ffec24",path:"/pages/zj40/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【sensitive】",frontmatter:{title:"组件【sensitive】",date:"2025-03-11T15:21:31.000Z",permalink:"/pages/zj41/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/41.%E7%BB%84%E4%BB%B6%E3%80%90sensitive%E3%80%91.html",relativePath:"01.指南/00.开发手册/41.组件【sensitive】.md",key:"v-56303aa8",path:"/pages/zj41/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【sms】",frontmatter:{title:"组件【sms】",date:"2025-03-11T15:21:31.000Z",permalink:"/pages/zj43/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/43.%E7%BB%84%E4%BB%B6%E3%80%90sms%E3%80%91.html",relativePath:"01.指南/00.开发手册/43.组件【sms】.md",key:"v-de508324",path:"/pages/zj43/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【snail-job】",frontmatter:{title:"组件【snail-job】",date:"2025-03-11T15:21:31.000Z",permalink:"/pages/zj44/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/44.%E7%BB%84%E4%BB%B6%E3%80%90snail-job%E3%80%91.html",relativePath:"01.指南/00.开发手册/44.组件【snail-job】.md",key:"v-675a222c",path:"/pages/zj44/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【secret】",frontmatter:{title:"组件【secret】",date:"2025-03-11T15:21:31.000Z",permalink:"/pages/zj39/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/39.%E7%BB%84%E4%BB%B6%E3%80%90secret%E3%80%91.html",relativePath:"01.指南/00.开发手册/39.组件【secret】.md",key:"v-730f3da4",path:"/pages/zj39/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【storage】",frontmatter:{title:"组件【storage】",date:"2025-03-11T15:21:31.000Z",permalink:"/pages/zj48/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/48.%E7%BB%84%E4%BB%B6%E3%80%90storage%E3%80%91.html",relativePath:"01.指南/00.开发手册/48.组件【storage】.md",key:"v-1a8747e8",path:"/pages/zj48/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【tdengine】",frontmatter:{title:"组件【tdengine】",date:"2025-03-11T15:21:31.000Z",permalink:"/pages/zj49/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/49.%E7%BB%84%E4%BB%B6%E3%80%90tdengine%E3%80%91.html",relativePath:"01.指南/00.开发手册/49.组件【tdengine】.md",key:"v-339db564",path:"/pages/zj49/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【tenant】",frontmatter:{title:"组件【tenant】",date:"2025-03-11T15:21:31.000Z",permalink:"/pages/zj50/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/50.%E7%BB%84%E4%BB%B6%E3%80%90tenant%E3%80%91.html",relativePath:"01.指南/00.开发手册/50.组件【tenant】.md",key:"v-eb375964",path:"/pages/zj50/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"Centos7安装Mysql 8.0.33",frontmatter:{title:"Centos7安装Mysql 8.0.33",date:"2023-09-26T10:29:46.000Z",permalink:"/pages/a2f161/"},regularPath:"/01.%E6%8C%87%E5%8D%97/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/00.Centos7%E5%AE%89%E8%A3%85Mysql%208.0.33.html",relativePath:"01.指南/01.环境搭建/00.Centos7安装Mysql 8.0.33.md",key:"v-3a036c88",path:"/pages/a2f161/",headers:[{level:2,title:"下载Mysql",slug:"下载mysql",normalizedTitle:"下载mysql",charIndex:49},{level:2,title:"安装准备",slug:"安装准备",normalizedTitle:"安装准备",charIndex:74},{level:4,title:"卸载MariaDB",slug:"卸载mariadb",normalizedTitle:"卸载mariadb",charIndex:118},{level:4,title:"检查依赖",slug:"检查依赖",normalizedTitle:"检查依赖",charIndex:282},{level:2,title:"开始安装",slug:"开始安装",normalizedTitle:"开始安装",charIndex:441},{level:6,title:"上传压缩包（略）",slug:"上传压缩包-略",normalizedTitle:"上传压缩包（略）",charIndex:449},{level:6,title:"解压",slug:"解压",normalizedTitle:"解压",charIndex:461},{level:6,title:"重命名",slug:"重命名",normalizedTitle:"重命名",charIndex:588},{level:6,title:"创建存储数据文件",slug:"创建存储数据文件",normalizedTitle:"创建存储数据文件",charIndex:642},{level:6,title:"创建用户组并赋值",slug:"创建用户组并赋值",normalizedTitle:"创建用户组并赋值",charIndex:688},{level:6,title:"初始化Mysql",slug:"初始化mysql",normalizedTitle:"初始化mysql",charIndex:861},{level:6,title:"配置参数",slug:"配置参数",normalizedTitle:"配置参数",charIndex:1012},{level:6,title:"启动Mysql",slug:"启动mysql",normalizedTitle:"启动mysql",charIndex:2179},{level:6,title:"设置密码",slug:"设置密码",normalizedTitle:"设置密码",charIndex:2259},{level:6,title:"开放远程访问",slug:"开放远程访问",normalizedTitle:"开放远程访问",charIndex:2398},{level:6,title:"关闭防火墙",slug:"关闭防火墙",normalizedTitle:"关闭防火墙",charIndex:2500},{level:6,title:"安装完毕！！！",slug:"安装完毕",normalizedTitle:"安装完毕！！！",charIndex:2544},{level:2,title:"参考资料",slug:"参考资料",normalizedTitle:"参考资料",charIndex:2571}],headersStr:"下载Mysql 安装准备 卸载MariaDB 检查依赖 开始安装 上传压缩包（略） 解压 重命名 创建存储数据文件 创建用户组并赋值 初始化Mysql 配置参数 启动Mysql 设置密码 开放远程访问 关闭防火墙 安装完毕！！！ 参考资料",content:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，跟我一起安装Mysql。\n\n\n# 下载Mysql\n\nMysql官网下载地址\n\n\n# 安装准备\n\n注：Mysql会与MariaDB文件冲突，需要先卸载掉MariaDB\n\n# 卸载MariaDB\n\n# 检查是否安装MariaDB\nrpm -qa|grep mariadb\n\n\n# 卸载\n# rpm -e --nodeps 文件名\nrpm -e --nodeps mariadb-libs-5.5.35-3.el7.x86_64\n\n\n# 检查是否卸载干净\nrpm -qa|grep mariadb\n\n\n# 检查依赖\n\n# 是否安装libaio\nrpm -qa|grep libaio\n\n\n# 没有libaio则安装\nyum -y install libaio\n\n\n# 查看安装numactl\nrpm -qa|grep numactl\n\n\n# 没有则安装numactl\nyum -y install numactl\n\n\n\n# 开始安装\n\n# 上传压缩包（略）\n\n# 解压\n\n# 拆分 => tar -xvf 包名\ntar -xvf mysql-8.0.33-el7-x86_64.tar\n# 解压 => tar -zxvf 包名\ntar -zxvf mysql-8.0.33-el7-x86_64.tar.gz\n\n\n# 重命名\n\nmv mysql-8.0.33-el7-x86_64 /usr/local/mysql8\n\n\n# 创建存储数据文件\n\nmkdir -p /usr/local/mysql8/data\n\n\n# 创建用户组并赋值\n\n# 创建用户组\ngroupadd mysql\n# 创建用户\n# -r：创建系统用户\n# -g：指定用户组\nuseradd -r -g mysql mysql\n# 修改范围和权限\nchown -R mysql:mysql /usr/local/mysql8\nchmod -R 755 /usr/local/mysql8\n\n\n# 初始化Mysql\n\ncd /usr/local/mysql8/bin\n# 初始化完成后会打印随机密码\n./mysqld --initialize --user=mysql --datadir=/usr/local/mysql8/data --basedir=/usr/local/mysql8\n\n\n# 配置参数\n\n# 创建文件\ntouch /usr/local/mysql8/my.cnf\n\n# 复制以下内容，根据需要修改\n[client]\nport = 3306\nsocket = /usr/local/mysql8/data/mysql.sock\ndefault-character-set = utf8mb4\n\n[mysql]\ndefault-character-set = utf8mb4\n\n[mysqld]\ncharacter-set-client-handshake = FALSE\ncharacter-set-server = utf8mb4\ncollation-server = utf8mb4_general_ci\ninit_connect = 'SET NAMES utf8mb4'\n\nport = 3306\nsocket = /usr/local/mysql8/data/mysql.sock\nskip-external-locking\nkey_buffer_size = 16M\nmax_allowed_packet = 1M\ntable_open_cache = 64\nsort_buffer_size = 512K\nnet_buffer_length = 8K\nread_buffer_size = 256K\nread_rnd_buffer_size = 512K\nmyisam_sort_buffer_size = 8M\ndatadir = /usr/local/mysql8/data\nlower_case_table_names = 1\ninnodb_flush_log_at_trx_commit = 1\nsync_binlog = 1\n#lower_case_table_names=1\n#如果要设置lower_case_table_names可以在初始化里面设置 ./mysqld --initialize --user=mysql --datadir=/usr/local/mysql/data --basedir=/usr/local/mysql --lower_case_table_names=1\n\n[mysqldump]\nquick\nmax_allowed_packet = 16M\n\n[mysql]\nno-auto-rehash\n\n[myisamchk]\nkey_buffer_size = 20M\nsort_buffer_size = 20M\nread_buffer = 2M\nwrite_buffer = 2M\n\n[mysqlhotcopy]\ninteractive-timeout\n\n\n# 修改权限\nchmod 777 /usr/local/mysql8/my.cnf\n\n\n# 启动Mysql\n\n# 启动\n./mysqld_safe /usr/local/mysql8/my.cnf &\n# 查看进程\nnetstat -ntlp\n\n\n# 设置密码\n\n# 登录 => 密码就是截图的随机密码\n./mysql -uroot -p\n# 修改密码\nALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'laokou123';\n\n\n# 开放远程访问\n\nuse mysql;\nupdate user set user.Host='%' where user.User='root';\n# 刷新权限\nflush privileges;\n\n\n# 关闭防火墙\n\nsystemctl stop firewalld.service\n\n\n# 安装完毕！！！\n\n我是老寇，我们下次再见啦！\n\n\n# 参考资料\n\nCentOS7安装MySQL8(亲测无坑百分百安装成功)",normalizedContent:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，跟我一起安装mysql。\n\n\n# 下载mysql\n\nmysql官网下载地址\n\n\n# 安装准备\n\n注：mysql会与mariadb文件冲突，需要先卸载掉mariadb\n\n# 卸载mariadb\n\n# 检查是否安装mariadb\nrpm -qa|grep mariadb\n\n\n# 卸载\n# rpm -e --nodeps 文件名\nrpm -e --nodeps mariadb-libs-5.5.35-3.el7.x86_64\n\n\n# 检查是否卸载干净\nrpm -qa|grep mariadb\n\n\n# 检查依赖\n\n# 是否安装libaio\nrpm -qa|grep libaio\n\n\n# 没有libaio则安装\nyum -y install libaio\n\n\n# 查看安装numactl\nrpm -qa|grep numactl\n\n\n# 没有则安装numactl\nyum -y install numactl\n\n\n\n# 开始安装\n\n# 上传压缩包（略）\n\n# 解压\n\n# 拆分 => tar -xvf 包名\ntar -xvf mysql-8.0.33-el7-x86_64.tar\n# 解压 => tar -zxvf 包名\ntar -zxvf mysql-8.0.33-el7-x86_64.tar.gz\n\n\n# 重命名\n\nmv mysql-8.0.33-el7-x86_64 /usr/local/mysql8\n\n\n# 创建存储数据文件\n\nmkdir -p /usr/local/mysql8/data\n\n\n# 创建用户组并赋值\n\n# 创建用户组\ngroupadd mysql\n# 创建用户\n# -r：创建系统用户\n# -g：指定用户组\nuseradd -r -g mysql mysql\n# 修改范围和权限\nchown -r mysql:mysql /usr/local/mysql8\nchmod -r 755 /usr/local/mysql8\n\n\n# 初始化mysql\n\ncd /usr/local/mysql8/bin\n# 初始化完成后会打印随机密码\n./mysqld --initialize --user=mysql --datadir=/usr/local/mysql8/data --basedir=/usr/local/mysql8\n\n\n# 配置参数\n\n# 创建文件\ntouch /usr/local/mysql8/my.cnf\n\n# 复制以下内容，根据需要修改\n[client]\nport = 3306\nsocket = /usr/local/mysql8/data/mysql.sock\ndefault-character-set = utf8mb4\n\n[mysql]\ndefault-character-set = utf8mb4\n\n[mysqld]\ncharacter-set-client-handshake = false\ncharacter-set-server = utf8mb4\ncollation-server = utf8mb4_general_ci\ninit_connect = 'set names utf8mb4'\n\nport = 3306\nsocket = /usr/local/mysql8/data/mysql.sock\nskip-external-locking\nkey_buffer_size = 16m\nmax_allowed_packet = 1m\ntable_open_cache = 64\nsort_buffer_size = 512k\nnet_buffer_length = 8k\nread_buffer_size = 256k\nread_rnd_buffer_size = 512k\nmyisam_sort_buffer_size = 8m\ndatadir = /usr/local/mysql8/data\nlower_case_table_names = 1\ninnodb_flush_log_at_trx_commit = 1\nsync_binlog = 1\n#lower_case_table_names=1\n#如果要设置lower_case_table_names可以在初始化里面设置 ./mysqld --initialize --user=mysql --datadir=/usr/local/mysql/data --basedir=/usr/local/mysql --lower_case_table_names=1\n\n[mysqldump]\nquick\nmax_allowed_packet = 16m\n\n[mysql]\nno-auto-rehash\n\n[myisamchk]\nkey_buffer_size = 20m\nsort_buffer_size = 20m\nread_buffer = 2m\nwrite_buffer = 2m\n\n[mysqlhotcopy]\ninteractive-timeout\n\n\n# 修改权限\nchmod 777 /usr/local/mysql8/my.cnf\n\n\n# 启动mysql\n\n# 启动\n./mysqld_safe /usr/local/mysql8/my.cnf &\n# 查看进程\nnetstat -ntlp\n\n\n# 设置密码\n\n# 登录 => 密码就是截图的随机密码\n./mysql -uroot -p\n# 修改密码\nalter user 'root'@'localhost' identified with mysql_native_password by 'laokou123';\n\n\n# 开放远程访问\n\nuse mysql;\nupdate user set user.host='%' where user.user='root';\n# 刷新权限\nflush privileges;\n\n\n# 关闭防火墙\n\nsystemctl stop firewalld.service\n\n\n# 安装完毕！！！\n\n我是老寇，我们下次再见啦！\n\n\n# 参考资料\n\ncentos7安装mysql8(亲测无坑百分百安装成功)",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【trace】",frontmatter:{title:"组件【trace】",date:"2025-03-11T15:21:31.000Z",permalink:"/pages/zj52/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/52.%E7%BB%84%E4%BB%B6%E3%80%90trace%E3%80%91.html",relativePath:"01.指南/00.开发手册/52.组件【trace】.md",key:"v-ec7a7eec",path:"/pages/zj52/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【xss】",frontmatter:{title:"组件【xss】",date:"2025-03-11T15:21:31.000Z",permalink:"/pages/zj53/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/53.%E7%BB%84%E4%BB%B6%E3%80%90xss%E3%80%91.html",relativePath:"01.指南/00.开发手册/53.组件【xss】.md",key:"v-40a9506e",path:"/pages/zj53/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"组件【test】",frontmatter:{title:"组件【test】",date:"2025-03-11T15:21:31.000Z",permalink:"/pages/zj51/"},regularPath:"/01.%E6%8C%87%E5%8D%97/00.%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/51.%E7%BB%84%E4%BB%B6%E3%80%90test%E3%80%91.html",relativePath:"01.指南/00.开发手册/51.组件【test】.md",key:"v-1a34762e",path:"/pages/zj51/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"Centos7安装Redis 7.0.11",frontmatter:{title:"Centos7安装Redis 7.0.11",date:"2023-09-26T22:50:33.000Z",permalink:"/pages/90401a/"},regularPath:"/01.%E6%8C%87%E5%8D%97/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/01.Centos7%E5%AE%89%E8%A3%85Redis%207.0.11.html",relativePath:"01.指南/01.环境搭建/01.Centos7安装Redis 7.0.11.md",key:"v-40cbba76",path:"/pages/90401a/",headers:[{level:2,title:"下载Redis",slug:"下载redis",normalizedTitle:"下载redis",charIndex:49},{level:2,title:"开始安装",slug:"开始安装",normalizedTitle:"开始安装",charIndex:72},{level:6,title:"上传压缩包（略）",slug:"上传压缩包-略",normalizedTitle:"上传压缩包（略）",charIndex:80},{level:6,title:"解压",slug:"解压",normalizedTitle:"解压",charIndex:92},{level:6,title:"重命名",slug:"重命名",normalizedTitle:"重命名",charIndex:138},{level:6,title:"升级gcc",slug:"升级gcc",normalizedTitle:"升级gcc",charIndex:180},{level:6,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:36},{level:6,title:"修改配置",slug:"修改配置",normalizedTitle:"修改配置",charIndex:534},{level:6,title:"启动",slug:"启动",normalizedTitle:"启动",charIndex:667},{level:6,title:"安装完毕！！！",slug:"安装完毕",normalizedTitle:"安装完毕！！！",charIndex:741},{level:2,title:"参考资料",slug:"参考资料",normalizedTitle:"参考资料",charIndex:768}],headersStr:"下载Redis 开始安装 上传压缩包（略） 解压 重命名 升级gcc 安装 修改配置 启动 安装完毕！！！ 参考资料",content:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，跟我一起安装Redis。\n\n\n# 下载Redis\n\nredis官网地址\n\n\n# 开始安装\n\n# 上传压缩包（略）\n\n# 解压\n\ncd /opt\ntar -zxvf redis-7.0.11.tar.gz\n\n\n# 重命名\n\nmv redis-7.0.11 /usr/local/redis\n\n\n# 升级gcc\n\nyum -y install centos-release-scl\nyum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils\nscl enable devtoolset-9 bash\necho "source /opt/rh/devtoolset-9/enable" >> /etc/profile\n\n\n# 安装\n\ncd /usr/local/redis\n# 安装\n# 指定分配器为libc\nmake MALLOC=libc\n# 创建文件夹\nmkdir -p /usr/local/redis/etc\nmv redis.conf /usr/local/redis/etc/redis.conf\n\n\n# 修改配置\n\nvi /usr/local/redis/etc/redis.conf\n# 修改密码\nrequirepass laokou123\ndaemonize yes\nbind 0.0.0.0 -::1\nnotify-keyspace-events KEA\n\n\n# 启动\n\n/usr/local/redis/src/redis-server /usr/local/redis/etc/redis.conf\n\n\n# 安装完毕！！！\n\n我是老寇，我们下次再见啦！\n\n\n# 参考资料\n\ncentos7 安装redis',normalizedContent:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，跟我一起安装redis。\n\n\n# 下载redis\n\nredis官网地址\n\n\n# 开始安装\n\n# 上传压缩包（略）\n\n# 解压\n\ncd /opt\ntar -zxvf redis-7.0.11.tar.gz\n\n\n# 重命名\n\nmv redis-7.0.11 /usr/local/redis\n\n\n# 升级gcc\n\nyum -y install centos-release-scl\nyum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils\nscl enable devtoolset-9 bash\necho "source /opt/rh/devtoolset-9/enable" >> /etc/profile\n\n\n# 安装\n\ncd /usr/local/redis\n# 安装\n# 指定分配器为libc\nmake malloc=libc\n# 创建文件夹\nmkdir -p /usr/local/redis/etc\nmv redis.conf /usr/local/redis/etc/redis.conf\n\n\n# 修改配置\n\nvi /usr/local/redis/etc/redis.conf\n# 修改密码\nrequirepass laokou123\ndaemonize yes\nbind 0.0.0.0 -::1\nnotify-keyspace-events kea\n\n\n# 启动\n\n/usr/local/redis/src/redis-server /usr/local/redis/etc/redis.conf\n\n\n# 安装完毕！！！\n\n我是老寇，我们下次再见啦！\n\n\n# 参考资料\n\ncentos7 安装redis',charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"Centos7安装RocketMQ 5.1.1",frontmatter:{title:"Centos7安装RocketMQ 5.1.1",date:"2023-09-26T23:43:07.000Z",permalink:"/pages/0fb88c/"},regularPath:"/01.%E6%8C%87%E5%8D%97/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02.Centos7%E5%AE%89%E8%A3%85RocketMQ%205.1.1.html",relativePath:"01.指南/01.环境搭建/02.Centos7安装RocketMQ 5.1.1.md",key:"v-9da4f530",path:"/pages/0fb88c/",headers:[{level:2,title:"下载RocketMQ",slug:"下载rocketmq",normalizedTitle:"下载rocketmq",charIndex:52},{level:2,title:"安装前提",slug:"安装前提",normalizedTitle:"安装前提",charIndex:81},{level:2,title:"开始安装",slug:"开始安装",normalizedTitle:"开始安装",charIndex:111},{level:6,title:"上传压缩包（略）",slug:"上传压缩包-略",normalizedTitle:"上传压缩包（略）",charIndex:119},{level:6,title:"解压",slug:"解压",normalizedTitle:"解压",charIndex:131},{level:6,title:"重命名",slug:"重命名",normalizedTitle:"重命名",charIndex:224},{level:6,title:"修改配置",slug:"修改配置",normalizedTitle:"修改配置",charIndex:288},{level:6,title:"修改参数",slug:"修改参数",normalizedTitle:"修改参数",charIndex:406},{level:6,title:"启动",slug:"启动",normalizedTitle:"启动",charIndex:546},{level:6,title:"安装完毕！！！",slug:"安装完毕",normalizedTitle:"安装完毕！！！",charIndex:697},{level:2,title:"参考资料",slug:"参考资料",normalizedTitle:"参考资料",charIndex:724}],headersStr:"下载RocketMQ 安装前提 开始安装 上传压缩包（略） 解压 重命名 修改配置 修改参数 启动 安装完毕！！！ 参考资料",content:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，跟我一起安装RocketMQ。\n\n\n# 下载RocketMQ\n\nRocketMQ官网地址\n\n\n# 安装前提\n\nCentos7安装Jdk 17.0.7\n\n\n# 开始安装\n\n# 上传压缩包（略）\n\n# 解压\n\ncd /opt\n# 安装unzip\nyum -y install unzip\n# 解压\nunzip rocketmq-all-5.1.1-bin-release.zip\n\n\n# 重命名\n\nmv rocketmq-all-5.1.1-bin-release /usr/local/rocketmq5\n\n\n# 修改配置\n\ncd /usr/local/rocketmq5\nvi conf/broker.conf\n# 增加两项配置\nnamesrvAddr=192.168.1.100:9876\nbrokerIP1=192.168.1.100\n\n\n# 修改参数\n\nvi runborker.sh\nvi runserver.sh\n\n\n--add-opens=java.base/jdk.internal.ref=ALL-UNNAMED\n--add-opens=java.base/sun.nio.ch=ALL-UNNAMED\n\n\n# 启动\n\ncd /usr/local/rocketmq5\nnohup sh bin/mqnamesrv &\nnohup sh bin/mqbroker -n 192.168.30.128:9876 -c conf/broker.conf autoCreateTopicEnable=true &\n\n\n# 安装完毕！！！\n\n我是老寇，我们下次再见啦！\n\n\n# 参考资料\n\ncentos7 安装单机RocketMQ5.0.0",normalizedContent:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，跟我一起安装rocketmq。\n\n\n# 下载rocketmq\n\nrocketmq官网地址\n\n\n# 安装前提\n\ncentos7安装jdk 17.0.7\n\n\n# 开始安装\n\n# 上传压缩包（略）\n\n# 解压\n\ncd /opt\n# 安装unzip\nyum -y install unzip\n# 解压\nunzip rocketmq-all-5.1.1-bin-release.zip\n\n\n# 重命名\n\nmv rocketmq-all-5.1.1-bin-release /usr/local/rocketmq5\n\n\n# 修改配置\n\ncd /usr/local/rocketmq5\nvi conf/broker.conf\n# 增加两项配置\nnamesrvaddr=192.168.1.100:9876\nbrokerip1=192.168.1.100\n\n\n# 修改参数\n\nvi runborker.sh\nvi runserver.sh\n\n\n--add-opens=java.base/jdk.internal.ref=all-unnamed\n--add-opens=java.base/sun.nio.ch=all-unnamed\n\n\n# 启动\n\ncd /usr/local/rocketmq5\nnohup sh bin/mqnamesrv &\nnohup sh bin/mqbroker -n 192.168.30.128:9876 -c conf/broker.conf autocreatetopicenable=true &\n\n\n# 安装完毕！！！\n\n我是老寇，我们下次再见啦！\n\n\n# 参考资料\n\ncentos7 安装单机rocketmq5.0.0",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"Centos7安装Jdk 17.0.7",frontmatter:{title:"Centos7安装Jdk 17.0.7",date:"2023-09-26T00:33:53.000Z",permalink:"/pages/65acfd/"},regularPath:"/01.%E6%8C%87%E5%8D%97/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/03.Centos7%E5%AE%89%E8%A3%85Jdk%2017.0.7.html",relativePath:"01.指南/01.环境搭建/03.Centos7安装Jdk 17.0.7.md",key:"v-03f84d34",path:"/pages/65acfd/",headers:[{level:2,title:"下载jdk17",slug:"下载jdk17",normalizedTitle:"下载jdk17",charIndex:47},{level:2,title:"开始安装",slug:"开始安装",normalizedTitle:"开始安装",charIndex:68},{level:6,title:"上传压缩包（略）",slug:"上传压缩包-略",normalizedTitle:"上传压缩包（略）",charIndex:76},{level:6,title:"重命名",slug:"重命名",normalizedTitle:"重命名",charIndex:136},{level:6,title:"环境配置",slug:"环境配置",normalizedTitle:"环境配置",charIndex:176},{level:6,title:"生效配置",slug:"生效配置",normalizedTitle:"生效配置",charIndex:335},{level:6,title:"查看版本",slug:"查看版本",normalizedTitle:"查看版本",charIndex:365},{level:6,title:"安装完毕！！！",slug:"安装完毕",normalizedTitle:"安装完毕！！！",charIndex:389},{level:2,title:"参考资料",slug:"参考资料",normalizedTitle:"参考资料",charIndex:416}],headersStr:"下载jdk17 开始安装 上传压缩包（略） 重命名 环境配置 生效配置 查看版本 安装完毕！！！ 参考资料",content:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，跟我一起安装Jdk。\n\n\n# 下载jdk17\n\njdk官网地址\n\n\n# 开始安装\n\n# 上传压缩包（略）\n\ncd /opt\ntar -zxvf jdk-17_linux-x64_bin.tar.gz\n\n\n# 重命名\n\nmv jdk-17.0.7 /usr/local/jdk17\n\n\n# 环境配置\n\nvi /etc/profile\nexport JAVA_HOME=/usr/local/jdk17\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nexport PATH=$PATH:$JAVA_HOME/bin\n\n\n# 生效配置\n\nsource /etc/profile\n\n\n# 查看版本\n\njava -version\n\n\n# 安装完毕！！！\n\n我是老寇，我们下次再见啦！\n\n\n# 参考资料\n\ncentos7 安装jdk1.8",normalizedContent:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，跟我一起安装jdk。\n\n\n# 下载jdk17\n\njdk官网地址\n\n\n# 开始安装\n\n# 上传压缩包（略）\n\ncd /opt\ntar -zxvf jdk-17_linux-x64_bin.tar.gz\n\n\n# 重命名\n\nmv jdk-17.0.7 /usr/local/jdk17\n\n\n# 环境配置\n\nvi /etc/profile\nexport java_home=/usr/local/jdk17\nexport classpath=.:$java_home/lib/dt.jar:$java_home/lib/tools.jar\nexport path=$path:$java_home/bin\n\n\n# 生效配置\n\nsource /etc/profile\n\n\n# 查看版本\n\njava -version\n\n\n# 安装完毕！！！\n\n我是老寇，我们下次再见啦！\n\n\n# 参考资料\n\ncentos7 安装jdk1.8",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"Docker安装RabbitMQ 3.12.2",frontmatter:{title:"Docker安装RabbitMQ 3.12.2",date:"2023-09-26T07:06:10.000Z",permalink:"/pages/552b64/"},regularPath:"/01.%E6%8C%87%E5%8D%97/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/05.Docker%E5%AE%89%E8%A3%85RabbitMQ%203.12.2.html",relativePath:"01.指南/01.环境搭建/05.Docker安装RabbitMQ 3.12.2.md",key:"v-6e8179ae",path:"/pages/552b64/",headers:[{level:2,title:"拉取镜像",slug:"拉取镜像",normalizedTitle:"拉取镜像",charIndex:47},{level:2,title:"启动容器",slug:"启动容器",normalizedTitle:"启动容器",charIndex:86}],headersStr:"拉取镜像 启动容器",content:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n跟我一起安装Rabbitmq。\n\n\n# 拉取镜像\n\ndocker pull rabbitmq:3.12.2\n\n\n\n# 启动容器\n\ndocker run -d --hostname laokou --name rabbit -p 15672:15672 -p 5672:5672 rabbitmq\n# --hostname 网络\n# --name 容器名称\n# -p 服器务端口:容器端口\n\n\n\n# 管理面版\n\ndocker ps -a\ndocker exec -it 容器id /bin/bash\nrabbitmq-plugins enable rabbitmq_management\n\n\n我是老寇，我们下次再见啦！",normalizedContent:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n跟我一起安装rabbitmq。\n\n\n# 拉取镜像\n\ndocker pull rabbitmq:3.12.2\n\n\n\n# 启动容器\n\ndocker run -d --hostname laokou --name rabbit -p 15672:15672 -p 5672:5672 rabbitmq\n# --hostname 网络\n# --name 容器名称\n# -p 服器务端口:容器端口\n\n\n\n# 管理面版\n\ndocker ps -a\ndocker exec -it 容器id /bin/bash\nrabbitmq-plugins enable rabbitmq_management\n\n\n我是老寇，我们下次再见啦！",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"Centos7安装Docker 23.0.6",frontmatter:{title:"Centos7安装Docker 23.0.6",date:"2023-09-26T06:33:53.000Z",permalink:"/pages/65acff/"},regularPath:"/01.%E6%8C%87%E5%8D%97/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/04.Centos7%E5%AE%89%E8%A3%85Docker%2023.0.6.html",relativePath:"01.指南/01.环境搭建/04.Centos7安装Docker 23.0.6.md",key:"v-19ba89b4",path:"/pages/65acff/",headers:[{level:2,title:"安装必读",slug:"安装必读",normalizedTitle:"安装必读",charIndex:45},{level:6,title:"官方建议内核3.10以上，如果安装失败，请更换 Centos7镜像",slug:"官方建议内核3-10以上-如果安装失败-请更换-centos7镜像",normalizedTitle:"官方建议内核3.10以上，如果安装失败，请更换 centos7镜像",charIndex:53},{level:2,title:"升级工具包",slug:"升级工具包",normalizedTitle:"升级工具包",charIndex:102},{level:2,title:"卸载老版本",slug:"卸载老版本",normalizedTitle:"卸载老版本",charIndex:214},{level:2,title:"安装软件包",slug:"安装软件包",normalizedTitle:"安装软件包",charIndex:288},{level:2,title:"设置yum源",slug:"设置yum源",normalizedTitle:"设置yum源",charIndex:360},{level:2,title:"安装docker",slug:"安装docker",normalizedTitle:"安装docker",charIndex:477},{level:2,title:"命令",slug:"命令",normalizedTitle:"命令",charIndex:524},{level:2,title:"安装Docker-Compose",slug:"安装docker-compose",normalizedTitle:"安装docker-compose",charIndex:623},{level:2,title:"打开 2375 端口",slug:"打开-2375-端口",normalizedTitle:"打开 2375 端口",charIndex:869},{level:2,title:"常见问题",slug:"常见问题",normalizedTitle:"常见问题",charIndex:1247},{level:3,title:"1.Running docker container : iptables: No chain/target/match by that name",slug:"_1-running-docker-container-iptables-no-chain-target-match-by-that-name",normalizedTitle:"1.running docker container : iptables: no chain/target/match by that name",charIndex:1256},{level:2,title:"参考资料",slug:"参考资料",normalizedTitle:"参考资料",charIndex:1430}],headersStr:"安装必读 官方建议内核3.10以上，如果安装失败，请更换 Centos7镜像 升级工具包 卸载老版本 安装软件包 设置yum源 安装docker 命令 安装Docker-Compose 打开 2375 端口 常见问题 1.Running docker container : iptables: No chain/target/match by that name 参考资料",content:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n跟我一起安装Docker。\n\n\n# 安装必读\n\n# 官方建议内核3.10以上，如果安装失败，请更换 Centos7镜像\n\nuname -r\n\n\n\n# 升级工具包\n\nyum -y update\nyum -y install yum-utils\n# yum -y update 升级所有包同时也升级软件和系统内核 如somelinux8 升级至 somelinux9\n\n\n\n# 卸载老版本\n\nyum remove docker  docker-common docker-selinux docker-engine\n\n\n\n# 安装软件包\n\nyum install -y yum-utils Device-mapper-persistent-data lvm2\n\n\n\n# 设置yum源\n\n推荐使用阿里云源\n\nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n\n\n\n# 安装docker\n\nyum -y install docker-ce-23.0.6\n\n\n\n# 命令\n\n# 启动\nsystemctl start docker\n\n# 状态\nsystemctl status docker\n\n# 开机自启\nsystemctl enable docker\n\n\n\n# 安装Docker-Compose\n\n下载地址\n\ncd /opt\nmv docker-compose-linux-x86_64 /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\n# 全局设置\nsudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n# 查看版本\ndocker-compose --version\n\n\n\n# 打开 2375 端口\n\n1.修改/usr/lib/systemd/system/docker.service添加-H tcp://0.0.0.0:2375\n\nExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H fd:// --containerd=/run/containerd/containerd.sock\n\n\n2.刷新配置，重启docker\n\nsystemctl daemon-reload\nsystemctl restart docker\n\n\n3.添加防火墙并重载\n\nfirewalld-cmd --zone=public --add-port=2375/tcp --permanent\nfirewalld-cmd --reload\n\n\n4.查看网络端口\n\nnetstat -ntlp\n\n\n\n# 常见问题\n\n\n# 1.Running docker container : iptables: No chain/target/match by that name\n\nsudo iptables -t filter -F\nsudo iptables -t filter -X\nsystemctl restart docker\n\n\n我是老寇，我们下次再见啦！\n\n\n# 参考资料\n\ncentos7安装Docker详细步骤（无坑版教程）",normalizedContent:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n跟我一起安装docker。\n\n\n# 安装必读\n\n# 官方建议内核3.10以上，如果安装失败，请更换 centos7镜像\n\nuname -r\n\n\n\n# 升级工具包\n\nyum -y update\nyum -y install yum-utils\n# yum -y update 升级所有包同时也升级软件和系统内核 如somelinux8 升级至 somelinux9\n\n\n\n# 卸载老版本\n\nyum remove docker  docker-common docker-selinux docker-engine\n\n\n\n# 安装软件包\n\nyum install -y yum-utils device-mapper-persistent-data lvm2\n\n\n\n# 设置yum源\n\n推荐使用阿里云源\n\nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n\n\n\n# 安装docker\n\nyum -y install docker-ce-23.0.6\n\n\n\n# 命令\n\n# 启动\nsystemctl start docker\n\n# 状态\nsystemctl status docker\n\n# 开机自启\nsystemctl enable docker\n\n\n\n# 安装docker-compose\n\n下载地址\n\ncd /opt\nmv docker-compose-linux-x86_64 /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\n# 全局设置\nsudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n# 查看版本\ndocker-compose --version\n\n\n\n# 打开 2375 端口\n\n1.修改/usr/lib/systemd/system/docker.service添加-h tcp://0.0.0.0:2375\n\nexecstart=/usr/bin/dockerd -h tcp://0.0.0.0:2375 -h fd:// --containerd=/run/containerd/containerd.sock\n\n\n2.刷新配置，重启docker\n\nsystemctl daemon-reload\nsystemctl restart docker\n\n\n3.添加防火墙并重载\n\nfirewalld-cmd --zone=public --add-port=2375/tcp --permanent\nfirewalld-cmd --reload\n\n\n4.查看网络端口\n\nnetstat -ntlp\n\n\n\n# 常见问题\n\n\n# 1.running docker container : iptables: no chain/target/match by that name\n\nsudo iptables -t filter -f\nsudo iptables -t filter -x\nsystemctl restart docker\n\n\n我是老寇，我们下次再见啦！\n\n\n# 参考资料\n\ncentos7安装docker详细步骤（无坑版教程）",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"Centos7安装Elasticsearch 8.6.2",frontmatter:{title:"Centos7安装Elasticsearch 8.6.2",date:"2023-11-02T05:47:05.000Z",permalink:"/pages/d715cf/"},regularPath:"/01.%E6%8C%87%E5%8D%97/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/06.Centos7%E5%AE%89%E8%A3%85Elasticsearch%208.6.2.html",relativePath:"01.指南/01.环境搭建/06.Centos7安装Elasticsearch 8.6.2.md",key:"v-48fcfd0c",path:"/pages/d715cf/",headers:[{level:2,title:"下载elasticsearch",slug:"下载elasticsearch",normalizedTitle:"下载elasticsearch",charIndex:52},{level:2,title:"下载分词",slug:"下载分词",normalizedTitle:"下载分词",charIndex:92},{level:2,title:"安装软件",slug:"安装软件",normalizedTitle:"安装软件",charIndex:163},{level:6,title:"解压压缩包",slug:"解压压缩包",normalizedTitle:"解压压缩包",charIndex:171},{level:6,title:"新增用户名和设置新密码",slug:"新增用户名和设置新密码",normalizedTitle:"新增用户名和设置新密码",charIndex:494},{level:6,title:"创建data和logs文件夹",slug:"创建data和logs文件夹",normalizedTitle:"创建data和logs文件夹",charIndex:554},{level:6,title:"授予权限",slug:"授予权限",normalizedTitle:"授予权限",charIndex:662},{level:6,title:"设置elasticsearch.yml",slug:"设置elasticsearch-yml",normalizedTitle:"设置elasticsearch.yml",charIndex:710},{level:6,title:"设置堆内存",slug:"设置堆内存",normalizedTitle:"设置堆内存",charIndex:1143},{level:6,title:"修改jdk位置",slug:"修改jdk位置",normalizedTitle:"修改jdk位置",charIndex:1189},{level:6,title:"开启ssl",slug:"开启ssl",normalizedTitle:"开启ssl",charIndex:1286},{level:6,title:"报错处理",slug:"报错处理",normalizedTitle:"报错处理",charIndex:2034},{level:6,title:"启动",slug:"启动",normalizedTitle:"启动",charIndex:2399},{level:6,title:"设置密码",slug:"设置密码",normalizedTitle:"设置密码",charIndex:2481},{level:6,title:"后台运行",slug:"后台运行",normalizedTitle:"后台运行",charIndex:2689}],headersStr:"下载elasticsearch 下载分词 安装软件 解压压缩包 新增用户名和设置新密码 创建data和logs文件夹 授予权限 设置elasticsearch.yml 设置堆内存 修改jdk位置 开启ssl 报错处理 启动 设置密码 后台运行",content:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n跟我一起安装Elasticsearch。\n\n\n# 下载elasticsearch\n\nelasticsearch官网地址\n\n\n\n# 下载分词\n\nelasticsearch-analysis-ik地址\nelasticsearch-analysis-pinyin地址\n\n\n\n# 安装软件\n\n# 解压压缩包\n\ncd /opt\ntar -zxvf elasticsearch-8.6.2-linux-x86_64.tar.gz\nunzip -d /opt/pinyin elasticsearch-analysis-pinyin-8.6.2.zip\nunzip -d /opt/ik elasticsearch-analysis-ik-8.6.2.zip\nmv elasticsearch-8.6.2 /usr/local/elasticsearch\nmv pinyin /usr/local/elasticsearch/plugins/pinyin\nmv ik /usr/local/elasticsearch/plugins/ik\n\n\n# 新增用户名和设置新密码\n\nuseradd elasticsearch\npasswd elasticsearch\n\n\n# 创建data和logs文件夹\n\nmkdir -p /usr/local/elasticsearch/home/data\nmkdir -p /usr/local/elasticsearch/home/logs\n\n\n# 授予权限\n\nchmod -R 777 /usr/local/elasticsearch\n\n\n# 设置elasticsearch.yml\n\ncd /usr/local/elasticsearch/config\nvi elasticsearch.yml\n\n\n# 增加\nhttp.cors.enabled: true\nhttp.cors.allow-origin: "*"\nnetwork.host: 0.0.0.0\ncluster.name: laokou-elasticsearch #可自定义\nnode.name: node-elasticsearch #可自定义\nhttp.port: 9200\ncluster.initial_master_nodes: ["node-elasticsearch"] #这里就是node.name\npath.data: /usr/local/elasticsearch/home/data # 数据目录位置\npath.logs: /usr/local/elasticsearch/home/logs # 日志目录位置\n\n\n# 设置堆内存\n\nvi jvm.options\n\n\n-Xms512m\n-Xmx512m\n\n\n# 修改jdk位置\n\ncd /usr/local/elasticsearch/bin\nvi elasticsearch-env\nexport ES_JAVA_HOME=$JAVA_HOME\n\n\n# 开启ssl\n\ncd /usr/local/elasticsearch/bin\n# ES的根目录生成CA证书\n./elasticsearch-certutil ca\n# 根据生成的证书，生成p12密钥\n./elasticsearch-certutil cert --ca elastic-stack-ca.p12\n\n\nmkdir /usr/local/elasticsearch/config/certs\ncd ..\ncp elastic-stack-ca.p12 config/certs\ncp elastic-certificates.p12 config/certs\n\n\ncd config\nvi elasticsearch.yml\n\n\n# 授予权限\nchown elasticsearch: /usr/local/elasticsearch/config/certs/elastic-certificates.p12\n\n\n# 增加\nxpack.security.enabled: true\nxpack.license.self_generated.type: basic\nxpack.security.transport.ssl.enabled: true\nxpack.security.transport.ssl.verification_mode: certificate\nxpack.security.transport.ssl.keystore.path: certs/elastic-certificates.p12\nxpack.security.transport.ssl.truststore.path: certs/elastic-certificates.p12\n\n\n# 报错处理\n\n# max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]\nvi /etc/sysctl.conf\n\n\nvm.max_map_count = 655360\n\n\n# 刷新参数\nsysctl -p\n\n\n# max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]\nvi /etc/security/limits.conf\n\n\nelasticsearch soft nofile 65535\nelasticsearch hard nofile 65537\n\n\n# 启动\n\n# 切换用户\nsu elasticsearch\n\n\ncd /usr/local/elasticsearch/bin\n./elasticsearch\n\n\n# 设置密码\n\ncd /usr/local/elasticsearch/config\nvi elasticsearch.yml\n\n\n# 增加\nhttp.cors.allow-headers: Authorization\n\n\n# 重启elasticsearch\ncd /usr/local/elasticsearch/bin\n./elasticsearch-setup-passwords interactive\n\n\n# 后台运行\n\nchmod +x /usr/local/elasticsearch/bin/elasticsearch\ncd /usr/local/elasticsearch/bin\n./elasticsearch -d\n\n\n我是老寇，我们下次再见啦！',normalizedContent:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n跟我一起安装elasticsearch。\n\n\n# 下载elasticsearch\n\nelasticsearch官网地址\n\n\n\n# 下载分词\n\nelasticsearch-analysis-ik地址\nelasticsearch-analysis-pinyin地址\n\n\n\n# 安装软件\n\n# 解压压缩包\n\ncd /opt\ntar -zxvf elasticsearch-8.6.2-linux-x86_64.tar.gz\nunzip -d /opt/pinyin elasticsearch-analysis-pinyin-8.6.2.zip\nunzip -d /opt/ik elasticsearch-analysis-ik-8.6.2.zip\nmv elasticsearch-8.6.2 /usr/local/elasticsearch\nmv pinyin /usr/local/elasticsearch/plugins/pinyin\nmv ik /usr/local/elasticsearch/plugins/ik\n\n\n# 新增用户名和设置新密码\n\nuseradd elasticsearch\npasswd elasticsearch\n\n\n# 创建data和logs文件夹\n\nmkdir -p /usr/local/elasticsearch/home/data\nmkdir -p /usr/local/elasticsearch/home/logs\n\n\n# 授予权限\n\nchmod -r 777 /usr/local/elasticsearch\n\n\n# 设置elasticsearch.yml\n\ncd /usr/local/elasticsearch/config\nvi elasticsearch.yml\n\n\n# 增加\nhttp.cors.enabled: true\nhttp.cors.allow-origin: "*"\nnetwork.host: 0.0.0.0\ncluster.name: laokou-elasticsearch #可自定义\nnode.name: node-elasticsearch #可自定义\nhttp.port: 9200\ncluster.initial_master_nodes: ["node-elasticsearch"] #这里就是node.name\npath.data: /usr/local/elasticsearch/home/data # 数据目录位置\npath.logs: /usr/local/elasticsearch/home/logs # 日志目录位置\n\n\n# 设置堆内存\n\nvi jvm.options\n\n\n-xms512m\n-xmx512m\n\n\n# 修改jdk位置\n\ncd /usr/local/elasticsearch/bin\nvi elasticsearch-env\nexport es_java_home=$java_home\n\n\n# 开启ssl\n\ncd /usr/local/elasticsearch/bin\n# es的根目录生成ca证书\n./elasticsearch-certutil ca\n# 根据生成的证书，生成p12密钥\n./elasticsearch-certutil cert --ca elastic-stack-ca.p12\n\n\nmkdir /usr/local/elasticsearch/config/certs\ncd ..\ncp elastic-stack-ca.p12 config/certs\ncp elastic-certificates.p12 config/certs\n\n\ncd config\nvi elasticsearch.yml\n\n\n# 授予权限\nchown elasticsearch: /usr/local/elasticsearch/config/certs/elastic-certificates.p12\n\n\n# 增加\nxpack.security.enabled: true\nxpack.license.self_generated.type: basic\nxpack.security.transport.ssl.enabled: true\nxpack.security.transport.ssl.verification_mode: certificate\nxpack.security.transport.ssl.keystore.path: certs/elastic-certificates.p12\nxpack.security.transport.ssl.truststore.path: certs/elastic-certificates.p12\n\n\n# 报错处理\n\n# max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]\nvi /etc/sysctl.conf\n\n\nvm.max_map_count = 655360\n\n\n# 刷新参数\nsysctl -p\n\n\n# max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]\nvi /etc/security/limits.conf\n\n\nelasticsearch soft nofile 65535\nelasticsearch hard nofile 65537\n\n\n# 启动\n\n# 切换用户\nsu elasticsearch\n\n\ncd /usr/local/elasticsearch/bin\n./elasticsearch\n\n\n# 设置密码\n\ncd /usr/local/elasticsearch/config\nvi elasticsearch.yml\n\n\n# 增加\nhttp.cors.allow-headers: authorization\n\n\n# 重启elasticsearch\ncd /usr/local/elasticsearch/bin\n./elasticsearch-setup-passwords interactive\n\n\n# 后台运行\n\nchmod +x /usr/local/elasticsearch/bin/elasticsearch\ncd /usr/local/elasticsearch/bin\n./elasticsearch -d\n\n\n我是老寇，我们下次再见啦！',charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"Ubuntu20.04安装Docker",frontmatter:{title:"Ubuntu20.04安装Docker",date:"2025-05-04T12:15:18.000Z",permalink:"/pages/fade19/"},regularPath:"/01.%E6%8C%87%E5%8D%97/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/08.Ubuntu20.04%E5%AE%89%E8%A3%85Docker.html",relativePath:"01.指南/01.环境搭建/08.Ubuntu20.04安装Docker.md",key:"v-299e7afb",path:"/pages/fade19/",headers:[{level:3,title:"安装 Docker",slug:"安装-docker",normalizedTitle:"安装 docker",charIndex:44},{level:6,title:"1.更新包索引",slug:"_1-更新包索引",normalizedTitle:"1.更新包索引",charIndex:57},{level:6,title:"2.安装必要的系统工具",slug:"_2-安装必要的系统工具",normalizedTitle:"2.安装必要的系统工具",charIndex:90},{level:6,title:"3.添加 Docker 官方 GPG 密钥【没添加好就多试几次】",slug:"_3-添加-docker-官方-gpg-密钥【没添加好就多试几次】",normalizedTitle:"3.添加 docker 官方 gpg 密钥【没添加好就多试几次】",charIndex:196},{level:6,title:"4.添加 Docker 仓库",slug:"_4-添加-docker-仓库",normalizedTitle:"4.添加 docker 仓库",charIndex:311},{level:6,title:"5.再次更新包索引",slug:"_5-再次更新包索引",normalizedTitle:"5.再次更新包索引",charIndex:441},{level:6,title:"6.安装 Docker CE",slug:"_6-安装-docker-ce",normalizedTitle:"6.安装 docker ce",charIndex:476},{level:6,title:"7.启动 Docker 服务",slug:"_7-启动-docker-服务",normalizedTitle:"7.启动 docker 服务",charIndex:527},{level:3,title:"安装 Docker Compose",slug:"安装-docker-compose",normalizedTitle:"安装 docker compose",charIndex:624}],headersStr:"安装 Docker 1.更新包索引 2.安装必要的系统工具 3.添加 Docker 官方 GPG 密钥【没添加好就多试几次】 4.添加 Docker 仓库 5.再次更新包索引 6.安装 Docker CE 7.启动 Docker 服务 安装 Docker Compose",content:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n跟我一起安装Docker\n\n\n# 安装 Docker\n\n# 1.更新包索引\n\nsudo apt-get update\n\n\n# 2.安装必要的系统工具\n\nsudo apt-get install apt-transport-https ca-certificates curl software-properties-common\n\n\n# 3.添加 Docker 官方 GPG 密钥【没添加好就多试几次】\n\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n\n\n# 4.添加 Docker 仓库\n\nsudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"\n\n\n# 5.再次更新包索引\n\nsudo apt-get update\n\n\n# 6.安装 Docker CE\n\nsudo apt-get install docker-ce\n\n\n# 7.启动 Docker 服务\n\n## 启动docker\nsudo systemctl start docker\n# 查看状态\nsudo systemctl status docker\n\n\n\n# 安装 Docker Compose\n\n参考文章 Centos7安装Docker 23.0.6 中的 Docker Compose 安装步骤。\n\n我是老寇，我们下次再见啦！',normalizedContent:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n跟我一起安装docker\n\n\n# 安装 docker\n\n# 1.更新包索引\n\nsudo apt-get update\n\n\n# 2.安装必要的系统工具\n\nsudo apt-get install apt-transport-https ca-certificates curl software-properties-common\n\n\n# 3.添加 docker 官方 gpg 密钥【没添加好就多试几次】\n\ncurl -fssl https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n\n\n# 4.添加 docker 仓库\n\nsudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"\n\n\n# 5.再次更新包索引\n\nsudo apt-get update\n\n\n# 6.安装 docker ce\n\nsudo apt-get install docker-ce\n\n\n# 7.启动 docker 服务\n\n## 启动docker\nsudo systemctl start docker\n# 查看状态\nsudo systemctl status docker\n\n\n\n# 安装 docker compose\n\n参考文章 centos7安装docker 23.0.6 中的 docker compose 安装步骤。\n\n我是老寇，我们下次再见啦！',charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"Ubuntu20.04忘记密码或指纹错误",frontmatter:{title:"Ubuntu20.04忘记密码或指纹错误",date:"2025-05-04T12:26:44.000Z",permalink:"/pages/d0b936/"},regularPath:"/01.%E6%8C%87%E5%8D%97/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/09.Ubuntu20.04%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81%E6%88%96%E6%8C%87%E7%BA%B9%E9%94%99%E8%AF%AF.html",relativePath:"01.指南/01.环境搭建/09.Ubuntu20.04忘记密码或指纹错误.md",key:"v-d203bddc",path:"/pages/d0b936/",headers:[{level:6,title:"1.进入Grub模式",slug:"_1-进入grub模式",normalizedTitle:"1.进入grub模式",charIndex:39},{level:6,title:"2.选择恢复模式",slug:"_2-选择恢复模式",normalizedTitle:"2.选择恢复模式",charIndex:118},{level:6,title:"3.修改Linux行",slug:"_3-修改linux行",normalizedTitle:"3.修改linux行",charIndex:209},{level:6,title:"4.单用户模式",slug:"_4-单用户模式",normalizedTitle:"4.单用户模式",charIndex:294}],headersStr:"1.进入Grub模式 2.选择恢复模式 3.修改Linux行 4.单用户模式",content:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n跟我一起重置密码\n\n# 1.进入Grub模式\n\n重启系统，常按Esc或Shift键，选择Advanced options for Ubuntu，进入Ubuntu Grub菜单\n\n# 2.选择恢复模式\n\n选择Ubuntu, with Linux x.x.x-xxx-generic (recovery mode)，按E键进入编辑模式 【根据实际情况选择即可】\n\n# 3.修改Linux行\n\n把ro recovery nomodeset dis_ucode_Idr及后面的内容替换为rw single init=/bin/bash\n\n# 4.单用户模式\n\n注意：按 Ctrl + X 退出，进入单用户模式\n\n# 确定根目录是否已经挂载rw读写权限【看到rw说明可以读写】\nmount | grep -w /\n# 重置root密码\npasswd root\n# 重置其他账号密码\npasswd laokou\n# 重启系统\nexec /sbin/init\n\n\n根目录只挂载读取权限\n\nmount -o remount,rw /\n# 忽略报错，重启系统\nexec /sbin/init\n\n\n我是老寇，我们下次再见啦！",normalizedContent:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n跟我一起重置密码\n\n# 1.进入grub模式\n\n重启系统，常按esc或shift键，选择advanced options for ubuntu，进入ubuntu grub菜单\n\n# 2.选择恢复模式\n\n选择ubuntu, with linux x.x.x-xxx-generic (recovery mode)，按e键进入编辑模式 【根据实际情况选择即可】\n\n# 3.修改linux行\n\n把ro recovery nomodeset dis_ucode_idr及后面的内容替换为rw single init=/bin/bash\n\n# 4.单用户模式\n\n注意：按 ctrl + x 退出，进入单用户模式\n\n# 确定根目录是否已经挂载rw读写权限【看到rw说明可以读写】\nmount | grep -w /\n# 重置root密码\npasswd root\n# 重置其他账号密码\npasswd laokou\n# 重启系统\nexec /sbin/init\n\n\n根目录只挂载读取权限\n\nmount -o remount,rw /\n# 忽略报错，重启系统\nexec /sbin/init\n\n\n我是老寇，我们下次再见啦！",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"Centos7常用命令",frontmatter:{title:"Centos7常用命令",date:"2024-01-12T11:37:20.000Z",permalink:"/pages/76bfa2/"},regularPath:"/01.%E6%8C%87%E5%8D%97/02.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/00.Centos7%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html",relativePath:"01.指南/02.常用命令/00.Centos7常用命令.md",key:"v-e6ac8fd2",path:"/pages/76bfa2/",headers:[{level:4,title:"目录和文件",slug:"目录和文件",normalizedTitle:"目录和文件",charIndex:52},{level:4,title:"网络",slug:"网络",normalizedTitle:"网络",charIndex:733},{level:4,title:"防火墙",slug:"防火墙",normalizedTitle:"防火墙",charIndex:772},{level:4,title:"服务",slug:"服务",normalizedTitle:"服务",charIndex:1265},{level:4,title:"磁盘",slug:"磁盘",normalizedTitle:"磁盘",charIndex:1431},{level:4,title:"进程",slug:"进程",normalizedTitle:"进程",charIndex:1452},{level:4,title:"CPU",slug:"cpu",normalizedTitle:"cpu",charIndex:1668},{level:4,title:"账号",slug:"账号",normalizedTitle:"账号",charIndex:1691}],headersStr:"目录和文件 网络 防火墙 服务 磁盘 进程 CPU 账号",content:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，跟我学习Centos7常用命令！\n\n# 目录和文件\n\n# 创建目录\nmkdir 名称 => mkdir /data\n\n# 创建目录及子目录\nmkdir -p 名称 => mkdir -p /data/node\n\n# 创建一个或多个（用空格分开即可）\ntouch 文件1 文件2 => touch 1.txt 2.txt\n\n# 复制文件\ncp 文件 目录 => cp 1.txt /opt/data\n\n# 复制文件并改名\ncp 文件 目录 => cp 1.txt /opt/data/2.txt\n\n# 移动目录到另一个目录\nmv 目录 目录 => mv data /opt\n\n# 移动目录到另一个目录并改名\nmv 目录 目录 => mv data /opt/data2\n\n# 强制删除一个目录\nrm -rf data\n\n# 文件夹授予权限\nchmod 777 -R 目录 => chmod 777 -R data\n\n# 解压tar.gz\ntar -zxvf 压缩包 => tar -zxvf 1.tar.gz\n\n# 解压zip\nunzip 压缩包 => unzip 1.zip\n\n# 查询目录路径\npwd\n\n# 查看文件\ncat 目录 => cat 1.txt\n\n# 编辑文件\nvi 目录 => vi 1.txt\n\n# 将xxx写入文件\necho 内容 >> 文件 => echo '111' >> 1.txt\n\n# 输出文件尾部内容\ntail -n 行数 文件 => tail -n 1000 1.txt\n\n# 查看文件\nfind /-name 文件 => find /-name 1.txt\n\n\n# 网络\n\n# 重启网络\nservice network restart\n\n\n# 防火墙\n\n# 关闭防火墙\nsystemctl stop firewalld.service\n\n# 重启防火墙\nsystemctl restart firewalld.service\n\n# 启动防火墙\nsystemctl start firewalld.service\n\n# 防火墙状态\nsystemctl status firewalld.service\n\n# 开启开机自启动\nsystemctl enable firewalld.service\n\n# 关闭开机自启动\nsystemctl disable firewalld.service\n\n# 查看已开放端口\nfirewalld-cmd --list-ports\n\n# 开放端口(永久有效)（需要重新加载防火墙）\nfirewalld-cmd --zone=public --add-port=端口/tcp --permanent => firewalld-cmd --zone=public --add-port=8080/tcp --permanent\n\n# 重新加载防火墙\nfirewalld-cmd --reload\n\n\n# 服务\n\n# 查看服务开机启动状态\nsystemctl list-run-files\n\n# 关闭指定服务自启动\nsystemctl disable 服务 => systemctl disable mysql\n\n# 开启指定服务自启动\nsystemctl enable 服务 => systemctl enable mysql\n\n\n# 磁盘\n\n# 查看磁盘\ndf -h\n\n\n# 进程\n\n# 查看端口\nnetstat -ntlp\n\n# 进程启动情况\nps -ef|grep 进程名 => ps -ef|grep java\n\n# 查看端口占用\nnetstat -tunlp|grep 端口 => netstat -tunlp|grep 8080\n\n# 查看进程\nps -aux\n\n# 终止进程\nkill 进程 => kill 884\n\n# 强制终止进程\nkill -9 进程 => kill -9 884\n\n\n# CPU\n\n# 查看cpu情况\ntop\n\n\n# 账号\n\n# 切换账号\nsu 账号 => su root\n\n# 新增账号\nuseradd 用户名 => useradd mysql\n\n# 添加到分组\nuseradd -g 组名 用户名 => useradd -g mysql-group mysql\n\n# 设置密码\npasswd 用户名 => passwd mysql\n\n# 删除用户\nuserdel 用户名 => userdel mysql\n\n# 登录用户信息\nwhomi\n",normalizedContent:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，跟我学习centos7常用命令！\n\n# 目录和文件\n\n# 创建目录\nmkdir 名称 => mkdir /data\n\n# 创建目录及子目录\nmkdir -p 名称 => mkdir -p /data/node\n\n# 创建一个或多个（用空格分开即可）\ntouch 文件1 文件2 => touch 1.txt 2.txt\n\n# 复制文件\ncp 文件 目录 => cp 1.txt /opt/data\n\n# 复制文件并改名\ncp 文件 目录 => cp 1.txt /opt/data/2.txt\n\n# 移动目录到另一个目录\nmv 目录 目录 => mv data /opt\n\n# 移动目录到另一个目录并改名\nmv 目录 目录 => mv data /opt/data2\n\n# 强制删除一个目录\nrm -rf data\n\n# 文件夹授予权限\nchmod 777 -r 目录 => chmod 777 -r data\n\n# 解压tar.gz\ntar -zxvf 压缩包 => tar -zxvf 1.tar.gz\n\n# 解压zip\nunzip 压缩包 => unzip 1.zip\n\n# 查询目录路径\npwd\n\n# 查看文件\ncat 目录 => cat 1.txt\n\n# 编辑文件\nvi 目录 => vi 1.txt\n\n# 将xxx写入文件\necho 内容 >> 文件 => echo '111' >> 1.txt\n\n# 输出文件尾部内容\ntail -n 行数 文件 => tail -n 1000 1.txt\n\n# 查看文件\nfind /-name 文件 => find /-name 1.txt\n\n\n# 网络\n\n# 重启网络\nservice network restart\n\n\n# 防火墙\n\n# 关闭防火墙\nsystemctl stop firewalld.service\n\n# 重启防火墙\nsystemctl restart firewalld.service\n\n# 启动防火墙\nsystemctl start firewalld.service\n\n# 防火墙状态\nsystemctl status firewalld.service\n\n# 开启开机自启动\nsystemctl enable firewalld.service\n\n# 关闭开机自启动\nsystemctl disable firewalld.service\n\n# 查看已开放端口\nfirewalld-cmd --list-ports\n\n# 开放端口(永久有效)（需要重新加载防火墙）\nfirewalld-cmd --zone=public --add-port=端口/tcp --permanent => firewalld-cmd --zone=public --add-port=8080/tcp --permanent\n\n# 重新加载防火墙\nfirewalld-cmd --reload\n\n\n# 服务\n\n# 查看服务开机启动状态\nsystemctl list-run-files\n\n# 关闭指定服务自启动\nsystemctl disable 服务 => systemctl disable mysql\n\n# 开启指定服务自启动\nsystemctl enable 服务 => systemctl enable mysql\n\n\n# 磁盘\n\n# 查看磁盘\ndf -h\n\n\n# 进程\n\n# 查看端口\nnetstat -ntlp\n\n# 进程启动情况\nps -ef|grep 进程名 => ps -ef|grep java\n\n# 查看端口占用\nnetstat -tunlp|grep 端口 => netstat -tunlp|grep 8080\n\n# 查看进程\nps -aux\n\n# 终止进程\nkill 进程 => kill 884\n\n# 强制终止进程\nkill -9 进程 => kill -9 884\n\n\n# cpu\n\n# 查看cpu情况\ntop\n\n\n# 账号\n\n# 切换账号\nsu 账号 => su root\n\n# 新增账号\nuseradd 用户名 => useradd mysql\n\n# 添加到分组\nuseradd -g 组名 用户名 => useradd -g mysql-group mysql\n\n# 设置密码\npasswd 用户名 => passwd mysql\n\n# 删除用户\nuserdel 用户名 => userdel mysql\n\n# 登录用户信息\nwhomi\n",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"Docker安装Postgresql 16.1",frontmatter:{title:"Docker安装Postgresql 16.1",date:"2023-12-18T13:47:05.000Z",permalink:"/pages/d715cb/"},regularPath:"/01.%E6%8C%87%E5%8D%97/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/07.Docker%E5%AE%89%E8%A3%85Postgresql%2016.1.html",relativePath:"01.指南/01.环境搭建/07.Docker安装Postgresql 16.1.md",key:"v-01c05974",path:"/pages/d715cb/",headersStr:null,content:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n跟我一起安装Postgresql。\n\ndocker pull postgres:16.1\n\n# 创建挂在文件夹\nmkdir -p /home/data/postgresql\n\n# 启动\ndocker run --name postgresql --privileged -e POSTGRES_USER=root -e POSTGRES_PASSWORD=laokou123  -p 5432:5432 -v /home/data/postgresql:/var/lib/postgresql/data -d postgres\n\n\n我是老寇，我们下次再见啦！",normalizedContent:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n跟我一起安装postgresql。\n\ndocker pull postgres:16.1\n\n# 创建挂在文件夹\nmkdir -p /home/data/postgresql\n\n# 启动\ndocker run --name postgresql --privileged -e postgres_user=root -e postgres_password=laokou123  -p 5432:5432 -v /home/data/postgresql:/var/lib/postgresql/data -d postgres\n\n\n我是老寇，我们下次再见啦！",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"项目启动【dev环境】",frontmatter:{title:"项目启动【dev环境】",date:"2023-09-26T12:20:19.000Z",permalink:"/pages/10bfa7/"},regularPath:"/01.%E6%8C%87%E5%8D%97/03.%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/01.%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E3%80%90dev%E7%8E%AF%E5%A2%83%E3%80%91.html",relativePath:"01.指南/03.快速上手/01.项目启动【dev环境】.md",key:"v-280a66fa",path:"/pages/10bfa7/",headers:[{level:2,title:"环境搭建",slug:"环境搭建",normalizedTitle:"环境搭建",charIndex:30},{level:2,title:"视频地址",slug:"视频地址",normalizedTitle:"视频地址",charIndex:5818},{level:2,title:"项目运行（请一定按照作者的步骤来）",slug:"项目运行-请一定按照作者的步骤来",normalizedTitle:"项目运行（请一定按照作者的步骤来）",charIndex:5860}],headersStr:"环境搭建 视频地址 项目运行（请一定按照作者的步骤来）",content:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n\n# 环境搭建\n\n修改win系统上面的hosts(如有需要，请自行更换IP，比如说使用云服务，请更换成云服务器IP)【目录位置：C:\\Windows\\System32\\drivers\\etc\\hosts】\n\n127.0.0.1 kafka\n127.0.0.1 redis\n127.0.0.1 postgresql\n127.0.0.1 nginx\n127.0.0.1 elasticsearch\n127.0.0.1 nacos\n127.0.0.1 gateway\n127.0.0.1 tdengine\n127.0.0.1 snail-job\n127.0.0.1 auth\n127.0.0.1 admin\n127.0.0.1 jaeger-collector\n127.0.0.1 otel-collector\n127.0.0.1 ui\n127.0.0.1 iot\n127.0.0.1 loki\n127.0.0.1 jaeger-query\n127.0.0.1 pulsar\n127.0.0.1 sentinel\n127.0.0.1 zokeeper\n\n\nwindow安装docker教程\n\n注意：本教程为window系统的docker，其余环境请自行安装\n\n注意：window系统自带docker-compose，无需安装\n\n注意：先跑起来，不要改任何的密码，请不要擅作主张的修改，如果照着教程运行，还有问题请联系作者\n\n注意：本教程为window系统的docker，其余环境请自行安装\n\nservices:\n  postgresql:\n    image: timescale/timescaledb:latest-pg17\n    container_name: postgresql\n    # 保持容器在没有守护程序的情况下运行\n    tty: true\n    restart: always\n    privileged: true\n    ports:\n      - "5432:5432"\n    volumes:\n      - ./postgresql17/data:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_USER=root\n      - POSTGRES_PASSWORD=laokou123\n      - TZ=Asia/Shanghai\n    networks:\n      - iot_network\n  redis:\n    image: redis:8.0.1\n    container_name: redis\n    # 保持容器在没有守护程序的情况下运行\n    tty: true\n    restart: always\n    privileged: true\n    ports:\n      - "6379:6379"\n    volumes:\n      - ./redis7/conf/redis.conf:/etc/redis/redis.conf\n      - ./redis7/data:/data\n    command: redis-server --appendonly yes --requirepass \'laokou123\'\n    environment:\n      - TZ=Asia/Shanghai\n    networks:\n      - iot_network\n  kafka:\n    image: bitnami/kafka:4.0.0\n    container_name: kafka\n    tty: true\n    ports:\n      - \'9092:9092\'\n      - \'9093:9093\'\n    environment:\n      # 节点ID\n      - KAFKA_BROKER_ID=1\n      # 允许使用kraft，即Kafka替代Zookeeper\n      - KAFKA_ENABLE_KRAFT=yes\n      # kafka角色，做broker，也要做controller\n      - KAFKA_CFG_PROCESS_ROLES=broker,controller\n      # 指定供外部使用的控制类请求信息\n      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER\n      # 定义安全协议\n      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT\n      # 定义kafka服务端socket监听端口\n      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093\n      # 外网访问地址\n      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092\n      # 允许使用PLAINTEXT监听器，默认false，不建议在生产环境使用\n      - ALLOW_PLAINTEXT_LISTENER=yes\n      # 设置broker最大内存，和初始内存\n      - KAFKA_HEAP_OPTS=-Xmx512M -Xms512M\n      # 集群地址\n      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093\n      # 节点ID\n      - KAFKA_CFG_NODE_ID=1\n    restart: always\n    privileged: true\n    networks:\n      - iot_network\n  # bin/pulsar-admin tenants create laokou\n  # bin/pulsar-admin namespaces create laokou/mqtt\n  # bin/pulsar-admin topics create-partitioned-topic laokou/mqtt/up-property-report -p 4\n  # bin/pulsar-admin topics create-partitioned-topic laokou/mqtt/down-property-read -p 4\n  # bin/pulsar-admin topics create-partitioned-topic laokou/mqtt/up-property-read-reply -p 4\n  # bin/pulsar-admin topics create-partitioned-topic laokou/mqtt/down-property-write -p 4\n  # bin/pulsar-admin topics create-partitioned-topic laokou/mqtt/up-property-write-reply -p 4\n  pulsar:\n    image: apachepulsar/pulsar:4.0.5\n    container_name: pulsar\n    # 保持容器在没有守护程序的情况下运行\n    tty: true\n    restart: always\n    privileged: true\n    command: bin/pulsar standalone\n    environment:\n      - PULSAR_MEM=-Xms512m -Xmx512m\n    ports:\n      - "6650:6650"\n      - "8080:8080"\n    volumes:\n      - ./pulsar/data:/pulsar/data\n    networks:\n      - iot_network\n  zookeeper:\n    image: bitnami/zookeeper:3.9.3\n    container_name: zookeeper\n    tty: true\n    ports:\n      - \'2181:2181\'\n    environment:\n      # 允许匿名登录\n      - ALLOW_ANONYMOUS_LOGIN=yes\n    restart: always\n    privileged: true\n    networks:\n      - iot_network\n  # https://github.com/KouShenhai/Sentinel\n  # 账号/密码 => sentinel/laokou123\n  sentinel-dashboard:\n    image: registry.cn-shenzhen.aliyuncs.com/koushenhai/sentinel-dashboard:3.5.4.2\n    container_name: sentinel-dashboard\n    # 保持容器在没有守护程序的情况下运行\n    tty: true\n    restart: always\n    privileged: true\n    ports:\n      - "8972:8972"\n    volumes:\n      - ./sentinel/logs:/opt/logs/csp\n    env_file:\n      - env/sentinel.env\n    networks:\n      - iot_network\n  snail-job:\n    image: registry.cn-shenzhen.aliyuncs.com/koushenhai/snail-job:3.5.4.2\n    container_name: snail-job\n    # 保持容器在没有守护程序的情况下运行\n    tty: true\n    restart: always\n    privileged: true\n    ports:\n      - "8088:8088"\n      - "17888:17888"\n    volumes:\n      - ./snail-job/logs:/opt/data/log\n    env_file:\n      - env/snail-job.env\n    networks:\n      - iot_network\n    depends_on:\n      - postgresql\n  portainer:\n    image: portainer/portainer-ce:latest\n    container_name: portainer\n    # 保持容器在没有守护程序的情况下运行\n    tty: true\n    restart: always\n    privileged: true\n    ports:\n      - "9010:9000"\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - ./portainer/data:/data\n    networks:\n      - iot_network\nnetworks:\n  iot_network:\n    driver: bridge\n\n\n增加sentinel.env配置\n\n请注意sentinel路径\n\n请注意sentinel路径\n\n请注意sentinel路径\n\nAUTH_USERNAME=sentinel\nAUTH_PASSWORD=laokou123\nVERSION=3.5.4\nPROFILE=dev\nSERVER_PORT=8972\nJVM_OPTS="-Xmx512m -Xms512m -Xmn256m -XX:+UseG1GC -Duser.timezone=GMT+08"\n\n\n增加snail-job.env配置\n\n请注意snail-job路径\n\n请注意snail-job路径\n\n请注意snail-job路径\n\nDATASOURCE_DRIVER_CLASS_NAME=org.postgresql.Driver\nDATASOURCE_HOST=postgresql\nDATASOURCE_PORT=5432\nDATASOURCE_DATABASE=snail_job\nDATASOURCE_PARAM=tcpKeepAlive=true&reWriteBatchedInserts=true&ApplicationName=snail-job&useSSL=false&reWriteBatchedInserts=true&stringtype=unspecified\nDATASOURCE_PLATFORM=postgresql\nDATASOURCE_USERNAME=root\nDATASOURCE_PASSWORD=laokou123\nPROFILE=dev\nSERVER_PORT=8088\nTZ=Asia/Shanghai\nLANG=zh_CN.UTF-8\n\n\n注意：复制到指定目录，然后启动服务【需要授权】\n\n# Ubuntu授权\nchmod -R 7777 目录\n\n\n# 启动服务\ndocker-compose up - d\n\n\n访问【docker可视化界面】http://localhost:9010\n\n注意：图片仅供参考，以实际目录为准\n\n\n# 视频地址\n\n注意：视频仅供参考，以实际项目为准\n\n老寇云平台-项目演示视频\n\n\n# 项目运行（请一定按照作者的步骤来）\n\n注意：Maven 版本请使用3.9.x\n\n注意：Maven 版本请使用3.9.x\n\n注意：Maven 版本请使用3.9.x\n\n注意：项目里面已经配置，如果还是下载不了依赖，可以尝试配置Maven setting.xml\n\n<mirrors>\n\t<mirror>\n\t\t<id>nexus</id>\n\t\t<mirrorOf>*,!spring-milestones,!spring-snapshots</mirrorOf>\n\t\t<url>https://mirrors.cloud.tencent.com/nexus/repository/maven-public/</url>\n\t</mirror>\n</mirrons>\n\n\n🚀 软件版本\n\n软件名称          软件版本\nJDK           21\nMaven         3.9.4\nTimescaleDB   17\nRedis         7.2.4\n\n\n\n🚀 项目拉取（安装git）\n\n * 项目目录里面不能带中文\n * 项目目录里面不能带中文\n * 项目目录里面不能带中文\n\nssh方式拉取（推荐）\n\ngit clone git@github.com:KouShenhai/KCloud-Platform-IoT.git\n\n\nhttps方式\n\ngit clone https://github.com/KouShenhai/KCloud-Platform-IoT.git\n\n\n🚀 项目打包，确保项目能正常编译\n\n# 项目打包\nmvn clean install -P dev -DskipTests\n\n\n🚀 初始化数据库\n\n * kcloud_platform.sql 【系统管理】\n * kcloud_platform_domain.sql 【领域事件】\n * kcloud_platform_iot.sql 【物联管理】\n * kcloud_platform_nacos.sql 【Nacos】\n * kcloud_platform_generator.sql 【代码生成】\n\n注意：图片仅供参考，以实际目录为准\n\n注意：不同的数据库执行不同的SQL文件\n\n注意：不同的数据库执行不同的SQL文件\n\n注意：不同的数据库执行不同的SQL文件\n\n🚀 修改pom.xml配置，修改数据库连接信息，其他信息默认即可\n\n注意：先跑起来，不要改任何的密码，请不要擅作主张的修改，如果照着教程运行，还有问题请联系作者\n\n注意：图片仅供参考，以实际目录为准\n\n🚀 运行laokou-nacos，启动单机Nacos（需要配置VM Option）【运行好了，不要关闭nacos】\n\n-Xmx512m\n-Xms512m\n-Dnacos.standalone=true\n-Dcom.google.protobuf.use_unsafe_pre22_gencode\n\n\n🚀 访问 Nacos控制台，创建命名空间（如有需要自行修改即可）\n\n🚀 注意：请运行laokou-nacos、laokou-distributed-identifier、laokou-oss、laokou-auth、laokou-gateway、laokou-admin【有先后顺序，请按照步骤】\n\n🚀 注意：请运行laokou-nacos、laokou-distributed-identifier、laokou-oss、laokou-auth、laokou-gateway、laokou-admin【有先后顺序，请按照步骤】\n\n🚀 注意：请运行laokou-nacos、laokou-distributed-identifier、laokou-oss、laokou-auth、laokou-gateway、laokou-admin【有先后顺序，请按照步骤】\n\n注意：图片仅供参考，以实际目录为准\n\n🚀 访问API文档\n\n网关服务：http://gateway:5555/doc.html\n\n认证服务：http://auth:1111/doc.html\n\n管理服务：http://admin:9990/doc.html\n\n我是老寇，我们下次再见啦！',normalizedContent:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n\n# 环境搭建\n\n修改win系统上面的hosts(如有需要，请自行更换ip，比如说使用云服务，请更换成云服务器ip)【目录位置：c:\\windows\\system32\\drivers\\etc\\hosts】\n\n127.0.0.1 kafka\n127.0.0.1 redis\n127.0.0.1 postgresql\n127.0.0.1 nginx\n127.0.0.1 elasticsearch\n127.0.0.1 nacos\n127.0.0.1 gateway\n127.0.0.1 tdengine\n127.0.0.1 snail-job\n127.0.0.1 auth\n127.0.0.1 admin\n127.0.0.1 jaeger-collector\n127.0.0.1 otel-collector\n127.0.0.1 ui\n127.0.0.1 iot\n127.0.0.1 loki\n127.0.0.1 jaeger-query\n127.0.0.1 pulsar\n127.0.0.1 sentinel\n127.0.0.1 zokeeper\n\n\nwindow安装docker教程\n\n注意：本教程为window系统的docker，其余环境请自行安装\n\n注意：window系统自带docker-compose，无需安装\n\n注意：先跑起来，不要改任何的密码，请不要擅作主张的修改，如果照着教程运行，还有问题请联系作者\n\n注意：本教程为window系统的docker，其余环境请自行安装\n\nservices:\n  postgresql:\n    image: timescale/timescaledb:latest-pg17\n    container_name: postgresql\n    # 保持容器在没有守护程序的情况下运行\n    tty: true\n    restart: always\n    privileged: true\n    ports:\n      - "5432:5432"\n    volumes:\n      - ./postgresql17/data:/var/lib/postgresql/data\n    environment:\n      - postgres_user=root\n      - postgres_password=laokou123\n      - tz=asia/shanghai\n    networks:\n      - iot_network\n  redis:\n    image: redis:8.0.1\n    container_name: redis\n    # 保持容器在没有守护程序的情况下运行\n    tty: true\n    restart: always\n    privileged: true\n    ports:\n      - "6379:6379"\n    volumes:\n      - ./redis7/conf/redis.conf:/etc/redis/redis.conf\n      - ./redis7/data:/data\n    command: redis-server --appendonly yes --requirepass \'laokou123\'\n    environment:\n      - tz=asia/shanghai\n    networks:\n      - iot_network\n  kafka:\n    image: bitnami/kafka:4.0.0\n    container_name: kafka\n    tty: true\n    ports:\n      - \'9092:9092\'\n      - \'9093:9093\'\n    environment:\n      # 节点id\n      - kafka_broker_id=1\n      # 允许使用kraft，即kafka替代zookeeper\n      - kafka_enable_kraft=yes\n      # kafka角色，做broker，也要做controller\n      - kafka_cfg_process_roles=broker,controller\n      # 指定供外部使用的控制类请求信息\n      - kafka_cfg_controller_listener_names=controller\n      # 定义安全协议\n      - kafka_cfg_listener_security_protocol_map=controller:plaintext,plaintext:plaintext\n      # 定义kafka服务端socket监听端口\n      - kafka_cfg_listeners=plaintext://:9092,controller://:9093\n      # 外网访问地址\n      - kafka_cfg_advertised_listeners=plaintext://kafka:9092\n      # 允许使用plaintext监听器，默认false，不建议在生产环境使用\n      - allow_plaintext_listener=yes\n      # 设置broker最大内存，和初始内存\n      - kafka_heap_opts=-xmx512m -xms512m\n      # 集群地址\n      - kafka_cfg_controller_quorum_voters=1@kafka:9093\n      # 节点id\n      - kafka_cfg_node_id=1\n    restart: always\n    privileged: true\n    networks:\n      - iot_network\n  # bin/pulsar-admin tenants create laokou\n  # bin/pulsar-admin namespaces create laokou/mqtt\n  # bin/pulsar-admin topics create-partitioned-topic laokou/mqtt/up-property-report -p 4\n  # bin/pulsar-admin topics create-partitioned-topic laokou/mqtt/down-property-read -p 4\n  # bin/pulsar-admin topics create-partitioned-topic laokou/mqtt/up-property-read-reply -p 4\n  # bin/pulsar-admin topics create-partitioned-topic laokou/mqtt/down-property-write -p 4\n  # bin/pulsar-admin topics create-partitioned-topic laokou/mqtt/up-property-write-reply -p 4\n  pulsar:\n    image: apachepulsar/pulsar:4.0.5\n    container_name: pulsar\n    # 保持容器在没有守护程序的情况下运行\n    tty: true\n    restart: always\n    privileged: true\n    command: bin/pulsar standalone\n    environment:\n      - pulsar_mem=-xms512m -xmx512m\n    ports:\n      - "6650:6650"\n      - "8080:8080"\n    volumes:\n      - ./pulsar/data:/pulsar/data\n    networks:\n      - iot_network\n  zookeeper:\n    image: bitnami/zookeeper:3.9.3\n    container_name: zookeeper\n    tty: true\n    ports:\n      - \'2181:2181\'\n    environment:\n      # 允许匿名登录\n      - allow_anonymous_login=yes\n    restart: always\n    privileged: true\n    networks:\n      - iot_network\n  # https://github.com/koushenhai/sentinel\n  # 账号/密码 => sentinel/laokou123\n  sentinel-dashboard:\n    image: registry.cn-shenzhen.aliyuncs.com/koushenhai/sentinel-dashboard:3.5.4.2\n    container_name: sentinel-dashboard\n    # 保持容器在没有守护程序的情况下运行\n    tty: true\n    restart: always\n    privileged: true\n    ports:\n      - "8972:8972"\n    volumes:\n      - ./sentinel/logs:/opt/logs/csp\n    env_file:\n      - env/sentinel.env\n    networks:\n      - iot_network\n  snail-job:\n    image: registry.cn-shenzhen.aliyuncs.com/koushenhai/snail-job:3.5.4.2\n    container_name: snail-job\n    # 保持容器在没有守护程序的情况下运行\n    tty: true\n    restart: always\n    privileged: true\n    ports:\n      - "8088:8088"\n      - "17888:17888"\n    volumes:\n      - ./snail-job/logs:/opt/data/log\n    env_file:\n      - env/snail-job.env\n    networks:\n      - iot_network\n    depends_on:\n      - postgresql\n  portainer:\n    image: portainer/portainer-ce:latest\n    container_name: portainer\n    # 保持容器在没有守护程序的情况下运行\n    tty: true\n    restart: always\n    privileged: true\n    ports:\n      - "9010:9000"\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - ./portainer/data:/data\n    networks:\n      - iot_network\nnetworks:\n  iot_network:\n    driver: bridge\n\n\n增加sentinel.env配置\n\n请注意sentinel路径\n\n请注意sentinel路径\n\n请注意sentinel路径\n\nauth_username=sentinel\nauth_password=laokou123\nversion=3.5.4\nprofile=dev\nserver_port=8972\njvm_opts="-xmx512m -xms512m -xmn256m -xx:+useg1gc -duser.timezone=gmt+08"\n\n\n增加snail-job.env配置\n\n请注意snail-job路径\n\n请注意snail-job路径\n\n请注意snail-job路径\n\ndatasource_driver_class_name=org.postgresql.driver\ndatasource_host=postgresql\ndatasource_port=5432\ndatasource_database=snail_job\ndatasource_param=tcpkeepalive=true&rewritebatchedinserts=true&applicationname=snail-job&usessl=false&rewritebatchedinserts=true&stringtype=unspecified\ndatasource_platform=postgresql\ndatasource_username=root\ndatasource_password=laokou123\nprofile=dev\nserver_port=8088\ntz=asia/shanghai\nlang=zh_cn.utf-8\n\n\n注意：复制到指定目录，然后启动服务【需要授权】\n\n# ubuntu授权\nchmod -r 7777 目录\n\n\n# 启动服务\ndocker-compose up - d\n\n\n访问【docker可视化界面】http://localhost:9010\n\n注意：图片仅供参考，以实际目录为准\n\n\n# 视频地址\n\n注意：视频仅供参考，以实际项目为准\n\n老寇云平台-项目演示视频\n\n\n# 项目运行（请一定按照作者的步骤来）\n\n注意：maven 版本请使用3.9.x\n\n注意：maven 版本请使用3.9.x\n\n注意：maven 版本请使用3.9.x\n\n注意：项目里面已经配置，如果还是下载不了依赖，可以尝试配置maven setting.xml\n\n<mirrors>\n\t<mirror>\n\t\t<id>nexus</id>\n\t\t<mirrorof>*,!spring-milestones,!spring-snapshots</mirrorof>\n\t\t<url>https://mirrors.cloud.tencent.com/nexus/repository/maven-public/</url>\n\t</mirror>\n</mirrons>\n\n\n🚀 软件版本\n\n软件名称          软件版本\njdk           21\nmaven         3.9.4\ntimescaledb   17\nredis         7.2.4\n\n\n\n🚀 项目拉取（安装git）\n\n * 项目目录里面不能带中文\n * 项目目录里面不能带中文\n * 项目目录里面不能带中文\n\nssh方式拉取（推荐）\n\ngit clone git@github.com:koushenhai/kcloud-platform-iot.git\n\n\nhttps方式\n\ngit clone https://github.com/koushenhai/kcloud-platform-iot.git\n\n\n🚀 项目打包，确保项目能正常编译\n\n# 项目打包\nmvn clean install -p dev -dskiptests\n\n\n🚀 初始化数据库\n\n * kcloud_platform.sql 【系统管理】\n * kcloud_platform_domain.sql 【领域事件】\n * kcloud_platform_iot.sql 【物联管理】\n * kcloud_platform_nacos.sql 【nacos】\n * kcloud_platform_generator.sql 【代码生成】\n\n注意：图片仅供参考，以实际目录为准\n\n注意：不同的数据库执行不同的sql文件\n\n注意：不同的数据库执行不同的sql文件\n\n注意：不同的数据库执行不同的sql文件\n\n🚀 修改pom.xml配置，修改数据库连接信息，其他信息默认即可\n\n注意：先跑起来，不要改任何的密码，请不要擅作主张的修改，如果照着教程运行，还有问题请联系作者\n\n注意：图片仅供参考，以实际目录为准\n\n🚀 运行laokou-nacos，启动单机nacos（需要配置vm option）【运行好了，不要关闭nacos】\n\n-xmx512m\n-xms512m\n-dnacos.standalone=true\n-dcom.google.protobuf.use_unsafe_pre22_gencode\n\n\n🚀 访问 nacos控制台，创建命名空间（如有需要自行修改即可）\n\n🚀 注意：请运行laokou-nacos、laokou-distributed-identifier、laokou-oss、laokou-auth、laokou-gateway、laokou-admin【有先后顺序，请按照步骤】\n\n🚀 注意：请运行laokou-nacos、laokou-distributed-identifier、laokou-oss、laokou-auth、laokou-gateway、laokou-admin【有先后顺序，请按照步骤】\n\n🚀 注意：请运行laokou-nacos、laokou-distributed-identifier、laokou-oss、laokou-auth、laokou-gateway、laokou-admin【有先后顺序，请按照步骤】\n\n注意：图片仅供参考，以实际目录为准\n\n🚀 访问api文档\n\n网关服务：http://gateway:5555/doc.html\n\n认证服务：http://auth:1111/doc.html\n\n管理服务：http://admin:9990/doc.html\n\n我是老寇，我们下次再见啦！',charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"项目启动【test环境】",frontmatter:{title:"项目启动【test环境】",date:"2024-10-26T00:41:18.000Z",permalink:"/pages/9fade8/"},regularPath:"/01.%E6%8C%87%E5%8D%97/03.%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/02.%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E3%80%90test%E7%8E%AF%E5%A2%83%E3%80%91.html",relativePath:"01.指南/03.快速上手/02.项目启动【test环境】.md",key:"v-6fdf502e",path:"/pages/9fade8/",headersStr:null,content:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n建议测试环境上这个，需要整证书，操作和dev环境一样，只需要切换为test环境即可",normalizedContent:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n建议测试环境上这个，需要整证书，操作和dev环境一样，只需要切换为test环境即可",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"项目启动【prod环境】",frontmatter:{title:"项目启动【prod环境】",date:"2025-01-25T20:37:18.000Z",permalink:"/pages/7be29e/"},regularPath:"/01.%E6%8C%87%E5%8D%97/03.%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/03.%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E3%80%90prod%E7%8E%AF%E5%A2%83%E3%80%91.html",relativePath:"01.指南/03.快速上手/03.项目启动【prod环境】.md",key:"v-435b25ee",path:"/pages/7be29e/",headersStr:null,content:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n建议生产环境上这个，需要整证书，操作和dev环境一样，只需要切换为prod环境即可",normalizedContent:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n建议生产环境上这个，需要整证书，操作和dev环境一样，只需要切换为prod环境即可",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"更新日志",frontmatter:{title:"更新日志",date:"2025-05-17T10:57:55.000Z",permalink:"/pages/b04951/"},regularPath:"/01.%E6%8C%87%E5%8D%97/03.%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/04.%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97.html",relativePath:"01.指南/03.快速上手/04.更新日志.md",key:"v-0eb5a24e",path:"/pages/b04951/",headers:[{level:4,title:"3.5.4更新日志",slug:"_3-5-4更新日志",normalizedTitle:"3.5.4更新日志",charIndex:29},{level:6,title:"版本",slug:"版本",normalizedTitle:"版本",charIndex:42},{level:6,title:"功能",slug:"功能",normalizedTitle:"功能",charIndex:163},{level:4,title:"3.5.1更新日志",slug:"_3-5-1更新日志",normalizedTitle:"3.5.1更新日志",charIndex:537},{level:6,title:"版本",slug:"版本-2",normalizedTitle:"版本",charIndex:42},{level:6,title:"功能",slug:"功能-2",normalizedTitle:"功能",charIndex:163},{level:4,title:"3.5.0更新日志【包含之前版本】",slug:"_3-5-0更新日志【包含之前版本】",normalizedTitle:"3.5.0更新日志【包含之前版本】",charIndex:1481},{level:6,title:"版本",slug:"版本-3",normalizedTitle:"版本",charIndex:42},{level:6,title:"功能",slug:"功能-3",normalizedTitle:"功能",charIndex:163}],headersStr:"3.5.4更新日志 版本 功能 3.5.1更新日志 版本 功能 3.5.0更新日志【包含之前版本】 版本 功能",content:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n# 3.5.4更新日志\n\n# 版本\n\n🚀 升级Spring Boot版本到3.5.4\n\n🚀 升级Spring OAuth2 Authorization Server版本到1.5.2\n\n🚀 升级Spring Cloud Alibaba版本到2023.0.3.3\n\n# 功能\n\n🚀 移除优雅停机过滤器\n\n🚀 网关加密去掉，由auth服务解密【用户名密码登录】\n\n🚀 去掉@Autowired注解，改为构造器注入\n\n🚀 项目禁止使用@Autowired和@SneakyThrows注解\n\n🚀 重构oss上传文件【本地/亚马逊S3】，独立服务，基于Dubbo调用\n\n🚀 还原Resilience4j为Sentinel，基于docker部署，方便启动和管理\n\n🚀 Snail Job基于docker部署，方便启动和管理\n\n🚀 Assertions替换成AssertJ\n\n🚀 spring官方宣布停止reactor-kafka维护，移除reactor-kafka\n\n🚀 使用dubbo Triple协议，方便后面与go语言对接【gRpc】，使用Protobuf序列化，移除dubbo fury序列化\n\n# 3.5.1更新日志\n\n# 版本\n\n🚀 升级Spring Boot版本到3.5.3\n\n🚀 Fory升级到0.12.0-SNAPSHOT\n\n🚀 升级Spring OAuth2 Authorization Server版本到1.5.1\n\n# 功能\n\n🚀 为了减少不必要的修改，分别将laokou_前缀改为iot和LAOKOU_改为IOT，避免自定义项目结构修改过多的代码【主要修改NACOS命名空间和MQ主题】\n\n🚀 Redis序列化将Jackson改为Fory【Jackson序列化已移除】\n\n🚀 构建物联网技术栈，摈弃互联网那一套技术栈，项目移除RocketMQ【Kafka替代RocketMQ】/ShardingSphere/Seata/Dubbo以及其他用不到的模块和依赖，简化项目结构，专注于业务，业务驱动技术！！！【主要还是我玩腻了，东西多了懒得维护，现在本项目的技术栈只为IoT服务】\n\n🚀 项目强制依赖Kafka，Pulsar，Zookeeper\n\n🚀 数据库名称去掉boot_前缀\n\n🚀 项目移除领域溯源的概念，只保留领域事件，统一由MQ处理\n\n🚀 多租户架构变更，用户权限只做字段隔离，IoT数据独立数据源，这样就可以容纳很多的数据【针对物联网业务，合理调整】\n\n🚀 去掉COLA的规则/扩展点/流程，简化项目结构\n\n🚀 修改二级缓存【Caffine+Redis】，去掉本地缓存，只保留Redis\n\n🚀 移除Sentinel，替代方案Resilience4j【Spring Cloud Gateway已完成改造】\n\n🚀 增量数据库Liquebase\n\n🚀 租户只支持精准匹配数据库表，不支持模糊匹配\n\n🚀 增加Dubbo替换掉OpenFeign【基于nacos负载均衡】\n\n🚀 Kafka使用Fory序列化与反序列化【移除原来字符串序列化】\n\n🚀 项目移除snail job模块【自己维护，自己集成】\n\n🚀 Pulsar使用Fory序列化与反序列化\n\n🚀 Dubbo使用Fury序列化与反序列化\n\n🚀 全局共用一个ForyFactory，强制注册类型\n\n🚀 Spring Cloud Gateway支持Redis分布式限流\n\n# 3.5.0更新日志【包含之前版本】\n\n# 版本\n\n🚀 升级Spring Boot版本到3.5.0\n\n🚀 升级Spring Cloud版本到2025.0.0\n\n🚀 升级Spring Cloud Alibaba版本到2023.0.3.2\n\n🚀 升级Spring Security版本到6.5.0\n\n🚀 升级Spring OAuth2 Authorization Server版本到1.5.0\n\n🚀 升级Nacos至3.0.0\n\n# 功能\n\n🚀 重构三层架构【MVC】，改造为分层架构【DDD领域驱动设计】，使用阿里COLA应用框架开发【花费时间特别长，项目的灵魂】\n\n🚀 领域对象交给Spring管理解耦业务，对象延迟加载，避免内存泄漏\n\n🚀 支持COLA的规则/扩展点/流程【已搬COLA代码到本项目】\n\n🚀 严格遵循COLA代码规范\n\n🚀 增加Pulsar（IoT的灵魂）\n\n🚀 增加多租户【IoT数据隔离，多数据源存储IoT数据，还在实现中】\n\n🚀 OAuth2支持用户名密码模式、客户端模式、授权码模式【PKCE】、刷新令牌模式、设备码模式、手机号+验证码模式、邮箱+验证码模式【遵循DDD领域驱动设计，学习DDD可以看看auth服务】\n\n🚀 支持虚拟线程，已完成虚拟线程改造\n\n🚀 新增菜单/角色/部门/用户管理，前端对接完毕，可以满足基本的开发【RABC权限模型】\n\n🚀 新增物模型/产品类别，前端对接完毕\n\n🚀 支持MQTT【服务端+客户端】/TCP【服务端】/HTTP【服务端】/WebSocket【服务端】/UDP【服务端】来实现数据采集，通过Kafka转发数据到IoT平台【本人提出IoT=采集+存储+分析】\n\n🚀 支持Modbus TCP/UDP/RTU/ASCII\n\n🚀 支持CoAP\n\n🚀 支持WebSocket【已整合，支持Nacos负载均衡】\n\n🚀 支持Spring Cloud Gateway从Nacos拉取动态路由【可自定义配置router.json】\n\n🚀 支持基于Nacos/Consul/Apollo的ShardingSphere分库分表【本人倾向于Mybatis-Plus写SQL的分库分表】\n\n🚀 支持分布式用户认证授权\n\n🚀 支持多租户【还没开发完】\n\n🚀 支持API鉴权\n\n🚀 支持接口幂等\n\n🚀 支持分布式锁\n\n🚀 支持分布式ID【zookeeper】\n\n🚀 支持国际化\n\n🚀 支持MD5/AES/RSA/Base64加密\n\n🚀 支持Elasticsearch\n\n🚀 支持FTP\n\n🚀 支持CSV\n\n🚀 支持Sentinel的网关限流和服务限流\n\n🚀 支持限流【基于Redis】\n\n🚀 支持一键格式化代码\n\n🚀 支持邮箱和手机验证码\n\n🚀 支持Knife4j【API接口文档】\n\n🚀 支持Seata和RocketMQ分布式事务\n\n🚀 支持登录/操作/通知/领域事件日志\n\n🚀 支持Redis【阻塞式和响应式】\n\n🚀 支持响应式API【reactor和vertx】\n\n🚀 支持Amazon S3对象存储\n\n🚀 支持Mybatis-Plus多数据源，支持SQL缓存\n\n🚀 支持Log4j2\n\n🚀 支持二级缓存【Caffine+Redis】，通过RocketMQ实现缓存失效\n\n🚀 支持XSS【SQL和字符串】\n\n🚀 支持JSoup爬虫\n\n🚀 支持一键改包名\n\n🚀 支持敏感词【手机号和邮箱】\n\n🚀 支持代码检查\n\n🚀 支持生成项目骨架\n\n🚀 支持Excel大数据量导入与导出\n\n🚀 支持Mybatis Plus批量插入【虚拟线程】\n\n🚀 支持代码生成器【还没写完】\n\n🚀 支持Snail Job分布式任务调度【目前没有用到，不保证稳定性】\n\n🚀 支持JSON日志还原为文本【仅错误日志】\n\n🚀 支持远程调用OpenFeign【熔断/降级】和Dubbo\n\n🚀 支持分布式链路【Micrometer】，通过Kafka转发到本项目的LogStash，由Logstash写入对应的数据源，支持Loki和（EFK+Jeager）\n\n🚀 支持RocketMQ/Kakfa/RabbitMQ/Pulsar【新增部分Go的例子】\n\n🚀 新增GRPC例子【Java+Go】",normalizedContent:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n# 3.5.4更新日志\n\n# 版本\n\n🚀 升级spring boot版本到3.5.4\n\n🚀 升级spring oauth2 authorization server版本到1.5.2\n\n🚀 升级spring cloud alibaba版本到2023.0.3.3\n\n# 功能\n\n🚀 移除优雅停机过滤器\n\n🚀 网关加密去掉，由auth服务解密【用户名密码登录】\n\n🚀 去掉@autowired注解，改为构造器注入\n\n🚀 项目禁止使用@autowired和@sneakythrows注解\n\n🚀 重构oss上传文件【本地/亚马逊s3】，独立服务，基于dubbo调用\n\n🚀 还原resilience4j为sentinel，基于docker部署，方便启动和管理\n\n🚀 snail job基于docker部署，方便启动和管理\n\n🚀 assertions替换成assertj\n\n🚀 spring官方宣布停止reactor-kafka维护，移除reactor-kafka\n\n🚀 使用dubbo triple协议，方便后面与go语言对接【grpc】，使用protobuf序列化，移除dubbo fury序列化\n\n# 3.5.1更新日志\n\n# 版本\n\n🚀 升级spring boot版本到3.5.3\n\n🚀 fory升级到0.12.0-snapshot\n\n🚀 升级spring oauth2 authorization server版本到1.5.1\n\n# 功能\n\n🚀 为了减少不必要的修改，分别将laokou_前缀改为iot和laokou_改为iot，避免自定义项目结构修改过多的代码【主要修改nacos命名空间和mq主题】\n\n🚀 redis序列化将jackson改为fory【jackson序列化已移除】\n\n🚀 构建物联网技术栈，摈弃互联网那一套技术栈，项目移除rocketmq【kafka替代rocketmq】/shardingsphere/seata/dubbo以及其他用不到的模块和依赖，简化项目结构，专注于业务，业务驱动技术！！！【主要还是我玩腻了，东西多了懒得维护，现在本项目的技术栈只为iot服务】\n\n🚀 项目强制依赖kafka，pulsar，zookeeper\n\n🚀 数据库名称去掉boot_前缀\n\n🚀 项目移除领域溯源的概念，只保留领域事件，统一由mq处理\n\n🚀 多租户架构变更，用户权限只做字段隔离，iot数据独立数据源，这样就可以容纳很多的数据【针对物联网业务，合理调整】\n\n🚀 去掉cola的规则/扩展点/流程，简化项目结构\n\n🚀 修改二级缓存【caffine+redis】，去掉本地缓存，只保留redis\n\n🚀 移除sentinel，替代方案resilience4j【spring cloud gateway已完成改造】\n\n🚀 增量数据库liquebase\n\n🚀 租户只支持精准匹配数据库表，不支持模糊匹配\n\n🚀 增加dubbo替换掉openfeign【基于nacos负载均衡】\n\n🚀 kafka使用fory序列化与反序列化【移除原来字符串序列化】\n\n🚀 项目移除snail job模块【自己维护，自己集成】\n\n🚀 pulsar使用fory序列化与反序列化\n\n🚀 dubbo使用fury序列化与反序列化\n\n🚀 全局共用一个foryfactory，强制注册类型\n\n🚀 spring cloud gateway支持redis分布式限流\n\n# 3.5.0更新日志【包含之前版本】\n\n# 版本\n\n🚀 升级spring boot版本到3.5.0\n\n🚀 升级spring cloud版本到2025.0.0\n\n🚀 升级spring cloud alibaba版本到2023.0.3.2\n\n🚀 升级spring security版本到6.5.0\n\n🚀 升级spring oauth2 authorization server版本到1.5.0\n\n🚀 升级nacos至3.0.0\n\n# 功能\n\n🚀 重构三层架构【mvc】，改造为分层架构【ddd领域驱动设计】，使用阿里cola应用框架开发【花费时间特别长，项目的灵魂】\n\n🚀 领域对象交给spring管理解耦业务，对象延迟加载，避免内存泄漏\n\n🚀 支持cola的规则/扩展点/流程【已搬cola代码到本项目】\n\n🚀 严格遵循cola代码规范\n\n🚀 增加pulsar（iot的灵魂）\n\n🚀 增加多租户【iot数据隔离，多数据源存储iot数据，还在实现中】\n\n🚀 oauth2支持用户名密码模式、客户端模式、授权码模式【pkce】、刷新令牌模式、设备码模式、手机号+验证码模式、邮箱+验证码模式【遵循ddd领域驱动设计，学习ddd可以看看auth服务】\n\n🚀 支持虚拟线程，已完成虚拟线程改造\n\n🚀 新增菜单/角色/部门/用户管理，前端对接完毕，可以满足基本的开发【rabc权限模型】\n\n🚀 新增物模型/产品类别，前端对接完毕\n\n🚀 支持mqtt【服务端+客户端】/tcp【服务端】/http【服务端】/websocket【服务端】/udp【服务端】来实现数据采集，通过kafka转发数据到iot平台【本人提出iot=采集+存储+分析】\n\n🚀 支持modbus tcp/udp/rtu/ascii\n\n🚀 支持coap\n\n🚀 支持websocket【已整合，支持nacos负载均衡】\n\n🚀 支持spring cloud gateway从nacos拉取动态路由【可自定义配置router.json】\n\n🚀 支持基于nacos/consul/apollo的shardingsphere分库分表【本人倾向于mybatis-plus写sql的分库分表】\n\n🚀 支持分布式用户认证授权\n\n🚀 支持多租户【还没开发完】\n\n🚀 支持api鉴权\n\n🚀 支持接口幂等\n\n🚀 支持分布式锁\n\n🚀 支持分布式id【zookeeper】\n\n🚀 支持国际化\n\n🚀 支持md5/aes/rsa/base64加密\n\n🚀 支持elasticsearch\n\n🚀 支持ftp\n\n🚀 支持csv\n\n🚀 支持sentinel的网关限流和服务限流\n\n🚀 支持限流【基于redis】\n\n🚀 支持一键格式化代码\n\n🚀 支持邮箱和手机验证码\n\n🚀 支持knife4j【api接口文档】\n\n🚀 支持seata和rocketmq分布式事务\n\n🚀 支持登录/操作/通知/领域事件日志\n\n🚀 支持redis【阻塞式和响应式】\n\n🚀 支持响应式api【reactor和vertx】\n\n🚀 支持amazon s3对象存储\n\n🚀 支持mybatis-plus多数据源，支持sql缓存\n\n🚀 支持log4j2\n\n🚀 支持二级缓存【caffine+redis】，通过rocketmq实现缓存失效\n\n🚀 支持xss【sql和字符串】\n\n🚀 支持jsoup爬虫\n\n🚀 支持一键改包名\n\n🚀 支持敏感词【手机号和邮箱】\n\n🚀 支持代码检查\n\n🚀 支持生成项目骨架\n\n🚀 支持excel大数据量导入与导出\n\n🚀 支持mybatis plus批量插入【虚拟线程】\n\n🚀 支持代码生成器【还没写完】\n\n🚀 支持snail job分布式任务调度【目前没有用到，不保证稳定性】\n\n🚀 支持json日志还原为文本【仅错误日志】\n\n🚀 支持远程调用openfeign【熔断/降级】和dubbo\n\n🚀 支持分布式链路【micrometer】，通过kafka转发到本项目的logstash，由logstash写入对应的数据源，支持loki和（efk+jeager）\n\n🚀 支持rocketmq/kakfa/rabbitmq/pulsar【新增部分go的例子】\n\n🚀 新增grpc例子【java+go】",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"Docker常用命令",frontmatter:{title:"Docker常用命令",date:"2024-01-12T12:27:34.000Z",permalink:"/pages/2f475f/"},regularPath:"/01.%E6%8C%87%E5%8D%97/02.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/01.Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html",relativePath:"01.指南/02.常用命令/01.Docker常用命令.md",key:"v-93428452",path:"/pages/2f475f/",headers:[{level:4,title:"Docker",slug:"docker",normalizedTitle:"docker",charIndex:36},{level:4,title:"docker-compose",slug:"docker-compose",normalizedTitle:"docker-compose",charIndex:1e3}],headersStr:"Docker docker-compose",content:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，跟我学习Docker常用命令！\n\n# Docker\n\n# 查看内核\nuname -r\n\n# 启动docker\nsystemctl start docker\n\n# 查看docker状态\nsystemctl status docker\n\n# 重启docker\nsystemctl restart docker\n\n# 查看版本\ndocker version\n\n# 查看信息\ndocker info\n\n# 获取帮助\ndocker --help\n\n# 查看镜像\ndocker images\n\n# 启动镜像\ndocker run -d -p 对外端口:容器端口 镜像名称 => docker run -d -p 6379:6379 redis\n\n# 查看日志\ndocker logs 容器id => docker logs xz2wxdf\n\n# 搜索镜像\ndocker search 镜像名称 => docker search jdk\n\n# 打包镜像\ndocker tag 镜像名称:标签 => docker tag redis:7.0.1\n\n# 删除镜像\ndocker rmi 镜像id => docker rmi dxfdxzsa\n\n# 进入容器\ndocker exec -it 容器id /bin/bash => docker exec -it xsdfds /bin/bash\n\n# 重启容器\ndocker restart 容器id => docker restart xsddf\n\n# 列出容器\ndocker ps --a\n\n# 停止容器\ndocker stop 容器id => docker stop exfds\n\n# 删除容器\ndocker rm 容器id => docker rm xsdfds\n\n# 强制停止容器\ndocker kill 容器id\n\n# 查看容器内部细节\ndocker inspect 容器id\n\n# 查看所有卷情况\ndocker volume ls\n\n# 查看某个卷\ndocker volume inspect 卷名 => docker volume inspect /data\n\n# 构建镜像\ndokcer build -t 镜像名称:标签 . => docker build -t jdk:21 .\n\n\n# docker-compose\n\n# 构建镜像\ndocker-compose build\n\n# 构建镜像（不带缓存构建）\ndocker-compose build --no-cache\n\n# 查看docker镜像\ndocker-compose images\n\n# 启动所有镜像\ndocker-compose up -d\n\n# 查看所有编排容器（包括已停止容器）\ndocker-compose ps -a\n\n# 进入指定容器\ndocker-compose exec 容器名 bash => docker-compose exec nginx bash\n\n# 停止所有启动容器\ndocker-compose stop\n\n# 停止所有启动容器并删除\ndocker-compose down\n\n# 停止某一个容器\ndocker-compose stop 容器名称 => docker-compose stop nginx\n\n# 启动某一个容器\ndocker-compose up -d 容器名称 => docker-compose up -d nginx\n\n# 重启某一个容器\ndocker-compose restart 容器名称 => docker-compose restart nginx\n\n# 删除所有容器\ndocker-compose rm\n\n# 查看容器日志\ndocker-compose logs -f 容器名称 => docker-compose logs -f nginx\n\n# 查看容器运行进程\ndocker-compose top\n",normalizedContent:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，跟我学习docker常用命令！\n\n# docker\n\n# 查看内核\nuname -r\n\n# 启动docker\nsystemctl start docker\n\n# 查看docker状态\nsystemctl status docker\n\n# 重启docker\nsystemctl restart docker\n\n# 查看版本\ndocker version\n\n# 查看信息\ndocker info\n\n# 获取帮助\ndocker --help\n\n# 查看镜像\ndocker images\n\n# 启动镜像\ndocker run -d -p 对外端口:容器端口 镜像名称 => docker run -d -p 6379:6379 redis\n\n# 查看日志\ndocker logs 容器id => docker logs xz2wxdf\n\n# 搜索镜像\ndocker search 镜像名称 => docker search jdk\n\n# 打包镜像\ndocker tag 镜像名称:标签 => docker tag redis:7.0.1\n\n# 删除镜像\ndocker rmi 镜像id => docker rmi dxfdxzsa\n\n# 进入容器\ndocker exec -it 容器id /bin/bash => docker exec -it xsdfds /bin/bash\n\n# 重启容器\ndocker restart 容器id => docker restart xsddf\n\n# 列出容器\ndocker ps --a\n\n# 停止容器\ndocker stop 容器id => docker stop exfds\n\n# 删除容器\ndocker rm 容器id => docker rm xsdfds\n\n# 强制停止容器\ndocker kill 容器id\n\n# 查看容器内部细节\ndocker inspect 容器id\n\n# 查看所有卷情况\ndocker volume ls\n\n# 查看某个卷\ndocker volume inspect 卷名 => docker volume inspect /data\n\n# 构建镜像\ndokcer build -t 镜像名称:标签 . => docker build -t jdk:21 .\n\n\n# docker-compose\n\n# 构建镜像\ndocker-compose build\n\n# 构建镜像（不带缓存构建）\ndocker-compose build --no-cache\n\n# 查看docker镜像\ndocker-compose images\n\n# 启动所有镜像\ndocker-compose up -d\n\n# 查看所有编排容器（包括已停止容器）\ndocker-compose ps -a\n\n# 进入指定容器\ndocker-compose exec 容器名 bash => docker-compose exec nginx bash\n\n# 停止所有启动容器\ndocker-compose stop\n\n# 停止所有启动容器并删除\ndocker-compose down\n\n# 停止某一个容器\ndocker-compose stop 容器名称 => docker-compose stop nginx\n\n# 启动某一个容器\ndocker-compose up -d 容器名称 => docker-compose up -d nginx\n\n# 重启某一个容器\ndocker-compose restart 容器名称 => docker-compose restart nginx\n\n# 删除所有容器\ndocker-compose rm\n\n# 查看容器日志\ndocker-compose logs -f 容器名称 => docker-compose logs -f nginx\n\n# 查看容器运行进程\ndocker-compose top\n",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"前端启动",frontmatter:{title:"前端启动",date:"2024-08-11T13:49:09.000Z",permalink:"/pages/a5d759/"},regularPath:"/01.%E6%8C%87%E5%8D%97/04.%E5%89%8D%E7%AB%AF%E6%8C%87%E5%8D%97/00.%E5%89%8D%E7%AB%AF%E5%90%AF%E5%8A%A8.html",relativePath:"01.指南/04.前端指南/00.前端启动.md",key:"v-13b5f3a2",path:"/pages/a5d759/",headers:[{level:3,title:"环境准备",slug:"环境准备",normalizedTitle:"环境准备",charIndex:43},{level:4,title:"window安装nvm【无脑安装即可】",slug:"window安装nvm【无脑安装即可】",normalizedTitle:"window安装nvm【无脑安装即可】",charIndex:129},{level:3,title:"常用命令",slug:"常用命令",normalizedTitle:"常用命令",charIndex:170},{level:3,title:"安装依赖",slug:"安装依赖",normalizedTitle:"安装依赖",charIndex:280},{level:3,title:"运行项目",slug:"运行项目",normalizedTitle:"运行项目",charIndex:324},{level:3,title:"打包项目",slug:"打包项目",normalizedTitle:"打包项目",charIndex:344},{level:3,title:"后端联调",slug:"后端联调",normalizedTitle:"后端联调",charIndex:366}],headersStr:"环境准备 window安装nvm【无脑安装即可】 常用命令 安装依赖 运行项目 打包项目 后端联调",content:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，跟我运行前端\n\n\n# 环境准备\n\n首先得有 node，并确保 node 版本是 18 或以上。（推荐用 nvm 来管理 node 版本，windows 下推荐用 nvm-windows）\n\n# window安装nvm【无脑安装即可】\n\nnvm-windows安装地址\n\n\n# 常用命令\n\n# 列表\nnvm list\n\n# 安装不同版本node.js\nnvm install 版本号\n\n# 切换不同版本node.js\nnvm use 版本号\n\n# 查看node.js版本\nnode -v\n\n\n\n# 安装依赖\n\nnpm install -g pnpm\npnpm install\n\n\n\n# 运行项目\n\npnpm dev\n\n\n\n# 打包项目\n\npnpm build\n\n\n\n# 后端联调\n\n注意：dev环境，请使用http://，请根据环境修改\n\n注意：test/prod环境，请使用https://，请根据环境修改\n\n访问【老寇IoT云平台】=> http://localhost:8000\n\n我是老寇，我们下次再见啦！",normalizedContent:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，跟我运行前端\n\n\n# 环境准备\n\n首先得有 node，并确保 node 版本是 18 或以上。（推荐用 nvm 来管理 node 版本，windows 下推荐用 nvm-windows）\n\n# window安装nvm【无脑安装即可】\n\nnvm-windows安装地址\n\n\n# 常用命令\n\n# 列表\nnvm list\n\n# 安装不同版本node.js\nnvm install 版本号\n\n# 切换不同版本node.js\nnvm use 版本号\n\n# 查看node.js版本\nnode -v\n\n\n\n# 安装依赖\n\nnpm install -g pnpm\npnpm install\n\n\n\n# 运行项目\n\npnpm dev\n\n\n\n# 打包项目\n\npnpm build\n\n\n\n# 后端联调\n\n注意：dev环境，请使用http://，请根据环境修改\n\n注意：test/prod环境，请使用https://，请根据环境修改\n\n访问【老寇iot云平台】=> http://localhost:8000\n\n我是老寇，我们下次再见啦！",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"COLA代码规范",frontmatter:{title:"COLA代码规范",date:"2024-03-21T15:25:00.000Z",permalink:"/pages/59afe2/"},regularPath:"/01.%E6%8C%87%E5%8D%97/05.%E5%90%8E%E7%AB%AF%E6%8C%87%E5%8D%97/00.COLA%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83.html",relativePath:"01.指南/05.后端指南/00.COLA代码规范.md",key:"v-f03d785e",path:"/pages/59afe2/",headers:[{level:2,title:"1.包命名",slug:"_1-包命名",normalizedTitle:"1.包命名",charIndex:652},{level:2,title:"2.类命名",slug:"_2-类命名",normalizedTitle:"2.类命名",charIndex:1743},{level:2,title:"3.方法命名",slug:"_3-方法命名",normalizedTitle:"3.方法命名",charIndex:3216},{level:3,title:"方法命名(应用层+接口层)",slug:"方法命名-应用层-接口层",normalizedTitle:"方法命名(应用层+接口层)",charIndex:3227},{level:3,title:"方法命名(领域层)",slug:"方法命名-领域层",normalizedTitle:"方法命名(领域层)",charIndex:3495},{level:3,title:"方法命名(基础设施层)",slug:"方法命名-基础设施层",normalizedTitle:"方法命名(基础设施层)",charIndex:3571},{level:3,title:"方法命名(Mapper)",slug:"方法命名-mapper",normalizedTitle:"方法命名(mapper)",charIndex:3776},{level:2,title:"4.错误码命名(显性)",slug:"_4-错误码命名-显性",normalizedTitle:"4.错误码命名(显性)",charIndex:4016}],headersStr:"1.包命名 2.类命名 3.方法命名 方法命名(应用层+接口层) 方法命名(领域层) 方法命名(基础设施层) 方法命名(Mapper) 4.错误码命名(显性)",content:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，跟我一起学习COLA，以下内容来源于书本及个人理解，请认真阅读！！！\n\n  最近看完了《代码精进之路从码农到工匠》和《程序员的底层思维》，作者张建飞老师，开篇强调写好代码并不是一件容易的事，需要持续地学习和实践。本人也赞同，因此，本人对重点内容做了笔记，希望对你有所帮助。\n\n\n# 一、命名\n\n“在计算机科学中有两件难事：缓存和命名”，因此，作为开发者，有时候为了想出一个好的名字，不惜花上几个小时，甚至绞尽脑汁。 为什么要这样做？因为一个好的命名可以方便阅读代码和梳理业务\n\n1.命名需要显性化表达开发者的意图，拒绝无意义命名\n\n变量命名需要能够准确描述业务\n\n反例\n\n// 过去的天数\nint d;\n\n// 页数\nfinal int size = 10;\n\n\n正确做法\n\n// 过去的天数\nint elapsedTimeInDays;\n\n// 页数\nfinal int PAGE_SIZE = 10;\n\n\n函数命名要具体，拒绝无意义命名 例如， processData() 就不是一个好命名，相比之下， validateUserCredentials() 或 eliminateDuplicateRequests() 好很多\n\n函数命名要体现做什么，而不是怎么做 例如，雇员信息存储在一个栈中，需要获取最近的一个雇员信息。 getLatestEmployee() 比 popRecord() 好，无需了解底层细节，业务更加具体\n\n\n# 1.包命名\n\n层次           包名            功能                          必选\nAdapter层     web           处理页面请求Controller            否\nAdapter层     wireless      处理无线端适配                     否\nAdapter层     wap           处理wap端的适配                   否\nAdapter层     consumer      处理外部message                 否\nAdapter层     scheduler     处理定时任务                      否\n                                                       \nApp层         executor      处理request，包括command和query   是\n                                                       \nDomain层      model         领域模型                        否\nDomain层      ability       领域能力，包括DomainService        否\nDomain层      gateway       领域网关，解耦利器                   是\n                                                       \nInfra层       gatewayimpl   网关实现                        是\nInfra层       mapper        ibatis数据库映射                 否\nInfra层       config        配置信息                        否\n                                                       \nClient SDK   api           服务对外透出的API                  是\nClient SDK   dto           服务对外的DTO                    是\n\n\n# 2.类命名\n\n规范                 用途                    解释\nxxxCmd             Client Request        Cmd代表Command，表示新增/修改/删除相关的请求\nxxxQry             Client Request        Qry代表Query，表示查询相关的请求\nxxxCO              Client Object         用于传递数据，等同于DTO\nxxxServiceI        Api Service           Api接口\nxxxCmdExe          Command Executor      命令模式，一个新增/修改/删除相关的请求对应一个执行器\nxxxQryExe          Query Executor        命令模式，一个查询相关的请求对应一个执行器\nxxxInterceptor     Command Interceptor   拦截器，用于处理切面逻辑\nxxxExtPt           Extension Point       扩展点\nxxxExt             Extension             扩展实现\nxxxValidator       Validator             校验器，用于校验的类\nxxxConvertor       Convertor             转换器，实现不同层级对象互转\nxxxAssembler       Assembler             组装器，组装外部服务调用参数\nxxxA               AggregateRoot         聚合根，聚合实体和值对象\nxxxE               Entity                领域实体\nxxxV               Value Object          值对象\nxxxMapper          Mapper                数据库映射\nxxxDomainService   Domain Service        领域服务\nxxxDO              Data Object           数据对象，持久化\nxxxGateway         Gateway               领域网关，防腐层\nxxxConstants       Constant              常量\nxxxConfig          Configuration         配置\nxxxUtils           Utility               工具\nxxxEvent           Event                 事件\nxxxEventHandler    Event Handler         处理事件\nxxxFactory         Domain Factory        领域工厂\nxxxController      Controller            处理页面请求\nxxxEnum            Enum                  枚举\nxxxFilter          Filter                过滤器\n\n\n# 3.方法命名\n\n\n# 方法命名(应用层+接口层)\n\n操作   方法名约定    举例\n新增   save     saveUser\n删除   remove   removeUser\n修改   modify   modifyUser\n查看   get      getUserById\n列表   list     listUser listTreeMenu\n分页   page     pageUser\n统计   count    countUser\n导入   import   importUser\n导出   export   exportUser\n\n\n# 方法命名(领域层)\n\n操作   方法名约定   举例\n添加   add     addEvent\n\n尽量避免CRUD形式的命名，要体现业务语义\n\n\n# 方法命名(基础设施层)\n\n操作   方法名约定    举例\n新增   create   createUser\n删除   delete   deleteUser\n修改   update   updateUser\n查看   get      getUserById\n列表   list     listUser\n分页   page     pageUser\n统计   count    countUser\n\n\n# 方法命名(Mapper)\n\n操作   方法名约定    举例\n新增   insert   insertUser\n删除   delete   deleteUser\n修改   update   updateUser\n查看   select   selectUserById selectUserId\n列表   list     selectUserList\n分页   page     selectUserPage\n统计   count    selectUserCount\n\n\n# 4.错误码命名(显性)\n\n类型     错误码约定     举例\n参数异常   P_XX_XX   P_OAuth2_UsernameIsNull：账号不能为空\n系统异常   S_XX_XX   S_DS_TableNotExist：表不存在\n业务异常   B_XX_XX   B_User_UsernameAlreadyExist：用户名已存在",normalizedContent:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，跟我一起学习cola，以下内容来源于书本及个人理解，请认真阅读！！！\n\n  最近看完了《代码精进之路从码农到工匠》和《程序员的底层思维》，作者张建飞老师，开篇强调写好代码并不是一件容易的事，需要持续地学习和实践。本人也赞同，因此，本人对重点内容做了笔记，希望对你有所帮助。\n\n\n# 一、命名\n\n“在计算机科学中有两件难事：缓存和命名”，因此，作为开发者，有时候为了想出一个好的名字，不惜花上几个小时，甚至绞尽脑汁。 为什么要这样做？因为一个好的命名可以方便阅读代码和梳理业务\n\n1.命名需要显性化表达开发者的意图，拒绝无意义命名\n\n变量命名需要能够准确描述业务\n\n反例\n\n// 过去的天数\nint d;\n\n// 页数\nfinal int size = 10;\n\n\n正确做法\n\n// 过去的天数\nint elapsedtimeindays;\n\n// 页数\nfinal int page_size = 10;\n\n\n函数命名要具体，拒绝无意义命名 例如， processdata() 就不是一个好命名，相比之下， validateusercredentials() 或 eliminateduplicaterequests() 好很多\n\n函数命名要体现做什么，而不是怎么做 例如，雇员信息存储在一个栈中，需要获取最近的一个雇员信息。 getlatestemployee() 比 poprecord() 好，无需了解底层细节，业务更加具体\n\n\n# 1.包命名\n\n层次           包名            功能                          必选\nadapter层     web           处理页面请求controller            否\nadapter层     wireless      处理无线端适配                     否\nadapter层     wap           处理wap端的适配                   否\nadapter层     consumer      处理外部message                 否\nadapter层     scheduler     处理定时任务                      否\n                                                       \napp层         executor      处理request，包括command和query   是\n                                                       \ndomain层      model         领域模型                        否\ndomain层      ability       领域能力，包括domainservice        否\ndomain层      gateway       领域网关，解耦利器                   是\n                                                       \ninfra层       gatewayimpl   网关实现                        是\ninfra层       mapper        ibatis数据库映射                 否\ninfra层       config        配置信息                        否\n                                                       \nclient sdk   api           服务对外透出的api                  是\nclient sdk   dto           服务对外的dto                    是\n\n\n# 2.类命名\n\n规范                 用途                    解释\nxxxcmd             client request        cmd代表command，表示新增/修改/删除相关的请求\nxxxqry             client request        qry代表query，表示查询相关的请求\nxxxco              client object         用于传递数据，等同于dto\nxxxservicei        api service           api接口\nxxxcmdexe          command executor      命令模式，一个新增/修改/删除相关的请求对应一个执行器\nxxxqryexe          query executor        命令模式，一个查询相关的请求对应一个执行器\nxxxinterceptor     command interceptor   拦截器，用于处理切面逻辑\nxxxextpt           extension point       扩展点\nxxxext             extension             扩展实现\nxxxvalidator       validator             校验器，用于校验的类\nxxxconvertor       convertor             转换器，实现不同层级对象互转\nxxxassembler       assembler             组装器，组装外部服务调用参数\nxxxa               aggregateroot         聚合根，聚合实体和值对象\nxxxe               entity                领域实体\nxxxv               value object          值对象\nxxxmapper          mapper                数据库映射\nxxxdomainservice   domain service        领域服务\nxxxdo              data object           数据对象，持久化\nxxxgateway         gateway               领域网关，防腐层\nxxxconstants       constant              常量\nxxxconfig          configuration         配置\nxxxutils           utility               工具\nxxxevent           event                 事件\nxxxeventhandler    event handler         处理事件\nxxxfactory         domain factory        领域工厂\nxxxcontroller      controller            处理页面请求\nxxxenum            enum                  枚举\nxxxfilter          filter                过滤器\n\n\n# 3.方法命名\n\n\n# 方法命名(应用层+接口层)\n\n操作   方法名约定    举例\n新增   save     saveuser\n删除   remove   removeuser\n修改   modify   modifyuser\n查看   get      getuserbyid\n列表   list     listuser listtreemenu\n分页   page     pageuser\n统计   count    countuser\n导入   import   importuser\n导出   export   exportuser\n\n\n# 方法命名(领域层)\n\n操作   方法名约定   举例\n添加   add     addevent\n\n尽量避免crud形式的命名，要体现业务语义\n\n\n# 方法命名(基础设施层)\n\n操作   方法名约定    举例\n新增   create   createuser\n删除   delete   deleteuser\n修改   update   updateuser\n查看   get      getuserbyid\n列表   list     listuser\n分页   page     pageuser\n统计   count    countuser\n\n\n# 方法命名(mapper)\n\n操作   方法名约定    举例\n新增   insert   insertuser\n删除   delete   deleteuser\n修改   update   updateuser\n查看   select   selectuserbyid selectuserid\n列表   list     selectuserlist\n分页   page     selectuserpage\n统计   count    selectusercount\n\n\n# 4.错误码命名(显性)\n\n类型     错误码约定     举例\n参数异常   p_xx_xx   p_oauth2_usernameisnull：账号不能为空\n系统异常   s_xx_xx   s_ds_tablenotexist：表不存在\n业务异常   b_xx_xx   b_user_usernamealreadyexist：用户名已存在",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"SSL证书",frontmatter:{title:"SSL证书",date:"2023-09-26T01:20:19.000Z",permalink:"/pages/10bfa8/"},regularPath:"/01.%E6%8C%87%E5%8D%97/05.%E5%90%8E%E7%AB%AF%E6%8C%87%E5%8D%97/01.SSL%E8%AF%81%E4%B9%A6.html",relativePath:"01.指南/05.后端指南/01.SSL证书.md",key:"v-7bde6c00",path:"/pages/10bfa8/",headers:[{level:2,title:"什么是SSL？",slug:"什么是ssl",normalizedTitle:"什么是ssl？",charIndex:43},{level:2,title:"什么是TLS？",slug:"什么是tls",normalizedTitle:"什么是tls？",charIndex:169},{level:2,title:"为什么企业和web应用程序应该使用TLS协议？",slug:"为什么企业和web应用程序应该使用tls协议",normalizedTitle:"为什么企业和web应用程序应该使用tls协议？",charIndex:278},{level:2,title:"SSL/TLS如何工作？",slug:"ssl-tls如何工作",normalizedTitle:"ssl/tls如何工作？",charIndex:484},{level:2,title:"什么是HTTP？什么是HTTPS？",slug:"什么是http-什么是https",normalizedTitle:"什么是http？什么是https？",charIndex:666},{level:2,title:"为什么HTTPS安全？",slug:"为什么https安全",normalizedTitle:"为什么https安全？",charIndex:952},{level:2,title:"keytool命令详解",slug:"keytool命令详解",normalizedTitle:"keytool命令详解",charIndex:1042},{level:2,title:"SSL证书在微服务的应用",slug:"ssl证书在微服务的应用",normalizedTitle:"ssl证书在微服务的应用",charIndex:1620},{level:3,title:"如何配置在yaml？",slug:"如何配置在yaml",normalizedTitle:"如何配置在yaml？",charIndex:1637},{level:3,title:"服务间开启ssl，openfeign如何调用接口？",slug:"服务间开启ssl-openfeign如何调用接口",normalizedTitle:"服务间开启ssl，openfeign如何调用接口？",charIndex:1902},{level:4,title:"查看 FeignAutoConfiguration 源码",slug:"查看-feignautoconfiguration-源码",normalizedTitle:"查看 feignautoconfiguration 源码",charIndex:1931},{level:3,title:"httpclient5访问https网站，绕过ssl单向认证",slug:"httpclient5访问https网站-绕过ssl单向认证",normalizedTitle:"httpclient5访问https网站，绕过ssl单向认证",charIndex:2154},{level:3,title:"nacos开启ssl，各个服务无法注册（使用cer）",slug:"nacos开启ssl-各个服务无法注册-使用cer",normalizedTitle:"nacos开启ssl，各个服务无法注册（使用cer）",charIndex:3931},{level:4,title:"配置cer",slug:"配置cer",normalizedTitle:"配置cer",charIndex:3983},{level:4,title:"yaml配置",slug:"yaml配置",normalizedTitle:"yaml配置",charIndex:4275},{level:3,title:"spring-boot-admin开启ssl，各个服务无法注册",slug:"spring-boot-admin开启ssl-各个服务无法注册",normalizedTitle:"spring-boot-admin开启ssl，各个服务无法注册",charIndex:4911},{level:4,title:"查看 SpringBootAdminClientAutoConfiguration 源码",slug:"查看-springbootadminclientautoconfiguration-源码",normalizedTitle:"查看 springbootadminclientautoconfiguration 源码",charIndex:4946},{level:4,title:"重写自动装配代码",slug:"重写自动装配代码",normalizedTitle:"重写自动装配代码",charIndex:5006},{level:4,title:"自动装配",slug:"自动装配",normalizedTitle:"自动装配",charIndex:5008},{level:4,title:"移除自动装配",slug:"移除自动装配",normalizedTitle:"移除自动装配",charIndex:7541},{level:3,title:"gateway对下游服务不信任",slug:"gateway对下游服务不信任",normalizedTitle:"gateway对下游服务不信任",charIndex:7637},{level:3,title:"如何开启http2？",slug:"如何开启http2",normalizedTitle:"如何开启http2？",charIndex:7777},{level:4,title:"什么是http2？",slug:"什么是http2",normalizedTitle:"什么是http2？",charIndex:7791},{level:4,title:"http2开启条件",slug:"http2开启条件",normalizedTitle:"http2开启条件",charIndex:7871},{level:4,title:"yaml配置",slug:"yaml配置-2",normalizedTitle:"yaml配置",charIndex:4275},{level:2,title:"浏览器安装证书，信任自签名的HTTPS",slug:"浏览器安装证书-信任自签名的https",normalizedTitle:"浏览器安装证书，信任自签名的https",charIndex:7996},{level:3,title:"创建证书(带域名)",slug:"创建证书-带域名",normalizedTitle:"创建证书(带域名)",charIndex:8020},{level:3,title:"导出证书",slug:"导出证书",normalizedTitle:"导出证书",charIndex:1360},{level:3,title:"导入浏览器",slug:"导入浏览器",normalizedTitle:"导入浏览器",charIndex:8794},{level:2,title:"服务端和客户端证书",slug:"服务端和客户端证书",normalizedTitle:"服务端和客户端证书",charIndex:8846},{level:2,title:"参考资料",slug:"参考资料",normalizedTitle:"参考资料",charIndex:9991}],headersStr:"什么是SSL？ 什么是TLS？ 为什么企业和web应用程序应该使用TLS协议？ SSL/TLS如何工作？ 什么是HTTP？什么是HTTPS？ 为什么HTTPS安全？ keytool命令详解 SSL证书在微服务的应用 如何配置在yaml？ 服务间开启ssl，openfeign如何调用接口？ 查看 FeignAutoConfiguration 源码 httpclient5访问https网站，绕过ssl单向认证 nacos开启ssl，各个服务无法注册（使用cer） 配置cer yaml配置 spring-boot-admin开启ssl，各个服务无法注册 查看 SpringBootAdminClientAutoConfiguration 源码 重写自动装配代码 自动装配 移除自动装配 gateway对下游服务不信任 如何开启http2？ 什么是http2？ http2开启条件 yaml配置 浏览器安装证书，信任自签名的HTTPS 创建证书(带域名) 导出证书 导入浏览器 服务端和客户端证书 参考资料",content:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n几天不见啦，我又来啦！\n\n\n# 什么是SSL？\n\nSSL全称为 Security Socket Layer（安全套接字层），它是一种加密安全协议。 它的诞生就是 为了确保 Internet通信中的隐私、身份验证和数据完整性。 SSL是TLS加密的前身。（现在使用的是TLS）\n\n\n# 什么是TLS？\n\nTLS全称为 Transport Layer Security（安全传输层），它也是一种加密安全协议， 可以为互联网通信提供私密性和数据完整性。实施TLS是构建安全web应用的一个标准实践。\n\n\n# 为什么企业和web应用程序应该使用TLS协议？\n\nTLS加密可以帮助web应用程序免受数据泄露和其他攻击，如今，受TLS保护的HTTPS是网站的标准做法。 （知识点补充：2018年发布的TLS1.3进一步提高了TLS的速度。TLS1.3中的TLS握手仅一次往返<即来回通信> 而不是以前的两次，将握手过程所需时间缩短了几毫秒。如果用户以前已连接过网站，TLS握手往返次数为0， 从而进一步加快了速度。）\n\n\n# SSL/TLS如何工作？\n\n * 为了提高高度隐私，SSL会对通过Web传输的数据进行加密，这意味着，任何试图截取此数据的人都只会看到几乎无法解密的乱码字符。\n * SSL在两个通道设备之间启动称为握手的身份验证过程，以确保两个设备确实是它们所声称的真实身份。\n * SSL还对数据进行数字签名，以提供数据完整性，验证数据是否到达目标接收者之前被篡改过。\n\n\n# 什么是HTTP？什么是HTTPS？\n\n * HTTP全称为 HyperText Transfer Protocol（超文本传输协议），它是一种用于网络传输数据的协议。（HTTP消息分为两种：请求和响应）（在OSI模型中，HTTP是第七层协议）\n\n * HTTPS全称为 HyperText Transfer Protocol Secure（超文本传输安全协议），支持加密和验证的HTTP，对比HTTP，HTTPS使用TLS来加密，对请求和响应进行数字签名，提供对网站服务器的身份认证，保护交换数据的隐私和完整性。（通俗来说，HTTPS = HTTP + SSL）\n\n\n# 为什么HTTPS安全？\n\nHTTP协议传输文本，是以明文形式发送的，监视连接的任何人都能读取它，因此，HTTP不安全，回到HTTPS，无法看到其真实内容，只有一堆随机字符\n\n\n# keytool命令详解\n\n1.生成pfx证书（.p12是pfx的新格式）\n\nkeytool -genkey\n       -alias laokou-nacos # 证书别名,不区分大小写\n       -storetype PKCS12 # 密钥库类型，常用类型有JKS、PKCS12\n       -keyalg RSA # 密钥算法，可选密钥算法：RSA\\DSA，默认DSA\n       -keysize 2048 # 密钥长度（RSA=2048,DSA=2048）\n       -keystore scg-keystore.p12  # 密钥库文件名称\n       -validity 3650 # 证书有效天数\n\n\n2.导出证书为cer（cer/crt是证书的公钥格式，cer是crt证书的微软形式）\n\nkeytool -exportcert -v\n        -alias laokou-nacos # 证书别名,不区分大小写\n        -keystore scg-keystore.p12  # 密钥库文件名称\n        -storepass laokou # 密钥库口令，推荐与keypass一致（获取keystore信息所需要密码）\n        -file register.cer # 导出的文件名\n\n\n\n# SSL证书在微服务的应用\n\n\n# 如何配置在yaml？\n\nserver:\n\tssl:\n\t\t# 开启证书,true开启ssl  false关闭ssl\n\t\tenabled: true\n\t\t# 证书位置(放在resource即可)（证书就是我上面写的命令来生成的）\n\t\tkey-store: classpath:scg-keystore.p12\n\t\t# 证书别名\n\t\tkey-alias: laokou-nacos\n\t\t# 秘钥类型\n\t\tkey-store-type: PKCS12\n\t\t# 证书密码\n\t\tkey-store-password: laokou\n\n\n\n# 服务间开启ssl，openfeign如何调用接口？\n\n# 查看 FeignAutoConfiguration 源码\n\n话不多说，给我怼源码（作者使用的okhttp，httpclient类似）\n\nspirng:\n\tcloud:\n\t\topenfeign:\n\t\t\tokhttp:\n\t\t\t\tenabled: true\n\t\t\thttpclient:\n\t\t\t\t# 把disableSslValidationi设为true，就可以绕过ssl\n\t\t\t\tdisable-ssl-validation: true\n\n\n\n# httpclient5访问https网站，绕过ssl单向认证\n\n把 FeignAutoConfiguration 代码搬过来（嘿嘿，效率为王）\n\npublic class HttpUtil {\n\tpublic static void main(String[] args) {\n\t\t// 创建HttpClient对象\n\t\tHttpClientBuilder httpClientBuilder = HttpClientBuilder.create();\n\t\tboolean disableSsl = true;\n\t\tif (disableSsl) {\n\t\t\tdisableSsl(httpClientBuilder);\n\t\t}\n\t}\n\n\tpublic static void disableSsl(HttpClientBuilder builder) {\n\t\t// X.509是密码学里公钥证书的格式标准，作为证书标准\n\t\tX509TrustManager disabledTrustManager = new DisableValidationTrustManager();\n\t\t// 信任库\n\t\tTrustManager[] trustManagers = new TrustManager[]{disabledTrustManager};\n\t\t// 怎么选择加密协议，请看 ProtocolVersion\n\t\t// 为什么能找到对应的加密协议 请查看 SSLContextSpi\n\t\tSSLContext sslContext = SSLContext.getInstance(TLS_PROTOCOL_VERSION);\n\t\tsslContext.init(null, trustManagers, new SecureRandom());\n\t\tSSLConnectionSocketFactory sslConnectionSocketFactory = SSLConnectionSocketFactoryBuilder.create()\n\t\t\t.setSslContext(sslContext).setHostnameVerifier(new TrustAllHostnames()).build();\n\t\tPoolingHttpClientConnectionManager poolingHttpClientConnectionManager = PoolingHttpClientConnectionManagerBuilder\n\t\t\t.create().setSSLSocketFactory(sslConnectionSocketFactory).build();\n\t\tbuilder.setConnectionManager(poolingHttpClientConnectionManager);\n\t}\n\n\tstatic class DisableValidationTrustManager implements X509TrustManager {\n\t\tDisableValidationTrustManager() {\n\t\t}\n\n\t\tpublic void checkClientTrusted(X509Certificate[] x509Certificates, String s) {\n\t\t}\n\n\t\tpublic void checkServerTrusted(X509Certificate[] x509Certificates, String s) {\n\t\t}\n\n\t\tpublic X509Certificate[] getAcceptedIssuers() {\n\t\t\treturn new X509Certificate[0];\n\t\t}\n\t}\n\n\tstatic class TrustAllHostnames implements HostnameVerifier {\n\t\tTrustAllHostnames() {\n\t\t}\n\n\t\tpublic boolean verify(String s, SSLSession sslSession) {\n\t\t\treturn true;\n\t\t}\n\t}\n}\n\n\n\n# nacos开启ssl，各个服务无法注册（使用cer）\n\n查看issue nacos支持https\n\n# 配置cer\n\n\t\t// https://github.com/alibaba/nacos/pull/3654\n\t\t// 请查看 HttpLoginProcessor\n\t\tSystem.setProperty(TlsSystemConfig.TLS_ENABLE, TRUE);\n\t\tSystem.setProperty(TlsSystemConfig.CLIENT_AUTH, TRUE);\n\t\t# 确保文件位置填写正确\n\t\tSystem.setProperty(TlsSystemConfig.CLIENT_TRUST_CERT, "tls/register.cer");\n\n\n# yaml配置\n\n# nacos使用https和http协议，只要注册临时服务，都是走RPC,因此使用https需要改为https\nspring:\n\tcloud:\n\t\tnacos:\n\t\t\tdiscovery:\n\t\t\t\tserver-addr: https://127.0.0.1:8848\n\t\t\t\tnamespace: public\n\t\t\t\tusername: nacos\n\t\t\t\tpassword: nacos\n\t\t\t\tgroup: IOT_GROUP\n\t\t\t\t# https\n\t\t\t\tsecure: true\n\t\t\t\t# true 临时 false 持久\n\t\t\t\tephemeral: true\n\t\t\tconfig:\n\t\t\t\tserver-addr: https://127.0.0.1:8848\n\t\t\t\tnamespace: public\n\t\t\t\tusername: nacos\n\t\t\t\tpassword: nacos\n\t\t\t\t# https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/spring-cloud-alibaba-docs/src/main/asciidoc-zh/nacos-config.adoc\n\t\t\t\t# 指定读取的文件格式\n\t\t\t\tfile-extension: yaml\n\t\t\t\tgroup: IOT_GROUP\n\t\t\t\trefresh-enabled: true\n\n\n\n# spring-boot-admin开启ssl，各个服务无法注册\n\n# 查看 SpringBootAdminClientAutoConfiguration 源码\n\n话不多说，给我怼源码\n\n# 重写自动装配代码\n\n\n@ComponentScan(value = "org.laokou.common.monitor")\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnWebApplication\n@AutoConfiguration\n@Conditional(SpringBootAdminClientEnabledCondition.class)\n@AutoConfigureAfter({WebEndpointAutoConfiguration.class, RestTemplateAutoConfiguration.class,\n\tWebClientAutoConfiguration.class})\n@EnableConfigurationProperties({ClientProperties.class, InstanceProperties.class, ServerProperties.class,\n\tManagementServerProperties.class})\npublic class SpringBootAdminClientAutoConfig {\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnBean(RestTemplateBuilder.class)\n\tpublic static class BlockingRegistrationClientConfig {\n\n\t\t/**\n\t\t * 阻塞\n\t\t */\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic RegistrationClient registrationClient(ClientProperties client) {\n\t\t\tRestTemplateBuilder builder = new RestTemplateBuilder().setConnectTimeout(client.getConnectTimeout());\n\t\t\tbuilder.setReadTimeout(client.getReadTimeout());\n\t\t\tif (client.getUsername() != null && client.getPassword() != null) {\n\t\t\t\tbuilder = builder.basicAuthentication(client.getUsername(), client.getPassword());\n\t\t\t}\n\t\t\tRestTemplate build = builder.build();\n\t\t\tHttpClientBuilder httpClientBuilder = HttpClientBuilder.create();\n\t\t\t// 直接使用我上面写的\n\t\t\tHttpUtil.disableSsl(httpClientBuilder);\n\t\t\tCloseableHttpClient closeableHttpClient = httpClientBuilder.build();\n\t\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(\n\t\t\t\tcloseableHttpClient);\n\t\t\tbuild.setRequestFactory(requestFactory);\n\t\t\treturn new BlockingRegistrationClient(build);\n\t\t}\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnBean(WebClient.Builder.class)\n\t@ConditionalOnMissingBean(RestTemplateBuilder.class)\n\tpublic static class ReactiveRegistrationClientConfig {\n\t\t/**\n\t\t * 响应式\n\t\t */\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic RegistrationClient registrationClient(ClientProperties client, WebClient.Builder webClient)\n\t\t\tthrows SSLException {\n\t\t\tif (client.getUsername() != null && client.getPassword() != null) {\n\t\t\t\twebClient = webClient.filter(basicAuthentication(client.getUsername(), client.getPassword()));\n\t\t\t}\n\t\t\tSslContext context = SslContextBuilder.forClient().trustManager(InsecureTrustManagerFactory.INSTANCE)\n\t\t\t\t.build();\n\t\t\tHttpClient httpClient = HttpClient.create().secure(t -> t.sslContext(context));\n\t\t\twebClient.clientConnector(new ReactorClientHttpConnector(httpClient));\n\t\t\treturn new ReactiveRegistrationClient(webClient.build(), client.getReadTimeout());\n\t\t}\n\t}\n}\n\n\n# 自动装配\n\n# 移除自动装配\n\n@SpringBootApplication(exclude = { SpringBootAdminClientAutoConfiguration.class })\n\n\n\n# gateway对下游服务不信任\n\n查看spring官方文档 Gateway TLS 和 SSL\n\nspring:\n\tcloud:\n\t\tgateway:\n\t\t\thttpclient:\n\t\t\t\tssl:\n\t\t\t\t\tuseInsecureTrustManager: true\n\n\n\n# 如何开启http2？\n\n# 什么是http2？\n\nHTTP/2是一种网络协议，是HTTP/1.1的升级版，为了提高web性能，减少延迟，增加安全性，使web应用更加快速，高效和可靠\n\n# http2开启条件\n\n开启条件，就是必须使用ssl证书才行，因此有上面的铺垫，我们可以很轻松的开启\n\n# yaml配置\n\nserver:\n\thttp2:\n\t\tenabled: true\n\n\n补充一句，目前只限于tomcat和undertow\n\n\n# 浏览器安装证书，信任自签名的HTTPS\n\n\n# 创建证书(带域名)\n\nkeytool -genkey\n          -alias laokou-cert # 证书别名,不区分大小写\n          -storetype PKCS12 # 密钥库类型，可用类型：JKS,PKCS12\n          -keyalg RSA # 密钥的算法，如RSA,DSA,默认DSA\n          -keysize 2048 # 密钥长度（RSA=2048,DSA=2048）\n          -keystore scg-keystore.p12 密钥库文件名称\n          -validity 3650 # 有效期天数\n          -dname "CN=127.0.0.1,OU=laokouyun,O=laokouyun,L=Shenzhen,ST=Guangzhou,C=CN" # 发行者信息（CN必填）\n          -storepass laokou # 密钥库口令\n          -keypass laokou # 私钥密码\n# 解释：-dname 构成\n# CN = 域名或IP，必填，CN要和服务器的域名或IP保持一致\n# OU = 组织单位名称\n# O = 组织名称\n# L = 城市或区域名称\n# ST = 州或省份名称\n# C = 国家简写（CN代表中国）\n\n\n\n# 导出证书\n\nkeytool -exportcert -v\n        -alias laokou-cert # 证书别名，不区分大小写\n        -keystore scg-keystore.p12 # 密钥库文件名称\n        -storepass laokou # 密钥库口令\n        -file cert.cer # 证书名称\n\n\n\n# 导入浏览器\n\n 1. 打开浏览器，找到证书管理（略）\n 2. 然后点下一步，直到完成导入（略）\n\n\n# 服务端和客户端证书\n\n => laokou123【密码】\n => zh【国家】\n => laokouyun【地区、组织、名称】\n => 2413176044@qq.com【邮箱】\n\n---开始---nacos-ca---开始---\n\n注意：Country Name,State or Province Name,Organization Name\n\n生成CA私钥：openssl genrsa -out nacos-ca-key.pem -aes128 2048\n\n生成CA证书：openssl req -new -x509 -key nacos-ca-key.pem -out nacos-ca-cert.pem -days 3650\n\n---结束---nacos-ca---结束---\n\n\n---开始---nacos-server-cert---开始---\n\n生成私钥：openssl genrsa -out nacos-server-key.pem -aes128 2048\n\n生成签名：openssl req -new -key nacos-server-key.pem -out nacos-server-csr.pem\n\n生成证书：openssl ca -in nacos-server-csr.pem -cert nacos-ca-cert.pem -keyfile nacos-ca-key.pem -out nacos-server-cert.pem -days 3650\n\n报错修改：根据报错提醒创建/CA/newcerts并授权，创建index.txt和serial并写入01\n\n---结束---nacos-server-cert---结束---\n\n\n---开始---nacos-client-cert---开始---\n\n生成私钥：openssl genrsa -out nacos-client-key.pem -aes128 2048\n\n生成签名：openssl req -new -key nacos-client-key.pem -out nacos-client-csr.pem\n\n生成证书：openssl ca -in nacos-client-csr.pem -cert nacos-ca-cert.pem -keyfile nacos-ca-key.pem -out nacos-client-cert.pem -days 3650\n\n报错修改：根据报错提醒创建/CA/newcerts并授权，创建index.txt和serial并写入01\n\n---结束---nacos-client-cert---结束---\n\n\n我是老寇，我们下次再见啦！\n\n\n# 参考资料\n\nSSL和TLS\n\nkeytool文档\n\nKeytool 工具的介绍与使用',normalizedContent:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n几天不见啦，我又来啦！\n\n\n# 什么是ssl？\n\nssl全称为 security socket layer（安全套接字层），它是一种加密安全协议。 它的诞生就是 为了确保 internet通信中的隐私、身份验证和数据完整性。 ssl是tls加密的前身。（现在使用的是tls）\n\n\n# 什么是tls？\n\ntls全称为 transport layer security（安全传输层），它也是一种加密安全协议， 可以为互联网通信提供私密性和数据完整性。实施tls是构建安全web应用的一个标准实践。\n\n\n# 为什么企业和web应用程序应该使用tls协议？\n\ntls加密可以帮助web应用程序免受数据泄露和其他攻击，如今，受tls保护的https是网站的标准做法。 （知识点补充：2018年发布的tls1.3进一步提高了tls的速度。tls1.3中的tls握手仅一次往返<即来回通信> 而不是以前的两次，将握手过程所需时间缩短了几毫秒。如果用户以前已连接过网站，tls握手往返次数为0， 从而进一步加快了速度。）\n\n\n# ssl/tls如何工作？\n\n * 为了提高高度隐私，ssl会对通过web传输的数据进行加密，这意味着，任何试图截取此数据的人都只会看到几乎无法解密的乱码字符。\n * ssl在两个通道设备之间启动称为握手的身份验证过程，以确保两个设备确实是它们所声称的真实身份。\n * ssl还对数据进行数字签名，以提供数据完整性，验证数据是否到达目标接收者之前被篡改过。\n\n\n# 什么是http？什么是https？\n\n * http全称为 hypertext transfer protocol（超文本传输协议），它是一种用于网络传输数据的协议。（http消息分为两种：请求和响应）（在osi模型中，http是第七层协议）\n\n * https全称为 hypertext transfer protocol secure（超文本传输安全协议），支持加密和验证的http，对比http，https使用tls来加密，对请求和响应进行数字签名，提供对网站服务器的身份认证，保护交换数据的隐私和完整性。（通俗来说，https = http + ssl）\n\n\n# 为什么https安全？\n\nhttp协议传输文本，是以明文形式发送的，监视连接的任何人都能读取它，因此，http不安全，回到https，无法看到其真实内容，只有一堆随机字符\n\n\n# keytool命令详解\n\n1.生成pfx证书（.p12是pfx的新格式）\n\nkeytool -genkey\n       -alias laokou-nacos # 证书别名,不区分大小写\n       -storetype pkcs12 # 密钥库类型，常用类型有jks、pkcs12\n       -keyalg rsa # 密钥算法，可选密钥算法：rsa\\dsa，默认dsa\n       -keysize 2048 # 密钥长度（rsa=2048,dsa=2048）\n       -keystore scg-keystore.p12  # 密钥库文件名称\n       -validity 3650 # 证书有效天数\n\n\n2.导出证书为cer（cer/crt是证书的公钥格式，cer是crt证书的微软形式）\n\nkeytool -exportcert -v\n        -alias laokou-nacos # 证书别名,不区分大小写\n        -keystore scg-keystore.p12  # 密钥库文件名称\n        -storepass laokou # 密钥库口令，推荐与keypass一致（获取keystore信息所需要密码）\n        -file register.cer # 导出的文件名\n\n\n\n# ssl证书在微服务的应用\n\n\n# 如何配置在yaml？\n\nserver:\n\tssl:\n\t\t# 开启证书,true开启ssl  false关闭ssl\n\t\tenabled: true\n\t\t# 证书位置(放在resource即可)（证书就是我上面写的命令来生成的）\n\t\tkey-store: classpath:scg-keystore.p12\n\t\t# 证书别名\n\t\tkey-alias: laokou-nacos\n\t\t# 秘钥类型\n\t\tkey-store-type: pkcs12\n\t\t# 证书密码\n\t\tkey-store-password: laokou\n\n\n\n# 服务间开启ssl，openfeign如何调用接口？\n\n# 查看 feignautoconfiguration 源码\n\n话不多说，给我怼源码（作者使用的okhttp，httpclient类似）\n\nspirng:\n\tcloud:\n\t\topenfeign:\n\t\t\tokhttp:\n\t\t\t\tenabled: true\n\t\t\thttpclient:\n\t\t\t\t# 把disablesslvalidationi设为true，就可以绕过ssl\n\t\t\t\tdisable-ssl-validation: true\n\n\n\n# httpclient5访问https网站，绕过ssl单向认证\n\n把 feignautoconfiguration 代码搬过来（嘿嘿，效率为王）\n\npublic class httputil {\n\tpublic static void main(string[] args) {\n\t\t// 创建httpclient对象\n\t\thttpclientbuilder httpclientbuilder = httpclientbuilder.create();\n\t\tboolean disablessl = true;\n\t\tif (disablessl) {\n\t\t\tdisablessl(httpclientbuilder);\n\t\t}\n\t}\n\n\tpublic static void disablessl(httpclientbuilder builder) {\n\t\t// x.509是密码学里公钥证书的格式标准，作为证书标准\n\t\tx509trustmanager disabledtrustmanager = new disablevalidationtrustmanager();\n\t\t// 信任库\n\t\ttrustmanager[] trustmanagers = new trustmanager[]{disabledtrustmanager};\n\t\t// 怎么选择加密协议，请看 protocolversion\n\t\t// 为什么能找到对应的加密协议 请查看 sslcontextspi\n\t\tsslcontext sslcontext = sslcontext.getinstance(tls_protocol_version);\n\t\tsslcontext.init(null, trustmanagers, new securerandom());\n\t\tsslconnectionsocketfactory sslconnectionsocketfactory = sslconnectionsocketfactorybuilder.create()\n\t\t\t.setsslcontext(sslcontext).sethostnameverifier(new trustallhostnames()).build();\n\t\tpoolinghttpclientconnectionmanager poolinghttpclientconnectionmanager = poolinghttpclientconnectionmanagerbuilder\n\t\t\t.create().setsslsocketfactory(sslconnectionsocketfactory).build();\n\t\tbuilder.setconnectionmanager(poolinghttpclientconnectionmanager);\n\t}\n\n\tstatic class disablevalidationtrustmanager implements x509trustmanager {\n\t\tdisablevalidationtrustmanager() {\n\t\t}\n\n\t\tpublic void checkclienttrusted(x509certificate[] x509certificates, string s) {\n\t\t}\n\n\t\tpublic void checkservertrusted(x509certificate[] x509certificates, string s) {\n\t\t}\n\n\t\tpublic x509certificate[] getacceptedissuers() {\n\t\t\treturn new x509certificate[0];\n\t\t}\n\t}\n\n\tstatic class trustallhostnames implements hostnameverifier {\n\t\ttrustallhostnames() {\n\t\t}\n\n\t\tpublic boolean verify(string s, sslsession sslsession) {\n\t\t\treturn true;\n\t\t}\n\t}\n}\n\n\n\n# nacos开启ssl，各个服务无法注册（使用cer）\n\n查看issue nacos支持https\n\n# 配置cer\n\n\t\t// https://github.com/alibaba/nacos/pull/3654\n\t\t// 请查看 httploginprocessor\n\t\tsystem.setproperty(tlssystemconfig.tls_enable, true);\n\t\tsystem.setproperty(tlssystemconfig.client_auth, true);\n\t\t# 确保文件位置填写正确\n\t\tsystem.setproperty(tlssystemconfig.client_trust_cert, "tls/register.cer");\n\n\n# yaml配置\n\n# nacos使用https和http协议，只要注册临时服务，都是走rpc,因此使用https需要改为https\nspring:\n\tcloud:\n\t\tnacos:\n\t\t\tdiscovery:\n\t\t\t\tserver-addr: https://127.0.0.1:8848\n\t\t\t\tnamespace: public\n\t\t\t\tusername: nacos\n\t\t\t\tpassword: nacos\n\t\t\t\tgroup: iot_group\n\t\t\t\t# https\n\t\t\t\tsecure: true\n\t\t\t\t# true 临时 false 持久\n\t\t\t\tephemeral: true\n\t\t\tconfig:\n\t\t\t\tserver-addr: https://127.0.0.1:8848\n\t\t\t\tnamespace: public\n\t\t\t\tusername: nacos\n\t\t\t\tpassword: nacos\n\t\t\t\t# https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/spring-cloud-alibaba-docs/src/main/asciidoc-zh/nacos-config.adoc\n\t\t\t\t# 指定读取的文件格式\n\t\t\t\tfile-extension: yaml\n\t\t\t\tgroup: iot_group\n\t\t\t\trefresh-enabled: true\n\n\n\n# spring-boot-admin开启ssl，各个服务无法注册\n\n# 查看 springbootadminclientautoconfiguration 源码\n\n话不多说，给我怼源码\n\n# 重写自动装配代码\n\n\n@componentscan(value = "org.laokou.common.monitor")\n@configuration(proxybeanmethods = false)\n@conditionalonwebapplication\n@autoconfiguration\n@conditional(springbootadminclientenabledcondition.class)\n@autoconfigureafter({webendpointautoconfiguration.class, resttemplateautoconfiguration.class,\n\twebclientautoconfiguration.class})\n@enableconfigurationproperties({clientproperties.class, instanceproperties.class, serverproperties.class,\n\tmanagementserverproperties.class})\npublic class springbootadminclientautoconfig {\n\t@configuration(proxybeanmethods = false)\n\t@conditionalonbean(resttemplatebuilder.class)\n\tpublic static class blockingregistrationclientconfig {\n\n\t\t/**\n\t\t * 阻塞\n\t\t */\n\t\t@bean\n\t\t@conditionalonmissingbean\n\t\tpublic registrationclient registrationclient(clientproperties client) {\n\t\t\tresttemplatebuilder builder = new resttemplatebuilder().setconnecttimeout(client.getconnecttimeout());\n\t\t\tbuilder.setreadtimeout(client.getreadtimeout());\n\t\t\tif (client.getusername() != null && client.getpassword() != null) {\n\t\t\t\tbuilder = builder.basicauthentication(client.getusername(), client.getpassword());\n\t\t\t}\n\t\t\tresttemplate build = builder.build();\n\t\t\thttpclientbuilder httpclientbuilder = httpclientbuilder.create();\n\t\t\t// 直接使用我上面写的\n\t\t\thttputil.disablessl(httpclientbuilder);\n\t\t\tcloseablehttpclient closeablehttpclient = httpclientbuilder.build();\n\t\t\thttpcomponentsclienthttprequestfactory requestfactory = new httpcomponentsclienthttprequestfactory(\n\t\t\t\tcloseablehttpclient);\n\t\t\tbuild.setrequestfactory(requestfactory);\n\t\t\treturn new blockingregistrationclient(build);\n\t\t}\n\t}\n\n\t@configuration(proxybeanmethods = false)\n\t@conditionalonbean(webclient.builder.class)\n\t@conditionalonmissingbean(resttemplatebuilder.class)\n\tpublic static class reactiveregistrationclientconfig {\n\t\t/**\n\t\t * 响应式\n\t\t */\n\t\t@bean\n\t\t@conditionalonmissingbean\n\t\tpublic registrationclient registrationclient(clientproperties client, webclient.builder webclient)\n\t\t\tthrows sslexception {\n\t\t\tif (client.getusername() != null && client.getpassword() != null) {\n\t\t\t\twebclient = webclient.filter(basicauthentication(client.getusername(), client.getpassword()));\n\t\t\t}\n\t\t\tsslcontext context = sslcontextbuilder.forclient().trustmanager(insecuretrustmanagerfactory.instance)\n\t\t\t\t.build();\n\t\t\thttpclient httpclient = httpclient.create().secure(t -> t.sslcontext(context));\n\t\t\twebclient.clientconnector(new reactorclienthttpconnector(httpclient));\n\t\t\treturn new reactiveregistrationclient(webclient.build(), client.getreadtimeout());\n\t\t}\n\t}\n}\n\n\n# 自动装配\n\n# 移除自动装配\n\n@springbootapplication(exclude = { springbootadminclientautoconfiguration.class })\n\n\n\n# gateway对下游服务不信任\n\n查看spring官方文档 gateway tls 和 ssl\n\nspring:\n\tcloud:\n\t\tgateway:\n\t\t\thttpclient:\n\t\t\t\tssl:\n\t\t\t\t\tuseinsecuretrustmanager: true\n\n\n\n# 如何开启http2？\n\n# 什么是http2？\n\nhttp/2是一种网络协议，是http/1.1的升级版，为了提高web性能，减少延迟，增加安全性，使web应用更加快速，高效和可靠\n\n# http2开启条件\n\n开启条件，就是必须使用ssl证书才行，因此有上面的铺垫，我们可以很轻松的开启\n\n# yaml配置\n\nserver:\n\thttp2:\n\t\tenabled: true\n\n\n补充一句，目前只限于tomcat和undertow\n\n\n# 浏览器安装证书，信任自签名的https\n\n\n# 创建证书(带域名)\n\nkeytool -genkey\n          -alias laokou-cert # 证书别名,不区分大小写\n          -storetype pkcs12 # 密钥库类型，可用类型：jks,pkcs12\n          -keyalg rsa # 密钥的算法，如rsa,dsa,默认dsa\n          -keysize 2048 # 密钥长度（rsa=2048,dsa=2048）\n          -keystore scg-keystore.p12 密钥库文件名称\n          -validity 3650 # 有效期天数\n          -dname "cn=127.0.0.1,ou=laokouyun,o=laokouyun,l=shenzhen,st=guangzhou,c=cn" # 发行者信息（cn必填）\n          -storepass laokou # 密钥库口令\n          -keypass laokou # 私钥密码\n# 解释：-dname 构成\n# cn = 域名或ip，必填，cn要和服务器的域名或ip保持一致\n# ou = 组织单位名称\n# o = 组织名称\n# l = 城市或区域名称\n# st = 州或省份名称\n# c = 国家简写（cn代表中国）\n\n\n\n# 导出证书\n\nkeytool -exportcert -v\n        -alias laokou-cert # 证书别名，不区分大小写\n        -keystore scg-keystore.p12 # 密钥库文件名称\n        -storepass laokou # 密钥库口令\n        -file cert.cer # 证书名称\n\n\n\n# 导入浏览器\n\n 1. 打开浏览器，找到证书管理（略）\n 2. 然后点下一步，直到完成导入（略）\n\n\n# 服务端和客户端证书\n\n => laokou123【密码】\n => zh【国家】\n => laokouyun【地区、组织、名称】\n => 2413176044@qq.com【邮箱】\n\n---开始---nacos-ca---开始---\n\n注意：country name,state or province name,organization name\n\n生成ca私钥：openssl genrsa -out nacos-ca-key.pem -aes128 2048\n\n生成ca证书：openssl req -new -x509 -key nacos-ca-key.pem -out nacos-ca-cert.pem -days 3650\n\n---结束---nacos-ca---结束---\n\n\n---开始---nacos-server-cert---开始---\n\n生成私钥：openssl genrsa -out nacos-server-key.pem -aes128 2048\n\n生成签名：openssl req -new -key nacos-server-key.pem -out nacos-server-csr.pem\n\n生成证书：openssl ca -in nacos-server-csr.pem -cert nacos-ca-cert.pem -keyfile nacos-ca-key.pem -out nacos-server-cert.pem -days 3650\n\n报错修改：根据报错提醒创建/ca/newcerts并授权，创建index.txt和serial并写入01\n\n---结束---nacos-server-cert---结束---\n\n\n---开始---nacos-client-cert---开始---\n\n生成私钥：openssl genrsa -out nacos-client-key.pem -aes128 2048\n\n生成签名：openssl req -new -key nacos-client-key.pem -out nacos-client-csr.pem\n\n生成证书：openssl ca -in nacos-client-csr.pem -cert nacos-ca-cert.pem -keyfile nacos-ca-key.pem -out nacos-client-cert.pem -days 3650\n\n报错修改：根据报错提醒创建/ca/newcerts并授权，创建index.txt和serial并写入01\n\n---结束---nacos-client-cert---结束---\n\n\n我是老寇，我们下次再见啦！\n\n\n# 参考资料\n\nssl和tls\n\nkeytool文档\n\nkeytool 工具的介绍与使用',charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"一键修改项目模块",frontmatter:{title:"一键修改项目模块",date:"2024-08-11T13:00:00.000Z",permalink:"/pages/10bfa9/"},regularPath:"/01.%E6%8C%87%E5%8D%97/05.%E5%90%8E%E7%AB%AF%E6%8C%87%E5%8D%97/02.%E4%B8%80%E9%94%AE%E4%BF%AE%E6%94%B9%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97.html",relativePath:"01.指南/05.后端指南/02.一键修改项目模块.md",key:"v-3ab055e8",path:"/pages/10bfa9/",headers:[{level:3,title:"修改项目信息",slug:"修改项目信息",normalizedTitle:"修改项目信息",charIndex:49},{level:3,title:"检查项目",slug:"检查项目",normalizedTitle:"检查项目",charIndex:593}],headersStr:"修改项目信息 检查项目",content:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，讲一讲一键修改项目模块！\n\n\n# 修改项目信息\n\n    // 新模块名称\nprivate static final String NEW_MODULE_NAME = "newlaokou";\n\n// 新分组ID\nprivate static final String NEW_GROUP_ID = "cn.org.laokou";\n\n// 新包名路径[Linux]\nprivate static final String NEW_PACKAGE_PATH_LINUX = "/cn/org/laokou/";\n\n// 新包名路径[Window]\nprivate static final String NEW_PACKAGE_PATH_WINDOW = "\\\\\\\\cn\\\\\\\\org\\\\\\\\laokou\\\\\\\\";\n\n// 新包名名称\nprivate static final String NEW_PACKAGE_NAME = "cn.org.laokou";\n\n// 新项目名称\nprivate static final String NEW_PROJECT_NAME = "New-KCloud-Platform-IoT";\n\n\n根据自己的系统修改，window使用反斜杠\'\\\'，linux使用斜杠\'/\'\n\n\n# 检查项目\n\n找到项目，用idea开发，打包试一试\n\nmvn clean install -P test\n\n\n没毛病~\n\n我是老寇，我们下次再见啦！',normalizedContent:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，讲一讲一键修改项目模块！\n\n\n# 修改项目信息\n\n    // 新模块名称\nprivate static final string new_module_name = "newlaokou";\n\n// 新分组id\nprivate static final string new_group_id = "cn.org.laokou";\n\n// 新包名路径[linux]\nprivate static final string new_package_path_linux = "/cn/org/laokou/";\n\n// 新包名路径[window]\nprivate static final string new_package_path_window = "\\\\\\\\cn\\\\\\\\org\\\\\\\\laokou\\\\\\\\";\n\n// 新包名名称\nprivate static final string new_package_name = "cn.org.laokou";\n\n// 新项目名称\nprivate static final string new_project_name = "new-kcloud-platform-iot";\n\n\n根据自己的系统修改，window使用反斜杠\'\\\'，linux使用斜杠\'/\'\n\n\n# 检查项目\n\n找到项目，用idea开发，打包试一试\n\nmvn clean install -p test\n\n\n没毛病~\n\n我是老寇，我们下次再见啦！',charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"一键生成项目骨架",frontmatter:{title:"一键生成项目骨架",date:"2024-08-11T12:59:14.000Z",permalink:"/pages/1e1e32/"},regularPath:"/01.%E6%8C%87%E5%8D%97/05.%E5%90%8E%E7%AB%AF%E6%8C%87%E5%8D%97/03.%E4%B8%80%E9%94%AE%E7%94%9F%E6%88%90%E9%A1%B9%E7%9B%AE%E9%AA%A8%E6%9E%B6.html",relativePath:"01.指南/05.后端指南/03.一键生成项目骨架.md",key:"v-133e2ccb",path:"/pages/1e1e32/",headersStr:null,content:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，讲一讲一键生成项目骨架！\n\n# 进入laokou-cola目录下\ncd laokou-cola\n# 执行\nmvn clean archetype:create-from-project -e\n\n# 不要管报错，请继续执行\ncd target/generated-sources/archetype/\n# 执行成功，项目骨架会安装本地repository\nmvn clean install\n\n\n# 使用【需要新建一个文件夹】\nmvn archetype:generate -DarchetypeCatalog=local\n\n\n注意：支持自定义，根据自己需要，在项目骨架增减文件\n\n我是老寇，我们下次再见啦！",normalizedContent:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，讲一讲一键生成项目骨架！\n\n# 进入laokou-cola目录下\ncd laokou-cola\n# 执行\nmvn clean archetype:create-from-project -e\n\n# 不要管报错，请继续执行\ncd target/generated-sources/archetype/\n# 执行成功，项目骨架会安装本地repository\nmvn clean install\n\n\n# 使用【需要新建一个文件夹】\nmvn archetype:generate -darchetypecatalog=local\n\n\n注意：支持自定义，根据自己需要，在项目骨架增减文件\n\n我是老寇，我们下次再见啦！",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"一键修改项目版本号",frontmatter:{title:"一键修改项目版本号",date:"2024-08-18T12:55:17.000Z",permalink:"/pages/77f103/"},regularPath:"/01.%E6%8C%87%E5%8D%97/05.%E5%90%8E%E7%AB%AF%E6%8C%87%E5%8D%97/04.%E4%B8%80%E9%94%AE%E4%BF%AE%E6%94%B9%E9%A1%B9%E7%9B%AE%E7%89%88%E6%9C%AC%E5%8F%B7.html",relativePath:"01.指南/05.后端指南/04.一键修改项目版本号.md",key:"v-2cab7970",path:"/pages/77f103/",headers:[{level:3,title:"安装插件",slug:"安装插件",normalizedTitle:"安装插件",charIndex:50},{level:3,title:"使用插件",slug:"使用插件",normalizedTitle:"使用插件",charIndex:394}],headersStr:"安装插件 使用插件",content:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，讲一讲一键修改项目版本号！\n\n\n# 安装插件\n\n      \x3c!--先set后commit【先运行插件，再修改版本】--\x3e\n<plugin>\n\t<groupId>org.codehaus.mojo</groupId>\n\t<artifactId>versions-maven-plugin</artifactId>\n\t<version>2.17.1</version>\n\t<configuration>\n\t\t\x3c!--备份版本--\x3e\n\t\t<generateBackupPoms>true</generateBackupPoms>\n\t\t<newVersion>3.3.5</newVersion>\n\t\t<oldVersion>3.3.4</oldVersion>\n\t</configuration>\n</plugin>\n\n\n\n# 使用插件\n\n# 使用\nmvn versions:set -P test\n# 提交\nmvn versions:commit -P test\n# 回滚\nmvn versions:revert -P test\n\n\n我是老寇，我们下次再见啦！",normalizedContent:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，讲一讲一键修改项目版本号！\n\n\n# 安装插件\n\n      \x3c!--先set后commit【先运行插件，再修改版本】--\x3e\n<plugin>\n\t<groupid>org.codehaus.mojo</groupid>\n\t<artifactid>versions-maven-plugin</artifactid>\n\t<version>2.17.1</version>\n\t<configuration>\n\t\t\x3c!--备份版本--\x3e\n\t\t<generatebackuppoms>true</generatebackuppoms>\n\t\t<newversion>3.3.5</newversion>\n\t\t<oldversion>3.3.4</oldversion>\n\t</configuration>\n</plugin>\n\n\n\n# 使用插件\n\n# 使用\nmvn versions:set -p test\n# 提交\nmvn versions:commit -p test\n# 回滚\nmvn versions:revert -p test\n\n\n我是老寇，我们下次再见啦！",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"一键跳过测试用例",frontmatter:{title:"一键跳过测试用例",date:"2024-08-19T10:57:44.000Z",permalink:"/pages/843853/"},regularPath:"/01.%E6%8C%87%E5%8D%97/05.%E5%90%8E%E7%AB%AF%E6%8C%87%E5%8D%97/05.%E4%B8%80%E9%94%AE%E8%B7%B3%E8%BF%87%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B.html",relativePath:"01.指南/05.后端指南/05.一键跳过测试用例.md",key:"v-32104ab3",path:"/pages/843853/",headers:[{level:3,title:"安装插件",slug:"安装插件",normalizedTitle:"安装插件",charIndex:49},{level:3,title:"扩展阅读",slug:"扩展阅读",normalizedTitle:"扩展阅读",charIndex:455}],headersStr:"安装插件 扩展阅读",content:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，讲一讲一键跳过测试用例！\n\n\n# 安装插件\n\n\n<plugin>\n\t<groupId>org.apache.maven.plugins</groupId>\n\t<artifactId>maven-surefire-plugin</artifactId>\n\t<version>${maven-surefire-plugin.version}</version>\n\t<configuration>\n\t\t\x3c!--跳过测试用例--\x3e\n\t\t<skip>true</skip>\n\t\t<argLine>\n\t\t\t--add-opens java.base/java.util=ALL-UNNAMED\n\t\t\t--add-opens java.base/java.lang=ALL-UNNAMED\n\t\t</argLine>\n\t</configuration>\n</plugin>\n\n\n提醒：没有该插件之前，需要在IDEA里面勾选跳过测试用例，集成之后无需勾选\n\n\n# 扩展阅读\n\n你们可能有一点疑问，为啥使用JDK17 需要加类似--add-opens java.base/java.util=ALL-UNNAMED绕过模块系统的访问控制。 这是因为JDK9 引入模块系统【Project Jigsaw】，某些内部API被封装在模块中【模块代码】，默认情况下对外部代码【非模块代码】不可见。\n\n通过增加JVM参数，使高版本JDK能够兼容旧代码【旧代码可能依赖Java内部API，这些内部API在JDK9之后被封装起来，使用JVM参数可以临时解决问题，允许代码继续访问这些API】\n\n--add-opens #  JVM 参数\njava.base/java.util # 开放模块和包\nALL-UNNAMED # 开放所有未命名模块【未命名模块通常是指传统的非模块代码，使用旧的类路径机制加载的类】\n\n\n我是老寇，我们下次再见啦！",normalizedContent:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，讲一讲一键跳过测试用例！\n\n\n# 安装插件\n\n\n<plugin>\n\t<groupid>org.apache.maven.plugins</groupid>\n\t<artifactid>maven-surefire-plugin</artifactid>\n\t<version>${maven-surefire-plugin.version}</version>\n\t<configuration>\n\t\t\x3c!--跳过测试用例--\x3e\n\t\t<skip>true</skip>\n\t\t<argline>\n\t\t\t--add-opens java.base/java.util=all-unnamed\n\t\t\t--add-opens java.base/java.lang=all-unnamed\n\t\t</argline>\n\t</configuration>\n</plugin>\n\n\n提醒：没有该插件之前，需要在idea里面勾选跳过测试用例，集成之后无需勾选\n\n\n# 扩展阅读\n\n你们可能有一点疑问，为啥使用jdk17 需要加类似--add-opens java.base/java.util=all-unnamed绕过模块系统的访问控制。 这是因为jdk9 引入模块系统【project jigsaw】，某些内部api被封装在模块中【模块代码】，默认情况下对外部代码【非模块代码】不可见。\n\n通过增加jvm参数，使高版本jdk能够兼容旧代码【旧代码可能依赖java内部api，这些内部api在jdk9之后被封装起来，使用jvm参数可以临时解决问题，允许代码继续访问这些api】\n\n--add-opens #  jvm 参数\njava.base/java.util # 开放模块和包\nall-unnamed # 开放所有未命名模块【未命名模块通常是指传统的非模块代码，使用旧的类路径机制加载的类】\n\n\n我是老寇，我们下次再见啦！",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"一键生成后端COLA代码",frontmatter:{title:"一键生成后端COLA代码",date:"2024-08-31T21:04:49.000Z",permalink:"/pages/889fdb/"},regularPath:"/01.%E6%8C%87%E5%8D%97/05.%E5%90%8E%E7%AB%AF%E6%8C%87%E5%8D%97/06.%E4%B8%80%E9%94%AE%E7%94%9F%E6%88%90%E5%90%8E%E7%AB%AFCOLA%E4%BB%A3%E7%A0%81.html",relativePath:"01.指南/05.后端指南/06.一键生成后端COLA代码.md",key:"v-8b2e8a08",path:"/pages/889fdb/",headers:[{level:3,title:"设计理论",slug:"设计理论",normalizedTitle:"设计理论",charIndex:181},{level:3,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:232},{level:4,title:"配置数据源",slug:"配置数据源",normalizedTitle:"配置数据源",charIndex:279},{level:4,title:"配置路径",slug:"配置路径",normalizedTitle:"配置路径",charIndex:610},{level:4,title:"配置包名",slug:"配置包名",normalizedTitle:"配置包名",charIndex:647}],headersStr:"设计理论 使用 配置数据源 配置路径 配置包名",content:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，讲一讲一键生成后端COLA代码！\n\n大家有没有在写COLA时，为新建几个模块而头疼？实不相瞒，我经常手动新建模块，效率低且容易出错。 这不，花了一两周多的时间，设计了一个COLA代码生成器，不说很智能，但至少可以减少不必要的操作，并且不易出错。\n\n虽然花了很长的时间，但这一切都是值得的~\n\n\n# 设计理论\n\n根据COLA相关理论，提前设计好代码结构，然后通过20多种模板生成4层结构的代码\n\n\n# 使用\n\n注意：这个代码生成器分为前端和后端代码，然而，前端模板还没有写，目前只支持后端\n\n# 配置数据源\n\nspring:\n\tdatasource:\n\t\tdynamic:\n\t\t\tdatasource:\n\t\t\t\tmaster:\n\t\t\t\t\tdriver-class-name: org.postgresql.Driver\n\t\t\t\t\turl: jdbc:postgresql://postgresql:5432/kcloud_platform?tcpKeepAlive=true&reWriteBatchedInserts=true&stringtype=unspecified&ApplicationName=laokou-nacos&useSSL=false\n\t\t\t\t\tusername: root\n\t\t\t\t\tpassword: laokou123\n\n\n# 配置路径\n\n注意：支持zip压缩，目前注释啦~，可根据需要自行放开\n\n# 配置包名\n\n注意：如果是新项目推荐Maven原型+代码生成器，否则只需要使用代码生成器\n\n我是老寇，我们下次再见啦！",normalizedContent:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，讲一讲一键生成后端cola代码！\n\n大家有没有在写cola时，为新建几个模块而头疼？实不相瞒，我经常手动新建模块，效率低且容易出错。 这不，花了一两周多的时间，设计了一个cola代码生成器，不说很智能，但至少可以减少不必要的操作，并且不易出错。\n\n虽然花了很长的时间，但这一切都是值得的~\n\n\n# 设计理论\n\n根据cola相关理论，提前设计好代码结构，然后通过20多种模板生成4层结构的代码\n\n\n# 使用\n\n注意：这个代码生成器分为前端和后端代码，然而，前端模板还没有写，目前只支持后端\n\n# 配置数据源\n\nspring:\n\tdatasource:\n\t\tdynamic:\n\t\t\tdatasource:\n\t\t\t\tmaster:\n\t\t\t\t\tdriver-class-name: org.postgresql.driver\n\t\t\t\t\turl: jdbc:postgresql://postgresql:5432/kcloud_platform?tcpkeepalive=true&rewritebatchedinserts=true&stringtype=unspecified&applicationname=laokou-nacos&usessl=false\n\t\t\t\t\tusername: root\n\t\t\t\t\tpassword: laokou123\n\n\n# 配置路径\n\n注意：支持zip压缩，目前注释啦~，可根据需要自行放开\n\n# 配置包名\n\n注意：如果是新项目推荐maven原型+代码生成器，否则只需要使用代码生成器\n\n我是老寇，我们下次再见啦！",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"一键检查代码规范",frontmatter:{title:"一键检查代码规范",date:"2024-09-02T09:00:45.000Z",permalink:"/pages/cf6984/"},regularPath:"/01.%E6%8C%87%E5%8D%97/05.%E5%90%8E%E7%AB%AF%E6%8C%87%E5%8D%97/08.%E4%B8%80%E9%94%AE%E6%A3%80%E6%9F%A5%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83.html",relativePath:"01.指南/05.后端指南/08.一键检查代码规范.md",key:"v-61d09452",path:"/pages/cf6984/",headers:[{level:3,title:"引入插件",slug:"引入插件",normalizedTitle:"引入插件",charIndex:49},{level:3,title:"checkstyle使用",slug:"checkstyle使用",normalizedTitle:"checkstyle使用",charIndex:1078},{level:3,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:1088}],headersStr:"引入插件 checkstyle使用 使用",content:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，讲一讲一键检查代码规范！\n\n\n# 引入插件\n\n\n<plugins>\n\t<plugin>\n\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t<artifactId>maven-checkstyle-plugin</artifactId>\n\t\t<version>3.5.0</version>\n\t\t<configuration>\n\t\t\t\x3c!-- 配置文件路径 --\x3e\n\t\t\t<configLocation>checkstyle/checkstyle.xml</configLocation>\n\t\t\t\x3c!-- true表示在命令行或控制台输出检查结果，否则结果不会直接在控制台显示 --\x3e\n\t\t\t<consoleOutput>true</consoleOutput>\n\t\t\t\x3c!-- true表示检查到错误，则整个构建过程失败 --\x3e\n\t\t\t<failsOnError>true</failsOnError>\n\t\t\t\x3c!-- 是否直接构造失败，true只要任何一个代码规范不通过，从而直接构建失败，false代码检查不通过，不会导致构建失败，但会报告违规情况 --\x3e\n\t\t\t<failOnViolation>true</failOnViolation>\n\t\t\t\x3c!-- 是否包含测试代码目录，true包含，false不包含，只检查主目录代码 --\x3e\n\t\t\t<includeTestSourceDirectory>true</includeTestSourceDirectory>\n\t\t\t\x3c!-- 是否跳过代码规范检查，true跳过，false不跳过 --\x3e\n\t\t\t<skip>false</skip>\n\t\t\t\x3c!-- checkstyle报告是否包含代码引用链接，false不包含，true包含 --\x3e\n\t\t\t<linkXRef>false</linkXRef>\n\t\t</configuration>\n\t\t<executions>\n\t\t\t\x3c!-- 执行mvn install启动代码规范扫描 --\x3e\n\t\t\t<execution>\n\t\t\t\t<id>install</id>\n\t\t\t\t<phase>install</phase>\n\t\t\t\t<goals>\n\t\t\t\t\t<goal>checkstyle</goal>\n\t\t\t\t</goals>\n\t\t\t</execution>\n\t\t</executions>\n\t</plugin>\n</plugins>\n\n\n\n# checkstyle使用\n\ncheckstyle官方地址\n\n创建checkstyle.xml\n\n注意：目前，就做了协议头、未使用的依赖和匹配句子末尾的格式校验，都有注释，请自行阅读，而且链接也放在上面，自行对照即可\n\n<?xml version="1.0"?>\n<!DOCTYPE module PUBLIC\n\t"-//Puppy Crawl//DTD Check Configuration 1.3//EN"\n\t"https://www.puppycrawl.com/dtds/configuration_1_3.dtd">\n<module name="Checker">\n\n\t\x3c!-- https://checkstyle.sourceforge.io/property_types.html --\x3e\n\n\t\x3c!-- 字符集 --\x3e\n\t<property name="charset" value="UTF-8"/>\n\n\t\x3c!-- 检查级别 --\x3e\n\t<property name="severity" value="error"/>\n\n\t\x3c!-- 抑制过滤器 https://checkstyle.sourceforge.io/filters/suppressionfilter.html#SuppressionFilter --\x3e\n\t<module name="SuppressionFilter">\n\t\t<property name="file" value="checkstyle/checkstyle-suppressions.xml"/>\n\t\t<property name="optional" value="false"/>\n\t</module>\n\n\t\x3c!-- 检查协议头 https://checkstyle.sourceforge.io/checks/header/regexpheader.html --\x3e\n\t<module name="RegexpHeader">\n\t\t<property name="headerFile" value="checkstyle/checkstyle-header.txt"/>\n\t\t<property name="fileExtensions" value="java"/>\n\t</module>\n\n\t<module name="TreeWalker">\n\n\t\t\x3c!-- 匹配句子末尾的格式 https://checkstyle.sourceforge.io/checks/javadoc/javadocstyle.html#JavadocStyle --\x3e\n\t\t<module name="JavadocStyleCheck">\n\t\t\t<property name="endOfSentenceFormat" value="([.?!。？！][ \\t\\n\\r\\f&lt;])|([.?!。？！]$)"/>\n\t\t</module>\n\n\t\t\x3c!-- 排除导入的未使用的依赖 https://checkstyle.sourceforge.io/checks/imports/unusedimports.html --\x3e\n\t\t<module name="UnusedImports">\n\t\t\t\x3c!-- true忽略文档依赖，false不忽略文档依赖 --\x3e\n\t\t\t<property name="processJavadoc" value="true"/>\n\t\t</module>\n\n\t</module>\n\n</module>\n\n\n\n注意：协议头验证，需要创建checkstyle-header.txt\n\n^\\Q/*\\E$\n^\\Q * Copyright (c) \\E20\\d\\d\\-20\\d\\d\\Q KCloud-Platform-IoT Author or Authors. All Rights Reserved.\\E$\n^\\Q *\\E$\n^\\Q * Licensed under the Apache License, Version 2.0 (the "License");\\E$\n^\\Q * you may not use this file except in compliance with the License.\\E$\n^\\Q * You may obtain a copy of the License at\\E$\n^\\Q *\\E$\n^\\Q *   http://www.apache.org/licenses/LICENSE-2.0\\E$\n^\\Q *\\E$\n^\\Q * Unless required by applicable law or agreed to in writing, software\\E$\n^\\Q * distributed under the License is distributed on an "AS IS" BASIS,\\E$\n^\\Q * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\E$\n^\\Q * See the License for the specific language governing permissions and\\E$\n^\\Q * limitations under the License.\\E$\n^\\Q *\\E$\n^\\Q */\\E$\n^$\n^.*$\n\n\n注意：checkstyle-suppressions.xml可以用来排除不扫描的文件，比如排除mapstruct生成的代码\n\n<!DOCTYPE suppressions PUBLIC\n\t"-//Checkstyle//DTD SuppressionFilter Configuration 1.2//EN"\n\t"https://checkstyle.org/dtds/suppressions_1_2.dtd">\n<suppressions>\n\t\x3c!-- https://checkstyle.sourceforge.io/filters/suppressionfilter.html --\x3e\n\t<suppress files="[\\\\/]org[\\\\/]laokou[\\\\/]admin[\\\\/]convertor[\\\\/].*ConvertorImpl.java" checks=".*"/>\n\t<suppress files="[\\\\/]org[\\\\/]laokou[\\\\/]auth[\\\\/]convertor[\\\\/].*ConvertorImpl.java" checks=".*"/>\n</suppressions>\n\n\n\n# 使用\n\nmvn clean install -P test\n\n\n我是老寇，我们下次再见啦！',normalizedContent:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，讲一讲一键检查代码规范！\n\n\n# 引入插件\n\n\n<plugins>\n\t<plugin>\n\t\t<groupid>org.apache.maven.plugins</groupid>\n\t\t<artifactid>maven-checkstyle-plugin</artifactid>\n\t\t<version>3.5.0</version>\n\t\t<configuration>\n\t\t\t\x3c!-- 配置文件路径 --\x3e\n\t\t\t<configlocation>checkstyle/checkstyle.xml</configlocation>\n\t\t\t\x3c!-- true表示在命令行或控制台输出检查结果，否则结果不会直接在控制台显示 --\x3e\n\t\t\t<consoleoutput>true</consoleoutput>\n\t\t\t\x3c!-- true表示检查到错误，则整个构建过程失败 --\x3e\n\t\t\t<failsonerror>true</failsonerror>\n\t\t\t\x3c!-- 是否直接构造失败，true只要任何一个代码规范不通过，从而直接构建失败，false代码检查不通过，不会导致构建失败，但会报告违规情况 --\x3e\n\t\t\t<failonviolation>true</failonviolation>\n\t\t\t\x3c!-- 是否包含测试代码目录，true包含，false不包含，只检查主目录代码 --\x3e\n\t\t\t<includetestsourcedirectory>true</includetestsourcedirectory>\n\t\t\t\x3c!-- 是否跳过代码规范检查，true跳过，false不跳过 --\x3e\n\t\t\t<skip>false</skip>\n\t\t\t\x3c!-- checkstyle报告是否包含代码引用链接，false不包含，true包含 --\x3e\n\t\t\t<linkxref>false</linkxref>\n\t\t</configuration>\n\t\t<executions>\n\t\t\t\x3c!-- 执行mvn install启动代码规范扫描 --\x3e\n\t\t\t<execution>\n\t\t\t\t<id>install</id>\n\t\t\t\t<phase>install</phase>\n\t\t\t\t<goals>\n\t\t\t\t\t<goal>checkstyle</goal>\n\t\t\t\t</goals>\n\t\t\t</execution>\n\t\t</executions>\n\t</plugin>\n</plugins>\n\n\n\n# checkstyle使用\n\ncheckstyle官方地址\n\n创建checkstyle.xml\n\n注意：目前，就做了协议头、未使用的依赖和匹配句子末尾的格式校验，都有注释，请自行阅读，而且链接也放在上面，自行对照即可\n\n<?xml version="1.0"?>\n<!doctype module public\n\t"-//puppy crawl//dtd check configuration 1.3//en"\n\t"https://www.puppycrawl.com/dtds/configuration_1_3.dtd">\n<module name="checker">\n\n\t\x3c!-- https://checkstyle.sourceforge.io/property_types.html --\x3e\n\n\t\x3c!-- 字符集 --\x3e\n\t<property name="charset" value="utf-8"/>\n\n\t\x3c!-- 检查级别 --\x3e\n\t<property name="severity" value="error"/>\n\n\t\x3c!-- 抑制过滤器 https://checkstyle.sourceforge.io/filters/suppressionfilter.html#suppressionfilter --\x3e\n\t<module name="suppressionfilter">\n\t\t<property name="file" value="checkstyle/checkstyle-suppressions.xml"/>\n\t\t<property name="optional" value="false"/>\n\t</module>\n\n\t\x3c!-- 检查协议头 https://checkstyle.sourceforge.io/checks/header/regexpheader.html --\x3e\n\t<module name="regexpheader">\n\t\t<property name="headerfile" value="checkstyle/checkstyle-header.txt"/>\n\t\t<property name="fileextensions" value="java"/>\n\t</module>\n\n\t<module name="treewalker">\n\n\t\t\x3c!-- 匹配句子末尾的格式 https://checkstyle.sourceforge.io/checks/javadoc/javadocstyle.html#javadocstyle --\x3e\n\t\t<module name="javadocstylecheck">\n\t\t\t<property name="endofsentenceformat" value="([.?!。？！][ \\t\\n\\r\\f&lt;])|([.?!。？！]$)"/>\n\t\t</module>\n\n\t\t\x3c!-- 排除导入的未使用的依赖 https://checkstyle.sourceforge.io/checks/imports/unusedimports.html --\x3e\n\t\t<module name="unusedimports">\n\t\t\t\x3c!-- true忽略文档依赖，false不忽略文档依赖 --\x3e\n\t\t\t<property name="processjavadoc" value="true"/>\n\t\t</module>\n\n\t</module>\n\n</module>\n\n\n\n注意：协议头验证，需要创建checkstyle-header.txt\n\n^\\q/*\\e$\n^\\q * copyright (c) \\e20\\d\\d\\-20\\d\\d\\q kcloud-platform-iot author or authors. all rights reserved.\\e$\n^\\q *\\e$\n^\\q * licensed under the apache license, version 2.0 (the "license");\\e$\n^\\q * you may not use this file except in compliance with the license.\\e$\n^\\q * you may obtain a copy of the license at\\e$\n^\\q *\\e$\n^\\q *   http://www.apache.org/licenses/license-2.0\\e$\n^\\q *\\e$\n^\\q * unless required by applicable law or agreed to in writing, software\\e$\n^\\q * distributed under the license is distributed on an "as is" basis,\\e$\n^\\q * without warranties or conditions of any kind, either express or implied.\\e$\n^\\q * see the license for the specific language governing permissions and\\e$\n^\\q * limitations under the license.\\e$\n^\\q *\\e$\n^\\q */\\e$\n^$\n^.*$\n\n\n注意：checkstyle-suppressions.xml可以用来排除不扫描的文件，比如排除mapstruct生成的代码\n\n<!doctype suppressions public\n\t"-//checkstyle//dtd suppressionfilter configuration 1.2//en"\n\t"https://checkstyle.org/dtds/suppressions_1_2.dtd">\n<suppressions>\n\t\x3c!-- https://checkstyle.sourceforge.io/filters/suppressionfilter.html --\x3e\n\t<suppress files="[\\\\/]org[\\\\/]laokou[\\\\/]admin[\\\\/]convertor[\\\\/].*convertorimpl.java" checks=".*"/>\n\t<suppress files="[\\\\/]org[\\\\/]laokou[\\\\/]auth[\\\\/]convertor[\\\\/].*convertorimpl.java" checks=".*"/>\n</suppressions>\n\n\n\n# 使用\n\nmvn clean install -p test\n\n\n我是老寇，我们下次再见啦！',charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"动态路由",frontmatter:{title:"动态路由",date:"2024-09-03T21:30:32.000Z",permalink:"/pages/4bce44/"},regularPath:"/01.%E6%8C%87%E5%8D%97/05.%E5%90%8E%E7%AB%AF%E6%8C%87%E5%8D%97/09.%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1.html",relativePath:"01.指南/05.后端指南/09.动态路由.md",key:"v-7879551d",path:"/pages/4bce44/",headers:[{level:3,title:"Spring Cloud Gateway",slug:"spring-cloud-gateway",normalizedTitle:"spring cloud gateway",charIndex:45},{level:3,title:"动态路由",slug:"动态路由",normalizedTitle:"动态路由",charIndex:35},{level:4,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:1832},{level:4,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:568},{level:3,title:"负载均衡",slug:"负载均衡",normalizedTitle:"负载均衡",charIndex:679}],headersStr:"Spring Cloud Gateway 动态路由 引入依赖 使用 负载均衡",content:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，讲一讲动态路由！\n\n\n# Spring Cloud Gateway\n\nSpring Cloud Gateway官方地址\n\n提供了一个建立在 Spring 生态系统之上的 API 网关，包括：Spring 6、Spring Boot 3 和 Project Reactor。 Spring Cloud Gateway旨在提供一种简单而有效的方法来路由到API，并为它们提供跨领域关注点，例如：安全性，监控/指标、限流、路由等等。\n\n注意\n\n * 不启用网关，请设置 spring.cloud.gateway.enabled=false\n * Spring Cloud Gateway需要运行在由Spring Webflux（响应式）提供的Netty容器，不适用于传统的Servlet容器或作为WAR构建\n\n核心概念\n\n * Route：网关的基本构成单元，它由ID,目标URI，Predicate集合和Filer集合组成，如果满足Predicate，则匹配路由\n * Predicate：断言，这是jdk8 断言函数，输入类型是 Spring Framework ServerWebExchange,可以匹配HTTP请求中的任何内容，例如请求头或参数\n * Filter：是使用特定工厂构造的 GatewayFilter 实例，分为两种类型，分别是Gateway Filter（某个路由过滤器）和Global Filter（全局过滤器），您可以对下游服务请求之前或之后修改请求或响应\n\n流程图\n\n负载均衡配置\n\nspring:\n\tcloud:\n\t\t# loadbalancer\n\t\tloadbalancer:\n\t\t\tcache:\n\t\t\t\tcaffeine:\n\t\t\t\t\t# 初始容量 => 30\n\t\t\t\t\t# 最大容量 => 4096\n\t\t\t\t\t# 淘汰规则 => 最后一次写操作后经过30s过期\n\t\t\t\t\tspec: initialCapacity=30,expireAfterWrite=30s,maximumSize=4096\n\t\t\t\t# 开启缓存\n\t\t\t\tenabled: true\n\t\t\tnacos:\n\t\t\t\t# 开启Nacos路由负载均衡\n\t\t\t\tenabled: true\n\t\t# gateway\n\t\tgateway:\n\t\t\tdiscovery:\n\t\t\t\tlocator:\n\t\t\t\t\t# 关闭动态生成路由 => DiscoveryClientRouteDefinitionLocator\n\t\t\t\t\t# 查看DiscoveryLocatorProperties\n\t\t\t\t\tenabled: false\n\t\t\t\t\t# 开启服务ID强制小写\n\t\t\t\t\tlower-case-service-id: true\n\t\t\thttpclient:\n\t\t\t\tssl:\n\t\t\t\t\t# 信任所有下游证书\n\t\t\t\t\tuse-insecure-trust-manager: true\n\t\t\t\t# 关闭netty日志\n\t\t\t\twiretap: false\n\t\t\t\tpool:\n\t\t\t\t\t# 连接池中连接的最大空闲时间\n\t\t\t\t\tmax-idle-time: 10m\n\t\t\t\t\t# 最大连接数\n\t\t\t\t\tmax-connections: 10000\n\t\t\t\t\t# 连接池中连接的最大存活时间\n\t\t\t\t\tmax-life-time: 5m\n\t\t\t\t\t# elastic   无线扩展的线程池（弹性线程池，连接数不可控）\n\t\t\t\t\t# fixed     固定数量线程池\n\t\t\t\t\t# disabled  不使用线程池（只有一个线程）\n\t\t\t\t\ttype: fixed\n\t\t\t\t\t# 必须是fixed，线程池获取连接最大等待时间（毫秒）\n\t\t\t\t\tacquire-timeout: 60000\n\t\t\t\t# 连接超时时间（毫秒），默认30s\n\t\t\t\tconnect-timeout: 60000\n\t\t\thttpserver:\n\t\t\t\t# 关闭netty日志\n\t\t\t\twiretap: false\n\t\t\trouter:\n\t\t\t\t# 开启动态路由认证\n\t\t\t\tauth:\n\t\t\t\t\tenabled: true\n\t\t\t\t\tusername: laokou\n\t\t\t\t\tpassword: laokou123\n\n\n\n# 动态路由\n\n# 引入依赖\n\n\n<dependencies>\n\t<dependency>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-webflux</artifactId>\n\t</dependency>\n\t<dependency>\n\t\t<groupId>org.springframework.cloud</groupId>\n\t\t<artifactId>spring-cloud-starter-gateway</artifactId>\n\t</dependency>\n\t<dependency>\n\t\t<groupId>com.github.ben-manes.caffeine</groupId>\n\t\t<artifactId>caffeine</artifactId>\n\t</dependency>\n\t<dependency>\n\t\t<groupId>com.alibaba.cloud</groupId>\n\t\t<artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n\t</dependency>\n\t<dependency>\n\t\t<groupId>com.alibaba.cloud</groupId>\n\t\t<artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>\n\t</dependency>\n\t<dependency>\n\t\t<groupId>org.springframework.cloud</groupId>\n\t\t<artifactId>spring-cloud-loadbalancer</artifactId>\n\t</dependency>\n\t<dependency>\n\t\t<groupId>org.springframework.cloud</groupId>\n\t\t<artifactId>spring-cloud-starter-bootstrap</artifactId>\n\t</dependency>\n\t<dependency>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-data-redis</artifactId>\n\t</dependency>\n\t<dependency>\n\t\t<groupId>org.redisson</groupId>\n\t\t<artifactId>redisson</artifactId>\n\t</dependency>\n</dependencies>\n\n\n# 使用\n\n// @formatter:off\n/**\n * nacos动态路由缓存库.\n * <a href="https://github.com/alibaba/spring-cloud-alibaba/blob/2.2.x/spring-cloud-alibaba-examples/nacos-example/nacos-config-example/src/main/java/com/alibaba/cloud/examples/example/ConfigListenerExample.java">nacos拉取配置</a>\n *\n * @author laokou\n */\n// @formatter:on\n@Component\n@Slf4j\n@NonNullApi\n@Repository\npublic class NacosRouteDefinitionRepository implements RouteDefinitionRepository, ApplicationEventPublisherAware {\n\n\t/**\n\t * 动态路由配置.\n\t */\n\tprivate static final String DATA_ID = "router.json";\n\n\tprivate final ConfigUtil configUtil;\n\n\tprivate final ReactiveHashOperations<String, String, RouteDefinition> reactiveHashOperations;\n\n\tprivate ApplicationEventPublisher applicationEventPublisher;\n\n\tpublic NacosRouteDefinitionRepository(ConfigUtil configUtil,\n\t\t\t\t\t\t\t\t\t\t  ReactiveRedisTemplate<String, Object> reactiveRedisTemplate) {\n\t\tthis.configUtil = configUtil;\n\t\tthis.reactiveHashOperations = reactiveRedisTemplate.opsForHash();\n\t}\n\n\t// @formatter:off\n\t/**\n\t * 路由基本原理总结：\n\t * 1.从NacosRouteDefinitionRepository、DiscoveryClientRouteDefinitionLocator和PropertiesRouteDefinitionLocator加载定义的路由规则.\n\t * 2.通过CompositeRouteDefinitionLocator合并定义的路由规则.\n\t * 3.加载所有的定义的路由规则，使用配置的断言工厂和过滤器工厂来创建路由.\n\t * 4.将路由缓存，提高路由查找性能.\n\t * <p>\n\t * 获取动态路由（避免集群中网关频繁调用Redis，需要本地缓存）.\n\t * {@link org.springframework.cloud.gateway.config.GatewayAutoConfiguration\n\t * @return 定义的路由规则\n\t */\n\t@Override\n\tpublic Flux<RouteDefinition> getRouteDefinitions() {\n\t\treturn reactiveHashOperations.entries(RedisKeyUtil.getRouteDefinitionHashKey())\n\t\t\t.mapNotNull(Map.Entry::getValue)\n\t\t\t.onErrorContinue((throwable, routeDefinition) -> {\n\t\t\t\tif (log.isErrorEnabled()) {\n\t\t\t\t\tlog.error("Get routes from redis error cause : {}", throwable.toString(), throwable);\n\t\t\t\t}\n\t\t\t});\n\t}\n\t// @formatter:on\n\n\t// @formatter:off\n\t@Override\n\tpublic Mono<Void> save(Mono<RouteDefinition> route) {\n\t\treturn Mono.empty();\n\t}\n\n\t@Override\n\tpublic Mono<Void> delete(Mono<String> routeId) {\n\t\treturn Mono.empty();\n\t}\n\n\t/**\n\t * 保存路由【同步Nacos路由配置到Redis】.\n\t * @return 保存结果\n\t */\n\tpublic Flux<Boolean> saveRouters() {\n\t\treturn Flux.fromIterable(pullRouters())\n\t\t\t.flatMap(router -> reactiveHashOperations.putIfAbsent(RedisKeyUtil.getRouteDefinitionHashKey(), router.getId(), router)).doFinally(c -> refreshEvent());\n\t}\n\n\t/**\n\t * 删除路由.\n\t * @return 删除结果\n\t */\n\tpublic Mono<Boolean> removeRouters() {\n\t\treturn reactiveHashOperations.delete(RedisKeyUtil.getRouteDefinitionHashKey()).doFinally(c -> refreshEvent());\n\t}\n\n\t/**\n\t * 拉取nacos动态路由配置.\n\t * @return 拉取结果\n\t */\n\tprivate Collection<RouteDefinition> pullRouters() {\n\t\ttry {\n\t\t\t// pull nacos config info\n\t\t\tString group = configUtil.getGroup();\n\t\t\tConfigService configService = configUtil.getConfigService();\n\t\t\tString configInfo = configService.getConfig(DATA_ID, group, 5000);\n\t\t\treturn JacksonUtil.toList(configInfo, RouteDefinition.class);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tlog.error("错误信息：{}", e.getMessage());\n\t\t\tthrow new SystemException(ROUTER_NOT_EXIST);\n\t\t}\n\t}\n\n\t@Override\n\tpublic void setApplicationEventPublisher(ApplicationEventPublisher applicationEventPublisher) {\n\t\tthis.applicationEventPublisher = applicationEventPublisher;\n\t}\n\n\t/**\n\t * 刷新事件.\n\t */\n\tprivate void refreshEvent() {\n\t\t// 刷新事件\n\t\tapplicationEventPublisher.publishEvent(new RefreshRoutesEvent(this));\n\t}\n\t// @formatter:on\n\n}\n\n\n\n创建router.json\n\n[\n\t{\n\t\t"id": "laokou-auth",\n\t\t"uri": "lb://laokou-auth",\n\t\t"predicates": [\n\t\t\t{\n\t\t\t\t"name": "Path",\n\t\t\t\t"args": {\n\t\t\t\t\t"pattern": "/auth/**"\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "Weight",\n\t\t\t\t"args": {\n\t\t\t\t\t"_genkey_0": "auth",\n\t\t\t\t\t"_genkey_1": "100"\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t"filters": [\n\t\t\t{\n\t\t\t\t"name": "StripPrefix",\n\t\t\t\t"args": {\n\t\t\t\t\t"parts": "1"\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "RewritePath",\n\t\t\t\t"args": {\n\t\t\t\t\t"_genkey_0": "/auth/(?<path>.*)",\n\t\t\t\t\t"_genkey_1": "/$\\\\{path}"\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t"metadata": {\n\t\t\t"version": "v3"\n\t\t},\n\t\t"order": 1\n\t},\n\t{\n\t\t"id": "laokou-admin",\n\t\t"uri": "lb://laokou-admin",\n\t\t"predicates": [\n\t\t\t{\n\t\t\t\t"name": "Path",\n\t\t\t\t"args": {\n\t\t\t\t\t"pattern": "/admin/**"\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "Weight",\n\t\t\t\t"args": {\n\t\t\t\t\t"_genkey_0": "admin",\n\t\t\t\t\t"_genkey_1": "100"\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t"filters": [\n\t\t\t{\n\t\t\t\t"name": "StripPrefix",\n\t\t\t\t"args": {\n\t\t\t\t\t"parts": "1"\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "RewritePath",\n\t\t\t\t"args": {\n\t\t\t\t\t"_genkey_0": "/admin/(?<path>.*)",\n\t\t\t\t\t"_genkey_1": "/$\\\\{path}"\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t"metadata": {\n\t\t\t"version": "v3"\n\t\t},\n\t\t"order": 1\n\t},\n\t{\n\t\t"id": "laokou-im",\n\t\t"uri": "lb:wss://laokou-im",\n\t\t"predicates": [\n\t\t\t{\n\t\t\t\t"name": "Path",\n\t\t\t\t"args": {\n\t\t\t\t\t"pattern": "/im/**"\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "Weight",\n\t\t\t\t"args": {\n\t\t\t\t\t"_genkey_0": "im",\n\t\t\t\t\t"_genkey_1": "100"\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t"filters": [\n\t\t\t{\n\t\t\t\t"name": "StripPrefix",\n\t\t\t\t"args": {\n\t\t\t\t\t"parts": "1"\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "RewritePath",\n\t\t\t\t"args": {\n\t\t\t\t\t"_genkey_0": "/im/(?<path>.*)",\n\t\t\t\t\t"_genkey_1": "/$\\\\{path}"\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t"metadata": {\n\t\t\t"version": "v3"\n\t\t},\n\t\t"order": 1\n\t}\n]\n\n\n注意：api版本号可以加入动态路由的元数据中，即{ "metadata":{ "version": "v3" }\n\n创建API接口\n\n/**\n * 路由管理.\n *\n * @author laokou\n */\n@RestController\n@RequiredArgsConstructor\n@RequestMapping("v3/routers")\n@Tag(name = "路由管理", description = "路由管理")\npublic class RoutersController {\n\n\tprivate final NacosRouteDefinitionRepository nacosRouteDefinitionRepository;\n\n\t@PostMapping\n\t@Operation(summary = "保存路由", description = "保存路由")\n\tpublic Flux<Boolean> saveRouter() {\n\t\treturn nacosRouteDefinitionRepository.saveRouters();\n\t}\n\n\t@DeleteMapping\n\t@Operation(summary = "删除路由", description = "删除路由")\n\tpublic Mono<Boolean> removeRouter() {\n\t\treturn nacosRouteDefinitionRepository.removeRouters();\n\t}\n\n}\n\n\n注意：考虑到API安全性，账号和密码都需要进行RSA加密，因此，需要写拦截器\n\n/**\n * API过滤器.\n *\n * @author laokou\n */\n@NonNullApi\n@RequiredArgsConstructor\npublic class ApiFilter implements WebFilter {\n\n\tprivate static final String API_PATTERN = "/v3/routers/**";\n\n\tprivate final RequestMappingHandlerMapping requestMappingHandlerMapping;\n\n\tprivate final GatewayExtProperties gatewayExtProperties;\n\n\t@Override\n\tpublic Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {\n\t\treturn requestMappingHandlerMapping.getHandler(exchange)\n\t\t\t.switchIfEmpty(chain.filter(exchange))\n\t\t\t.flatMap(handler -> {\n\t\t\t\tServerHttpRequest request = exchange.getRequest();\n\t\t\t\tString requestURL = ReactiveRequestUtil.getRequestURL(request);\n\t\t\t\tif (ReactiveRequestUtil.pathMatcher(requestURL, API_PATTERN)) {\n\t\t\t\t\treturn checkUsernamePassword(exchange, request, chain);\n\t\t\t\t}\n\t\t\t\treturn chain.filter(exchange);\n\t\t\t});\n\t}\n\n\t/**\n\t * 校验用户名和密码.\n\t * @param exchange 服务网络交换机\n\t * @param request 请求对象\n\t * @param chain 链式过滤器\n\t * @return 响应结果\n\t */\n\tprivate Mono<Void> checkUsernamePassword(ServerWebExchange exchange, ServerHttpRequest request,\n\t\t\t\t\t\t\t\t\t\t\t WebFilterChain chain) {\n\t\tString username = ReactiveRequestUtil.getParamValue(request, USERNAME);\n\t\tString password = ReactiveRequestUtil.getParamValue(request, PASSWORD);\n\t\tif (StringUtil.isEmpty(username)) {\n\t\t\t// 用户名不能为空\n\t\t\treturn ReactiveResponseUtil.responseOk(exchange,\n\t\t\t\tResult.fail(ValidatorUtil.getMessage(OAUTH2_USERNAME_REQUIRE)));\n\t\t}\n\t\tif (StringUtil.isEmpty(password)) {\n\t\t\t// 密码不能为空\n\t\t\treturn ReactiveResponseUtil.responseOk(exchange,\n\t\t\t\tResult.fail(ValidatorUtil.getMessage(OAUTH2_PASSWORD_REQUIRE)));\n\t\t}\n\t\ttry {\n\t\t\tusername = RSAUtil.decryptByPrivateKey(username);\n\t\t\tpassword = RSAUtil.decryptByPrivateKey(password);\n\t\t} catch (Exception e) {\n\t\t\t// 用户名或密码错误\n\t\t\treturn ReactiveResponseUtil.responseOk(exchange, Result.fail(OAUTH2_USERNAME_PASSWORD_ERROR));\n\t\t}\n\t\tif (gatewayExtProperties.isEnabled() && (!ObjectUtil.equals(gatewayExtProperties.getPassword(), password)\n\t\t\t|| !ObjectUtil.equals(gatewayExtProperties.getUsername(), username))) {\n\t\t\t// 用户名或密码错误\n\t\t\treturn ReactiveResponseUtil.responseOk(exchange, Result.fail(OAUTH2_USERNAME_PASSWORD_ERROR));\n\t\t}\n\t\treturn chain.filter(exchange);\n\t}\n\n}\n\n\n考虑到插拔式，所以通过注解形式装配\n\n/**\n * 认证开关注解.\n *\n * @author laokou\n */\n@Documented\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Import(ApiFilter.class)\npublic @interface EnableAuth {\n\n}\n\n\n开启API接口认证\n\n\n@EnableAuth\n@SpringBootApplication\npublic class GatewayApp {\n\n\tpublic static void main(String[] args) {\n\t\tnew SpringApplicationBuilder(GatewayApp.class).web(WebApplicationType.REACTIVE).run(args);\n\t}\n\n}\n\n\n\n# 负载均衡\n\n因为需要多版本发布API接口，所以，需要对nacos负载均衡重写，采用的方式就是全路径覆盖源码\n\n/**\n * nacos路由负载均衡.\n * {@link com.alibaba.cloud.nacos.loadbalancer.NacosLoadBalancerClientConfiguration}\n * {@link org.springframework.cloud.loadbalancer.core.RoundRobinLoadBalancer}\n *\n * @author XuDaojie\n * @author laokou\n * @since 2021.1\n */\n@Slf4j\npublic class NacosLoadBalancer implements ReactorServiceInstanceLoadBalancer {\n\n\t/**\n\t * 优雅停机URL.\n\t */\n\tpublic static final String GRACEFUL_SHUTDOWN_URL = "/graceful-shutdown";\n\n\t/**\n\t * Nacos集群配置.\n\t */\n\tprivate static final String CLUSTER_CONFIG = "nacos.cluster";\n\n\t/**\n\t * 版本.\n\t */\n\tprivate static final String VERSION = "version";\n\n\t/**\n\t * 版本号.\n\t */\n\tprivate static final String DEFAULT_VERSION_VALUE = "v3";\n\n\t/**\n\t * IPV6常量.\n\t */\n\tprivate static final String IPV6_KEY = "IPv6";\n\n\t/**\n\t * Storage local valid IPv6 address, it\'s a flag whether local machine support IPv6\n\t * address stack.\n\t */\n\tpublic static String ipv6;\n\n\t/**\n\t * 服务ID.\n\t */\n\tprivate final String serviceId;\n\n\tprivate final ObjectProvider<ServiceInstanceListSupplier> serviceInstanceListSupplierProvider;\n\n\tprivate final NacosDiscoveryProperties nacosDiscoveryProperties;\n\n\tprivate final InetIPv6Utils inetIPv6Utils;\n\n\tpublic NacosLoadBalancer(ObjectProvider<ServiceInstanceListSupplier> serviceInstanceListSupplierProvider,\n\t\t\t\t\t\t\t String serviceId, NacosDiscoveryProperties nacosDiscoveryProperties, InetIPv6Utils inetIPv6Utils) {\n\t\tthis.serviceId = serviceId;\n\t\tthis.inetIPv6Utils = inetIPv6Utils;\n\t\tthis.serviceInstanceListSupplierProvider = serviceInstanceListSupplierProvider;\n\t\tthis.nacosDiscoveryProperties = nacosDiscoveryProperties;\n\t}\n\n\t/**\n\t * 初始化.\n\t */\n\t@PostConstruct\n\tpublic void init() {\n\t\tString ip = nacosDiscoveryProperties.getIp();\n\t\tif (StringUtils.isNotEmpty(ip)) {\n\t\t\tipv6 = Pattern.matches(IPV4_REGEX, ip) ? nacosDiscoveryProperties.getMetadata().get(IPV6_KEY) : ip;\n\t\t} else {\n\t\t\tipv6 = inetIPv6Utils.findIPv6Address();\n\t\t}\n\t}\n\n\t/**\n\t * 根据IP类型过滤服务实例.\n\t * @param instances 服务实例\n\t * @return 服务实例列表\n\t */\n\tprivate List<ServiceInstance> filterInstanceByIpType(List<ServiceInstance> instances) {\n\t\tif (StringUtils.isNotEmpty(ipv6)) {\n\t\t\tList<ServiceInstance> ipv6InstanceList = new ArrayList<>();\n\t\t\tfor (ServiceInstance instance : instances) {\n\t\t\t\tif (Pattern.matches(IPV4_REGEX, instance.getHost())) {\n\t\t\t\t\tif (StringUtils.isNotEmpty(instance.getMetadata().get(IPV6_KEY))) {\n\t\t\t\t\t\tipv6InstanceList.add(instance);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tipv6InstanceList.add(instance);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Provider has no IPv6, should use IPv4.\n\t\t\tif (ipv6InstanceList.isEmpty()) {\n\t\t\t\treturn instances.stream()\n\t\t\t\t\t.filter(instance -> Pattern.matches(IPV4_REGEX, instance.getHost()))\n\t\t\t\t\t.toList();\n\t\t\t} else {\n\t\t\t\treturn ipv6InstanceList;\n\t\t\t}\n\t\t}\n\t\treturn instances.stream()\n\t\t\t.filter(instance -> Pattern.matches(IPV4_REGEX, instance.getHost()))\n\t\t\t.toList();\n\t}\n\n\t/**\n\t * 路由负载均衡.\n\t * @param request 请求\n\t * @return 服务实例（响应式）\n\t */\n\t@Override\n\tpublic Mono<Response<ServiceInstance>> choose(Request request) {\n\t\treturn serviceInstanceListSupplierProvider.getIfAvailable(NoopServiceInstanceListSupplier::new)\n\t\t\t.get(request)\n\t\t\t.next()\n\t\t\t.map(instances -> getInstanceResponse(instances, request));\n\t}\n\n\t/**\n\t * 路由负载均衡.\n\t * @param serviceInstances 服务实例列表\n\t * @param request 请求\n\t * @return 服务实例响应体\n\t */\n\tprivate Response<ServiceInstance> getInstanceResponse(List<ServiceInstance> serviceInstances, Request<?> request) {\n\t\tif (serviceInstances.isEmpty()) {\n\t\t\treturn new EmptyResponse();\n\t\t}\n\t\tif (request.getContext() instanceof RequestDataContext context) {\n\t\t\t// IP优先（优雅停机）\n\t\t\tString path = context.getClientRequest().getUrl().getPath();\n\t\t\tHttpHeaders headers = context.getClientRequest().getHeaders();\n\t\t\tif (ReactiveRequestUtil.pathMatcher(HttpMethod.GET.name(), path,\n\t\t\t\tMap.of(HttpMethod.GET.name(), Collections.singleton(GRACEFUL_SHUTDOWN_URL)))) {\n\t\t\t\tServiceInstance serviceInstance = serviceInstances.stream()\n\t\t\t\t\t.filter(instance -> match(instance, headers))\n\t\t\t\t\t.findFirst()\n\t\t\t\t\t.orElse(null);\n\t\t\t\tif (ObjectUtil.isNotNull(serviceInstance)) {\n\t\t\t\t\treturn new DefaultResponse(serviceInstance);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 服务灰度路由\n\t\t\tif (isGrayRouter(headers)) {\n\t\t\t\tString version = RegexUtil.getRegexValue(path, URL_VERSION_REGEX);\n\t\t\t\tif (StringUtils.isNotEmpty(version)) {\n\t\t\t\t\tserviceInstances = serviceInstances.stream()\n\t\t\t\t\t\t.filter(item -> item.getMetadata().getOrDefault(VERSION, DEFAULT_VERSION_VALUE).equals(version))\n\t\t\t\t\t\t.toList();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn getInstanceResponse(serviceInstances);\n\t}\n\n\t/**\n\t * 服务实例响应.\n\t * @param serviceInstances 服务实例\n\t * @return 响应结果\n\t */\n\tprivate Response<ServiceInstance> getInstanceResponse(List<ServiceInstance> serviceInstances) {\n\t\tif (serviceInstances.isEmpty()) {\n\t\t\tlog.error("No servers available for service: {}", this.serviceId);\n\t\t\treturn new EmptyResponse();\n\t\t}\n\t\ttry {\n\t\t\tString clusterName = this.nacosDiscoveryProperties.getClusterName();\n\t\t\tList<ServiceInstance> instancesToChoose = serviceInstances;\n\t\t\tif (StringUtils.isNotBlank(clusterName)) {\n\t\t\t\tList<ServiceInstance> sameClusterInstances = serviceInstances.stream().filter(serviceInstance -> {\n\t\t\t\t\tString cluster = serviceInstance.getMetadata().get(CLUSTER_CONFIG);\n\t\t\t\t\treturn StringUtils.equals(cluster, clusterName);\n\t\t\t\t}).toList();\n\t\t\t\tif (!CollectionUtils.isEmpty(sameClusterInstances)) {\n\t\t\t\t\tinstancesToChoose = sameClusterInstances;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlog.warn("A cross-cluster call occurs，name = {}, clusterName = {}, instance = {}", serviceId,\n\t\t\t\t\tclusterName, serviceInstances);\n\t\t\t}\n\t\t\tinstancesToChoose = this.filterInstanceByIpType(instancesToChoose);\n\t\t\t// 路由权重\n\t\t\tServiceInstance instance = NacosBalancer.getHostByRandomWeight3(instancesToChoose);\n\t\t\treturn new DefaultResponse(instance);\n\t\t} catch (Exception e) {\n\t\t\tlog.error("NacosLoadBalancer error", e);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * 判断服务灰度路由.\n\t * @param headers 请求头\n\t * @return 判断结果\n\t */\n\tprivate boolean isGrayRouter(HttpHeaders headers) {\n\t\tString gray = headers.getFirst(SERVICE_GRAY);\n\t\treturn ObjectUtil.equals(TRUE, gray);\n\t}\n\n\t/**\n\t * 根据IP和端口匹配服务节点.\n\t * @param serviceInstance 服务实例\n\t * @param headers 请求头\n\t * @return 匹配结果\n\t */\n\tprivate boolean match(ServiceInstance serviceInstance, HttpHeaders headers) {\n\t\tString host = headers.getFirst(SERVICE_HOST);\n\t\tString port = headers.getFirst(SERVICE_PORT);\n\t\tAssert.isTrue(StringUtil.isNotEmpty(host), "service-host is empty");\n\t\tAssert.isTrue(StringUtil.isNotEmpty(port), "service-port is empty");\n\t\treturn ObjectUtil.equals(host, serviceInstance.getHost())\n\t\t\t&& Integer.parseInt(port) == serviceInstance.getPort();\n\t}\n\n}\n\n\n/**\n * {@link ServiceInstanceListSupplier} don\'t use cache.<br>\n * <br>\n * 1. LoadBalancerCache causes information such as the weight of the service instance to\n * be changed without immediate effect.<br>\n * 2. Nacos itself supports caching.\n *\n * @author XuDaojie\n * @author laokou\n * @since 2021.1\n */\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnDiscoveryEnabled\npublic class NacosLoadBalancerClientConfiguration {\n\n\tprivate static final int REACTIVE_SERVICE_INSTANCE_SUPPLIER_ORDER = 183827465;\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic ReactorLoadBalancer<ServiceInstance> nacosLoadBalancer(Environment environment,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  LoadBalancerClientFactory loadBalancerClientFactory, NacosDiscoveryProperties nacosDiscoveryProperties,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  InetIPv6Utils inetIPv6Utils) {\n\t\tString name = environment.getProperty(LoadBalancerClientFactory.PROPERTY_NAME);\n\t\treturn new NacosLoadBalancer(loadBalancerClientFactory.getLazyProvider(name, ServiceInstanceListSupplier.class),\n\t\t\tname, nacosDiscoveryProperties, inetIPv6Utils);\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnReactiveDiscoveryEnabled\n\t@Order(REACTIVE_SERVICE_INSTANCE_SUPPLIER_ORDER)\n\tpublic static class ReactiveSupportConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnBean(ReactiveDiscoveryClient.class)\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnProperty(value = "spring.cloud.loadbalancer.configurations", havingValue = "default",\n\t\t\tmatchIfMissing = true)\n\t\tpublic ServiceInstanceListSupplier discoveryClientServiceInstanceListSupplier(\n\t\t\tConfigurableApplicationContext context) {\n\t\t\treturn ServiceInstanceListSupplier.builder().withDiscoveryClient().build(context);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnBean(ReactiveDiscoveryClient.class)\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnProperty(value = "spring.cloud.loadbalancer.configurations", havingValue = "zone-preference")\n\t\tpublic ServiceInstanceListSupplier zonePreferenceDiscoveryClientServiceInstanceListSupplier(\n\t\t\tConfigurableApplicationContext context) {\n\t\t\treturn ServiceInstanceListSupplier.builder().withDiscoveryClient().withZonePreference().build(context);\n\t\t}\n\n\t}\n\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnBlockingDiscoveryEnabled\n\t@Order(REACTIVE_SERVICE_INSTANCE_SUPPLIER_ORDER + 1)\n\tpublic static class BlockingSupportConfiguration {\n\n\t\t@Bean\n\t\t@ConditionalOnBean(DiscoveryClient.class)\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnProperty(value = "spring.cloud.loadbalancer.configurations", havingValue = "default",\n\t\t\tmatchIfMissing = true)\n\t\tpublic ServiceInstanceListSupplier discoveryClientServiceInstanceListSupplier(\n\t\t\tConfigurableApplicationContext context) {\n\t\t\treturn ServiceInstanceListSupplier.builder().withBlockingDiscoveryClient().build(context);\n\t\t}\n\n\t\t@Bean\n\t\t@ConditionalOnBean(DiscoveryClient.class)\n\t\t@ConditionalOnMissingBean\n\t\t@ConditionalOnProperty(value = "spring.cloud.loadbalancer.configurations", havingValue = "zone-preference")\n\t\tpublic ServiceInstanceListSupplier zonePreferenceDiscoveryClientServiceInstanceListSupplier(\n\t\t\tConfigurableApplicationContext context) {\n\t\t\treturn ServiceInstanceListSupplier.builder()\n\t\t\t\t.withBlockingDiscoveryClient()\n\t\t\t\t.withZonePreference()\n\t\t\t\t.build(context);\n\t\t}\n\n\t}\n\n}\n\n\n我是老寇，我们下次再见啦！',normalizedContent:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，讲一讲动态路由！\n\n\n# spring cloud gateway\n\nspring cloud gateway官方地址\n\n提供了一个建立在 spring 生态系统之上的 api 网关，包括：spring 6、spring boot 3 和 project reactor。 spring cloud gateway旨在提供一种简单而有效的方法来路由到api，并为它们提供跨领域关注点，例如：安全性，监控/指标、限流、路由等等。\n\n注意\n\n * 不启用网关，请设置 spring.cloud.gateway.enabled=false\n * spring cloud gateway需要运行在由spring webflux（响应式）提供的netty容器，不适用于传统的servlet容器或作为war构建\n\n核心概念\n\n * route：网关的基本构成单元，它由id,目标uri，predicate集合和filer集合组成，如果满足predicate，则匹配路由\n * predicate：断言，这是jdk8 断言函数，输入类型是 spring framework serverwebexchange,可以匹配http请求中的任何内容，例如请求头或参数\n * filter：是使用特定工厂构造的 gatewayfilter 实例，分为两种类型，分别是gateway filter（某个路由过滤器）和global filter（全局过滤器），您可以对下游服务请求之前或之后修改请求或响应\n\n流程图\n\n负载均衡配置\n\nspring:\n\tcloud:\n\t\t# loadbalancer\n\t\tloadbalancer:\n\t\t\tcache:\n\t\t\t\tcaffeine:\n\t\t\t\t\t# 初始容量 => 30\n\t\t\t\t\t# 最大容量 => 4096\n\t\t\t\t\t# 淘汰规则 => 最后一次写操作后经过30s过期\n\t\t\t\t\tspec: initialcapacity=30,expireafterwrite=30s,maximumsize=4096\n\t\t\t\t# 开启缓存\n\t\t\t\tenabled: true\n\t\t\tnacos:\n\t\t\t\t# 开启nacos路由负载均衡\n\t\t\t\tenabled: true\n\t\t# gateway\n\t\tgateway:\n\t\t\tdiscovery:\n\t\t\t\tlocator:\n\t\t\t\t\t# 关闭动态生成路由 => discoveryclientroutedefinitionlocator\n\t\t\t\t\t# 查看discoverylocatorproperties\n\t\t\t\t\tenabled: false\n\t\t\t\t\t# 开启服务id强制小写\n\t\t\t\t\tlower-case-service-id: true\n\t\t\thttpclient:\n\t\t\t\tssl:\n\t\t\t\t\t# 信任所有下游证书\n\t\t\t\t\tuse-insecure-trust-manager: true\n\t\t\t\t# 关闭netty日志\n\t\t\t\twiretap: false\n\t\t\t\tpool:\n\t\t\t\t\t# 连接池中连接的最大空闲时间\n\t\t\t\t\tmax-idle-time: 10m\n\t\t\t\t\t# 最大连接数\n\t\t\t\t\tmax-connections: 10000\n\t\t\t\t\t# 连接池中连接的最大存活时间\n\t\t\t\t\tmax-life-time: 5m\n\t\t\t\t\t# elastic   无线扩展的线程池（弹性线程池，连接数不可控）\n\t\t\t\t\t# fixed     固定数量线程池\n\t\t\t\t\t# disabled  不使用线程池（只有一个线程）\n\t\t\t\t\ttype: fixed\n\t\t\t\t\t# 必须是fixed，线程池获取连接最大等待时间（毫秒）\n\t\t\t\t\tacquire-timeout: 60000\n\t\t\t\t# 连接超时时间（毫秒），默认30s\n\t\t\t\tconnect-timeout: 60000\n\t\t\thttpserver:\n\t\t\t\t# 关闭netty日志\n\t\t\t\twiretap: false\n\t\t\trouter:\n\t\t\t\t# 开启动态路由认证\n\t\t\t\tauth:\n\t\t\t\t\tenabled: true\n\t\t\t\t\tusername: laokou\n\t\t\t\t\tpassword: laokou123\n\n\n\n# 动态路由\n\n# 引入依赖\n\n\n<dependencies>\n\t<dependency>\n\t\t<groupid>org.springframework.boot</groupid>\n\t\t<artifactid>spring-boot-starter-webflux</artifactid>\n\t</dependency>\n\t<dependency>\n\t\t<groupid>org.springframework.cloud</groupid>\n\t\t<artifactid>spring-cloud-starter-gateway</artifactid>\n\t</dependency>\n\t<dependency>\n\t\t<groupid>com.github.ben-manes.caffeine</groupid>\n\t\t<artifactid>caffeine</artifactid>\n\t</dependency>\n\t<dependency>\n\t\t<groupid>com.alibaba.cloud</groupid>\n\t\t<artifactid>spring-cloud-starter-alibaba-nacos-discovery</artifactid>\n\t</dependency>\n\t<dependency>\n\t\t<groupid>com.alibaba.cloud</groupid>\n\t\t<artifactid>spring-cloud-starter-alibaba-nacos-config</artifactid>\n\t</dependency>\n\t<dependency>\n\t\t<groupid>org.springframework.cloud</groupid>\n\t\t<artifactid>spring-cloud-loadbalancer</artifactid>\n\t</dependency>\n\t<dependency>\n\t\t<groupid>org.springframework.cloud</groupid>\n\t\t<artifactid>spring-cloud-starter-bootstrap</artifactid>\n\t</dependency>\n\t<dependency>\n\t\t<groupid>org.springframework.boot</groupid>\n\t\t<artifactid>spring-boot-starter-data-redis</artifactid>\n\t</dependency>\n\t<dependency>\n\t\t<groupid>org.redisson</groupid>\n\t\t<artifactid>redisson</artifactid>\n\t</dependency>\n</dependencies>\n\n\n# 使用\n\n// @formatter:off\n/**\n * nacos动态路由缓存库.\n * <a href="https://github.com/alibaba/spring-cloud-alibaba/blob/2.2.x/spring-cloud-alibaba-examples/nacos-example/nacos-config-example/src/main/java/com/alibaba/cloud/examples/example/configlistenerexample.java">nacos拉取配置</a>\n *\n * @author laokou\n */\n// @formatter:on\n@component\n@slf4j\n@nonnullapi\n@repository\npublic class nacosroutedefinitionrepository implements routedefinitionrepository, applicationeventpublisheraware {\n\n\t/**\n\t * 动态路由配置.\n\t */\n\tprivate static final string data_id = "router.json";\n\n\tprivate final configutil configutil;\n\n\tprivate final reactivehashoperations<string, string, routedefinition> reactivehashoperations;\n\n\tprivate applicationeventpublisher applicationeventpublisher;\n\n\tpublic nacosroutedefinitionrepository(configutil configutil,\n\t\t\t\t\t\t\t\t\t\t  reactiveredistemplate<string, object> reactiveredistemplate) {\n\t\tthis.configutil = configutil;\n\t\tthis.reactivehashoperations = reactiveredistemplate.opsforhash();\n\t}\n\n\t// @formatter:off\n\t/**\n\t * 路由基本原理总结：\n\t * 1.从nacosroutedefinitionrepository、discoveryclientroutedefinitionlocator和propertiesroutedefinitionlocator加载定义的路由规则.\n\t * 2.通过compositeroutedefinitionlocator合并定义的路由规则.\n\t * 3.加载所有的定义的路由规则，使用配置的断言工厂和过滤器工厂来创建路由.\n\t * 4.将路由缓存，提高路由查找性能.\n\t * <p>\n\t * 获取动态路由（避免集群中网关频繁调用redis，需要本地缓存）.\n\t * {@link org.springframework.cloud.gateway.config.gatewayautoconfiguration\n\t * @return 定义的路由规则\n\t */\n\t@override\n\tpublic flux<routedefinition> getroutedefinitions() {\n\t\treturn reactivehashoperations.entries(rediskeyutil.getroutedefinitionhashkey())\n\t\t\t.mapnotnull(map.entry::getvalue)\n\t\t\t.onerrorcontinue((throwable, routedefinition) -> {\n\t\t\t\tif (log.iserrorenabled()) {\n\t\t\t\t\tlog.error("get routes from redis error cause : {}", throwable.tostring(), throwable);\n\t\t\t\t}\n\t\t\t});\n\t}\n\t// @formatter:on\n\n\t// @formatter:off\n\t@override\n\tpublic mono<void> save(mono<routedefinition> route) {\n\t\treturn mono.empty();\n\t}\n\n\t@override\n\tpublic mono<void> delete(mono<string> routeid) {\n\t\treturn mono.empty();\n\t}\n\n\t/**\n\t * 保存路由【同步nacos路由配置到redis】.\n\t * @return 保存结果\n\t */\n\tpublic flux<boolean> saverouters() {\n\t\treturn flux.fromiterable(pullrouters())\n\t\t\t.flatmap(router -> reactivehashoperations.putifabsent(rediskeyutil.getroutedefinitionhashkey(), router.getid(), router)).dofinally(c -> refreshevent());\n\t}\n\n\t/**\n\t * 删除路由.\n\t * @return 删除结果\n\t */\n\tpublic mono<boolean> removerouters() {\n\t\treturn reactivehashoperations.delete(rediskeyutil.getroutedefinitionhashkey()).dofinally(c -> refreshevent());\n\t}\n\n\t/**\n\t * 拉取nacos动态路由配置.\n\t * @return 拉取结果\n\t */\n\tprivate collection<routedefinition> pullrouters() {\n\t\ttry {\n\t\t\t// pull nacos config info\n\t\t\tstring group = configutil.getgroup();\n\t\t\tconfigservice configservice = configutil.getconfigservice();\n\t\t\tstring configinfo = configservice.getconfig(data_id, group, 5000);\n\t\t\treturn jacksonutil.tolist(configinfo, routedefinition.class);\n\t\t}\n\t\tcatch (exception e) {\n\t\t\tlog.error("错误信息：{}", e.getmessage());\n\t\t\tthrow new systemexception(router_not_exist);\n\t\t}\n\t}\n\n\t@override\n\tpublic void setapplicationeventpublisher(applicationeventpublisher applicationeventpublisher) {\n\t\tthis.applicationeventpublisher = applicationeventpublisher;\n\t}\n\n\t/**\n\t * 刷新事件.\n\t */\n\tprivate void refreshevent() {\n\t\t// 刷新事件\n\t\tapplicationeventpublisher.publishevent(new refreshroutesevent(this));\n\t}\n\t// @formatter:on\n\n}\n\n\n\n创建router.json\n\n[\n\t{\n\t\t"id": "laokou-auth",\n\t\t"uri": "lb://laokou-auth",\n\t\t"predicates": [\n\t\t\t{\n\t\t\t\t"name": "path",\n\t\t\t\t"args": {\n\t\t\t\t\t"pattern": "/auth/**"\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "weight",\n\t\t\t\t"args": {\n\t\t\t\t\t"_genkey_0": "auth",\n\t\t\t\t\t"_genkey_1": "100"\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t"filters": [\n\t\t\t{\n\t\t\t\t"name": "stripprefix",\n\t\t\t\t"args": {\n\t\t\t\t\t"parts": "1"\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "rewritepath",\n\t\t\t\t"args": {\n\t\t\t\t\t"_genkey_0": "/auth/(?<path>.*)",\n\t\t\t\t\t"_genkey_1": "/$\\\\{path}"\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t"metadata": {\n\t\t\t"version": "v3"\n\t\t},\n\t\t"order": 1\n\t},\n\t{\n\t\t"id": "laokou-admin",\n\t\t"uri": "lb://laokou-admin",\n\t\t"predicates": [\n\t\t\t{\n\t\t\t\t"name": "path",\n\t\t\t\t"args": {\n\t\t\t\t\t"pattern": "/admin/**"\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "weight",\n\t\t\t\t"args": {\n\t\t\t\t\t"_genkey_0": "admin",\n\t\t\t\t\t"_genkey_1": "100"\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t"filters": [\n\t\t\t{\n\t\t\t\t"name": "stripprefix",\n\t\t\t\t"args": {\n\t\t\t\t\t"parts": "1"\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "rewritepath",\n\t\t\t\t"args": {\n\t\t\t\t\t"_genkey_0": "/admin/(?<path>.*)",\n\t\t\t\t\t"_genkey_1": "/$\\\\{path}"\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t"metadata": {\n\t\t\t"version": "v3"\n\t\t},\n\t\t"order": 1\n\t},\n\t{\n\t\t"id": "laokou-im",\n\t\t"uri": "lb:wss://laokou-im",\n\t\t"predicates": [\n\t\t\t{\n\t\t\t\t"name": "path",\n\t\t\t\t"args": {\n\t\t\t\t\t"pattern": "/im/**"\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "weight",\n\t\t\t\t"args": {\n\t\t\t\t\t"_genkey_0": "im",\n\t\t\t\t\t"_genkey_1": "100"\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t"filters": [\n\t\t\t{\n\t\t\t\t"name": "stripprefix",\n\t\t\t\t"args": {\n\t\t\t\t\t"parts": "1"\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "rewritepath",\n\t\t\t\t"args": {\n\t\t\t\t\t"_genkey_0": "/im/(?<path>.*)",\n\t\t\t\t\t"_genkey_1": "/$\\\\{path}"\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t"metadata": {\n\t\t\t"version": "v3"\n\t\t},\n\t\t"order": 1\n\t}\n]\n\n\n注意：api版本号可以加入动态路由的元数据中，即{ "metadata":{ "version": "v3" }\n\n创建api接口\n\n/**\n * 路由管理.\n *\n * @author laokou\n */\n@restcontroller\n@requiredargsconstructor\n@requestmapping("v3/routers")\n@tag(name = "路由管理", description = "路由管理")\npublic class routerscontroller {\n\n\tprivate final nacosroutedefinitionrepository nacosroutedefinitionrepository;\n\n\t@postmapping\n\t@operation(summary = "保存路由", description = "保存路由")\n\tpublic flux<boolean> saverouter() {\n\t\treturn nacosroutedefinitionrepository.saverouters();\n\t}\n\n\t@deletemapping\n\t@operation(summary = "删除路由", description = "删除路由")\n\tpublic mono<boolean> removerouter() {\n\t\treturn nacosroutedefinitionrepository.removerouters();\n\t}\n\n}\n\n\n注意：考虑到api安全性，账号和密码都需要进行rsa加密，因此，需要写拦截器\n\n/**\n * api过滤器.\n *\n * @author laokou\n */\n@nonnullapi\n@requiredargsconstructor\npublic class apifilter implements webfilter {\n\n\tprivate static final string api_pattern = "/v3/routers/**";\n\n\tprivate final requestmappinghandlermapping requestmappinghandlermapping;\n\n\tprivate final gatewayextproperties gatewayextproperties;\n\n\t@override\n\tpublic mono<void> filter(serverwebexchange exchange, webfilterchain chain) {\n\t\treturn requestmappinghandlermapping.gethandler(exchange)\n\t\t\t.switchifempty(chain.filter(exchange))\n\t\t\t.flatmap(handler -> {\n\t\t\t\tserverhttprequest request = exchange.getrequest();\n\t\t\t\tstring requesturl = reactiverequestutil.getrequesturl(request);\n\t\t\t\tif (reactiverequestutil.pathmatcher(requesturl, api_pattern)) {\n\t\t\t\t\treturn checkusernamepassword(exchange, request, chain);\n\t\t\t\t}\n\t\t\t\treturn chain.filter(exchange);\n\t\t\t});\n\t}\n\n\t/**\n\t * 校验用户名和密码.\n\t * @param exchange 服务网络交换机\n\t * @param request 请求对象\n\t * @param chain 链式过滤器\n\t * @return 响应结果\n\t */\n\tprivate mono<void> checkusernamepassword(serverwebexchange exchange, serverhttprequest request,\n\t\t\t\t\t\t\t\t\t\t\t webfilterchain chain) {\n\t\tstring username = reactiverequestutil.getparamvalue(request, username);\n\t\tstring password = reactiverequestutil.getparamvalue(request, password);\n\t\tif (stringutil.isempty(username)) {\n\t\t\t// 用户名不能为空\n\t\t\treturn reactiveresponseutil.responseok(exchange,\n\t\t\t\tresult.fail(validatorutil.getmessage(oauth2_username_require)));\n\t\t}\n\t\tif (stringutil.isempty(password)) {\n\t\t\t// 密码不能为空\n\t\t\treturn reactiveresponseutil.responseok(exchange,\n\t\t\t\tresult.fail(validatorutil.getmessage(oauth2_password_require)));\n\t\t}\n\t\ttry {\n\t\t\tusername = rsautil.decryptbyprivatekey(username);\n\t\t\tpassword = rsautil.decryptbyprivatekey(password);\n\t\t} catch (exception e) {\n\t\t\t// 用户名或密码错误\n\t\t\treturn reactiveresponseutil.responseok(exchange, result.fail(oauth2_username_password_error));\n\t\t}\n\t\tif (gatewayextproperties.isenabled() && (!objectutil.equals(gatewayextproperties.getpassword(), password)\n\t\t\t|| !objectutil.equals(gatewayextproperties.getusername(), username))) {\n\t\t\t// 用户名或密码错误\n\t\t\treturn reactiveresponseutil.responseok(exchange, result.fail(oauth2_username_password_error));\n\t\t}\n\t\treturn chain.filter(exchange);\n\t}\n\n}\n\n\n考虑到插拔式，所以通过注解形式装配\n\n/**\n * 认证开关注解.\n *\n * @author laokou\n */\n@documented\n@target(elementtype.type)\n@retention(retentionpolicy.runtime)\n@import(apifilter.class)\npublic @interface enableauth {\n\n}\n\n\n开启api接口认证\n\n\n@enableauth\n@springbootapplication\npublic class gatewayapp {\n\n\tpublic static void main(string[] args) {\n\t\tnew springapplicationbuilder(gatewayapp.class).web(webapplicationtype.reactive).run(args);\n\t}\n\n}\n\n\n\n# 负载均衡\n\n因为需要多版本发布api接口，所以，需要对nacos负载均衡重写，采用的方式就是全路径覆盖源码\n\n/**\n * nacos路由负载均衡.\n * {@link com.alibaba.cloud.nacos.loadbalancer.nacosloadbalancerclientconfiguration}\n * {@link org.springframework.cloud.loadbalancer.core.roundrobinloadbalancer}\n *\n * @author xudaojie\n * @author laokou\n * @since 2021.1\n */\n@slf4j\npublic class nacosloadbalancer implements reactorserviceinstanceloadbalancer {\n\n\t/**\n\t * 优雅停机url.\n\t */\n\tpublic static final string graceful_shutdown_url = "/graceful-shutdown";\n\n\t/**\n\t * nacos集群配置.\n\t */\n\tprivate static final string cluster_config = "nacos.cluster";\n\n\t/**\n\t * 版本.\n\t */\n\tprivate static final string version = "version";\n\n\t/**\n\t * 版本号.\n\t */\n\tprivate static final string default_version_value = "v3";\n\n\t/**\n\t * ipv6常量.\n\t */\n\tprivate static final string ipv6_key = "ipv6";\n\n\t/**\n\t * storage local valid ipv6 address, it\'s a flag whether local machine support ipv6\n\t * address stack.\n\t */\n\tpublic static string ipv6;\n\n\t/**\n\t * 服务id.\n\t */\n\tprivate final string serviceid;\n\n\tprivate final objectprovider<serviceinstancelistsupplier> serviceinstancelistsupplierprovider;\n\n\tprivate final nacosdiscoveryproperties nacosdiscoveryproperties;\n\n\tprivate final inetipv6utils inetipv6utils;\n\n\tpublic nacosloadbalancer(objectprovider<serviceinstancelistsupplier> serviceinstancelistsupplierprovider,\n\t\t\t\t\t\t\t string serviceid, nacosdiscoveryproperties nacosdiscoveryproperties, inetipv6utils inetipv6utils) {\n\t\tthis.serviceid = serviceid;\n\t\tthis.inetipv6utils = inetipv6utils;\n\t\tthis.serviceinstancelistsupplierprovider = serviceinstancelistsupplierprovider;\n\t\tthis.nacosdiscoveryproperties = nacosdiscoveryproperties;\n\t}\n\n\t/**\n\t * 初始化.\n\t */\n\t@postconstruct\n\tpublic void init() {\n\t\tstring ip = nacosdiscoveryproperties.getip();\n\t\tif (stringutils.isnotempty(ip)) {\n\t\t\tipv6 = pattern.matches(ipv4_regex, ip) ? nacosdiscoveryproperties.getmetadata().get(ipv6_key) : ip;\n\t\t} else {\n\t\t\tipv6 = inetipv6utils.findipv6address();\n\t\t}\n\t}\n\n\t/**\n\t * 根据ip类型过滤服务实例.\n\t * @param instances 服务实例\n\t * @return 服务实例列表\n\t */\n\tprivate list<serviceinstance> filterinstancebyiptype(list<serviceinstance> instances) {\n\t\tif (stringutils.isnotempty(ipv6)) {\n\t\t\tlist<serviceinstance> ipv6instancelist = new arraylist<>();\n\t\t\tfor (serviceinstance instance : instances) {\n\t\t\t\tif (pattern.matches(ipv4_regex, instance.gethost())) {\n\t\t\t\t\tif (stringutils.isnotempty(instance.getmetadata().get(ipv6_key))) {\n\t\t\t\t\t\tipv6instancelist.add(instance);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tipv6instancelist.add(instance);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// provider has no ipv6, should use ipv4.\n\t\t\tif (ipv6instancelist.isempty()) {\n\t\t\t\treturn instances.stream()\n\t\t\t\t\t.filter(instance -> pattern.matches(ipv4_regex, instance.gethost()))\n\t\t\t\t\t.tolist();\n\t\t\t} else {\n\t\t\t\treturn ipv6instancelist;\n\t\t\t}\n\t\t}\n\t\treturn instances.stream()\n\t\t\t.filter(instance -> pattern.matches(ipv4_regex, instance.gethost()))\n\t\t\t.tolist();\n\t}\n\n\t/**\n\t * 路由负载均衡.\n\t * @param request 请求\n\t * @return 服务实例（响应式）\n\t */\n\t@override\n\tpublic mono<response<serviceinstance>> choose(request request) {\n\t\treturn serviceinstancelistsupplierprovider.getifavailable(noopserviceinstancelistsupplier::new)\n\t\t\t.get(request)\n\t\t\t.next()\n\t\t\t.map(instances -> getinstanceresponse(instances, request));\n\t}\n\n\t/**\n\t * 路由负载均衡.\n\t * @param serviceinstances 服务实例列表\n\t * @param request 请求\n\t * @return 服务实例响应体\n\t */\n\tprivate response<serviceinstance> getinstanceresponse(list<serviceinstance> serviceinstances, request<?> request) {\n\t\tif (serviceinstances.isempty()) {\n\t\t\treturn new emptyresponse();\n\t\t}\n\t\tif (request.getcontext() instanceof requestdatacontext context) {\n\t\t\t// ip优先（优雅停机）\n\t\t\tstring path = context.getclientrequest().geturl().getpath();\n\t\t\thttpheaders headers = context.getclientrequest().getheaders();\n\t\t\tif (reactiverequestutil.pathmatcher(httpmethod.get.name(), path,\n\t\t\t\tmap.of(httpmethod.get.name(), collections.singleton(graceful_shutdown_url)))) {\n\t\t\t\tserviceinstance serviceinstance = serviceinstances.stream()\n\t\t\t\t\t.filter(instance -> match(instance, headers))\n\t\t\t\t\t.findfirst()\n\t\t\t\t\t.orelse(null);\n\t\t\t\tif (objectutil.isnotnull(serviceinstance)) {\n\t\t\t\t\treturn new defaultresponse(serviceinstance);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 服务灰度路由\n\t\t\tif (isgrayrouter(headers)) {\n\t\t\t\tstring version = regexutil.getregexvalue(path, url_version_regex);\n\t\t\t\tif (stringutils.isnotempty(version)) {\n\t\t\t\t\tserviceinstances = serviceinstances.stream()\n\t\t\t\t\t\t.filter(item -> item.getmetadata().getordefault(version, default_version_value).equals(version))\n\t\t\t\t\t\t.tolist();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn getinstanceresponse(serviceinstances);\n\t}\n\n\t/**\n\t * 服务实例响应.\n\t * @param serviceinstances 服务实例\n\t * @return 响应结果\n\t */\n\tprivate response<serviceinstance> getinstanceresponse(list<serviceinstance> serviceinstances) {\n\t\tif (serviceinstances.isempty()) {\n\t\t\tlog.error("no servers available for service: {}", this.serviceid);\n\t\t\treturn new emptyresponse();\n\t\t}\n\t\ttry {\n\t\t\tstring clustername = this.nacosdiscoveryproperties.getclustername();\n\t\t\tlist<serviceinstance> instancestochoose = serviceinstances;\n\t\t\tif (stringutils.isnotblank(clustername)) {\n\t\t\t\tlist<serviceinstance> sameclusterinstances = serviceinstances.stream().filter(serviceinstance -> {\n\t\t\t\t\tstring cluster = serviceinstance.getmetadata().get(cluster_config);\n\t\t\t\t\treturn stringutils.equals(cluster, clustername);\n\t\t\t\t}).tolist();\n\t\t\t\tif (!collectionutils.isempty(sameclusterinstances)) {\n\t\t\t\t\tinstancestochoose = sameclusterinstances;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlog.warn("a cross-cluster call occurs，name = {}, clustername = {}, instance = {}", serviceid,\n\t\t\t\t\tclustername, serviceinstances);\n\t\t\t}\n\t\t\tinstancestochoose = this.filterinstancebyiptype(instancestochoose);\n\t\t\t// 路由权重\n\t\t\tserviceinstance instance = nacosbalancer.gethostbyrandomweight3(instancestochoose);\n\t\t\treturn new defaultresponse(instance);\n\t\t} catch (exception e) {\n\t\t\tlog.error("nacosloadbalancer error", e);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * 判断服务灰度路由.\n\t * @param headers 请求头\n\t * @return 判断结果\n\t */\n\tprivate boolean isgrayrouter(httpheaders headers) {\n\t\tstring gray = headers.getfirst(service_gray);\n\t\treturn objectutil.equals(true, gray);\n\t}\n\n\t/**\n\t * 根据ip和端口匹配服务节点.\n\t * @param serviceinstance 服务实例\n\t * @param headers 请求头\n\t * @return 匹配结果\n\t */\n\tprivate boolean match(serviceinstance serviceinstance, httpheaders headers) {\n\t\tstring host = headers.getfirst(service_host);\n\t\tstring port = headers.getfirst(service_port);\n\t\tassert.istrue(stringutil.isnotempty(host), "service-host is empty");\n\t\tassert.istrue(stringutil.isnotempty(port), "service-port is empty");\n\t\treturn objectutil.equals(host, serviceinstance.gethost())\n\t\t\t&& integer.parseint(port) == serviceinstance.getport();\n\t}\n\n}\n\n\n/**\n * {@link serviceinstancelistsupplier} don\'t use cache.<br>\n * <br>\n * 1. loadbalancercache causes information such as the weight of the service instance to\n * be changed without immediate effect.<br>\n * 2. nacos itself supports caching.\n *\n * @author xudaojie\n * @author laokou\n * @since 2021.1\n */\n@configuration(proxybeanmethods = false)\n@conditionalondiscoveryenabled\npublic class nacosloadbalancerclientconfiguration {\n\n\tprivate static final int reactive_service_instance_supplier_order = 183827465;\n\n\t@bean\n\t@conditionalonmissingbean\n\tpublic reactorloadbalancer<serviceinstance> nacosloadbalancer(environment environment,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  loadbalancerclientfactory loadbalancerclientfactory, nacosdiscoveryproperties nacosdiscoveryproperties,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  inetipv6utils inetipv6utils) {\n\t\tstring name = environment.getproperty(loadbalancerclientfactory.property_name);\n\t\treturn new nacosloadbalancer(loadbalancerclientfactory.getlazyprovider(name, serviceinstancelistsupplier.class),\n\t\t\tname, nacosdiscoveryproperties, inetipv6utils);\n\t}\n\n\t@configuration(proxybeanmethods = false)\n\t@conditionalonreactivediscoveryenabled\n\t@order(reactive_service_instance_supplier_order)\n\tpublic static class reactivesupportconfiguration {\n\n\t\t@bean\n\t\t@conditionalonbean(reactivediscoveryclient.class)\n\t\t@conditionalonmissingbean\n\t\t@conditionalonproperty(value = "spring.cloud.loadbalancer.configurations", havingvalue = "default",\n\t\t\tmatchifmissing = true)\n\t\tpublic serviceinstancelistsupplier discoveryclientserviceinstancelistsupplier(\n\t\t\tconfigurableapplicationcontext context) {\n\t\t\treturn serviceinstancelistsupplier.builder().withdiscoveryclient().build(context);\n\t\t}\n\n\t\t@bean\n\t\t@conditionalonbean(reactivediscoveryclient.class)\n\t\t@conditionalonmissingbean\n\t\t@conditionalonproperty(value = "spring.cloud.loadbalancer.configurations", havingvalue = "zone-preference")\n\t\tpublic serviceinstancelistsupplier zonepreferencediscoveryclientserviceinstancelistsupplier(\n\t\t\tconfigurableapplicationcontext context) {\n\t\t\treturn serviceinstancelistsupplier.builder().withdiscoveryclient().withzonepreference().build(context);\n\t\t}\n\n\t}\n\n\t@configuration(proxybeanmethods = false)\n\t@conditionalonblockingdiscoveryenabled\n\t@order(reactive_service_instance_supplier_order + 1)\n\tpublic static class blockingsupportconfiguration {\n\n\t\t@bean\n\t\t@conditionalonbean(discoveryclient.class)\n\t\t@conditionalonmissingbean\n\t\t@conditionalonproperty(value = "spring.cloud.loadbalancer.configurations", havingvalue = "default",\n\t\t\tmatchifmissing = true)\n\t\tpublic serviceinstancelistsupplier discoveryclientserviceinstancelistsupplier(\n\t\t\tconfigurableapplicationcontext context) {\n\t\t\treturn serviceinstancelistsupplier.builder().withblockingdiscoveryclient().build(context);\n\t\t}\n\n\t\t@bean\n\t\t@conditionalonbean(discoveryclient.class)\n\t\t@conditionalonmissingbean\n\t\t@conditionalonproperty(value = "spring.cloud.loadbalancer.configurations", havingvalue = "zone-preference")\n\t\tpublic serviceinstancelistsupplier zonepreferencediscoveryclientserviceinstancelistsupplier(\n\t\t\tconfigurableapplicationcontext context) {\n\t\t\treturn serviceinstancelistsupplier.builder()\n\t\t\t\t.withblockingdiscoveryclient()\n\t\t\t\t.withzonepreference()\n\t\t\t\t.build(context);\n\t\t}\n\n\t}\n\n}\n\n\n我是老寇，我们下次再见啦！',charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"分布式链路跟踪之ELK日志",frontmatter:{title:"分布式链路跟踪之ELK日志",date:"2024-09-01T08:55:50.000Z",permalink:"/pages/fe2754/"},regularPath:"/01.%E6%8C%87%E5%8D%97/05.%E5%90%8E%E7%AB%AF%E6%8C%87%E5%8D%97/07.%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AA%E4%B9%8BELK%E6%97%A5%E5%BF%97.html",relativePath:"01.指南/05.后端指南/07.分布式链路跟踪之ELK日志.md",key:"v-6d08b50b",path:"/pages/fe2754/",headers:[{level:3,title:"服务治理",slug:"服务治理",normalizedTitle:"服务治理",charIndex:54},{level:3,title:"技术栈",slug:"技术栈",normalizedTitle:"技术栈",charIndex:150},{level:4,title:"log4j2",slug:"log4j2",normalizedTitle:"log4j2",charIndex:157},{level:4,title:"kafka",slug:"kafka",normalizedTitle:"kafka",charIndex:420},{level:4,title:"micrometer",slug:"micrometer",normalizedTitle:"micrometer",charIndex:687},{level:4,title:"elasticsearch",slug:"elasticsearch",normalizedTitle:"elasticsearch",charIndex:1862},{level:4,title:"beats",slug:"beats",normalizedTitle:"beats",charIndex:2084},{level:5,title:"filebeat",slug:"filebeat",normalizedTitle:"filebeat",charIndex:2185},{level:4,title:"logstash",slug:"logstash",normalizedTitle:"logstash",charIndex:2256},{level:4,title:"kibana",slug:"kibana",normalizedTitle:"kibana",charIndex:2499},{level:4,title:"Elastic Stack",slug:"elastic-stack",normalizedTitle:"elastic stack",charIndex:2609},{level:3,title:"安装ELK",slug:"安装elk",normalizedTitle:"安装elk",charIndex:2806},{level:3,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:1477},{level:4,title:"log4j2使用",slug:"log4j2使用",normalizedTitle:"log4j2使用",charIndex:4758},{level:4,title:"micrometer使用",slug:"micrometer使用",normalizedTitle:"micrometer使用",charIndex:9577},{level:4,title:"elasticsearch使用",slug:"elasticsearch使用",normalizedTitle:"elasticsearch使用",charIndex:10353},{level:4,title:"logstash使用",slug:"logstash使用",normalizedTitle:"logstash使用",charIndex:12194},{level:4,title:"kibana使用",slug:"kibana使用",normalizedTitle:"kibana使用",charIndex:14756}],headersStr:"服务治理 技术栈 log4j2 kafka micrometer elasticsearch beats filebeat logstash kibana Elastic Stack 安装ELK 使用 log4j2使用 micrometer使用 elasticsearch使用 logstash使用 kibana使用",content:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，讲一讲分布式链路跟踪之ELK日志！\n\n\n# 服务治理\n\n在微服务治理中，最重要的莫过于日志、链路和指标，为什么？因为微服务调用链路错综复杂，服务节点的数量成千上万，所以，基础设施建设重中之重，否则，出现问题，排查将是一大难题。\n\n\n# 技术栈\n\n# log4j2\n\nlog4j2官方地址\n\n像log4j、logback、log4j2都是Java日志记录框架，而slf4j是日志门面，统一日志API，隐藏具体的日志实现。\n\nlog4j2是log4j的升级版，性能卓越，支持异步日志，也是目前性能最好的Java日志记录框架。\n\nlog4j2不会给Java垃圾回收器带来任何负担，这是通过基于 LMAX Disruptor 技术和JVM零GC实现\n\n注意：零gc就是无垃圾回收，log4j2复用字节数组，字符串数组等对象，不需要重复创建，减少不必要的对象创建，从而不触发gc\n\n# kafka\n\nkafka官方地址\n\n什么是事件流处理？\n\n事件流处理是 从事件源实时捕获数据的做法\n\n例如，从数据库，传感器，移动设备实时捕获数据，持久化存储这些这些事件流以供检索、操作和处理。\n\nkafka就是一个事件流处理平台\n\n * 发布（写入）和订阅（读取）事件流，包括连续导入/导出来自其他系统的数据\n * 根据需要持久可靠地存储事件流\n * 在事件发生时（实时）或回顾性地处理事件流\n\nkafka如何工作？\n\nkafka 是一个分布式系统，由服务器和客户端组成，这些服务器和客户端通过高性能 TCP网络协议 通信。\n\n# micrometer\n\nmicrometer官方地址\n\nmicrometer【千分尺】为最流行的可观测性系统在检测客户端提供了一个简单的外观，允许您检测基于JVM的应用程序代码，而不受供应商限制。\n\n注意：Spring Cloud Sleuth 迁移至 Micrometer Tracing\n\nmicrometer是最流行的可观测性工具的应用程序可观测性外观\n\ntracing是提供对跟踪器和跟踪系统报告器的跟踪抽象\n\n注意：tracing官方提供对Brave和OpenTelemetry的桥接，tracing只是一个跟踪抽象，类似slf4j门面，具体的链路跟踪由Brave或OpenTelemetry来实现。\n\n\n<dependencys>\n\t<dependency>\n\t\t<groupId>io.micrometer</groupId>\n\t\t\x3c!-- 集成Brave --\x3e\n\t\t<artifactId>micrometer-tracing-bridge-brave</artifactId>\n\t\t<version>1.3.3</version>\n\t</dependency>\n\t<dependency>\n\t\t<groupId>io.micrometer</groupId>\n\t\t\x3c!-- 集成OpenTelemetry --\x3e\n\t\t<artifactId>micrometer-tracing-bridge-otel</artifactId>\n\t\t<version>1.3.3</version>\n\t</dependency>\n</dependencys>\n\n\nBrave和OpenTelemetry区别？\n\nBrave代码地址\n\nBrave是一个分布式链路跟踪插桩库。通过拦截请求的方式收集时序数据并通过链路标识来关联传播。 通常会将链路跟踪数据发送到Zipkin，也可以使用第三方插件方式发送到其他替代服务。\n\nBrave提供的API，配置选项较少，但其集成比较简单，适合不需要复杂自定义的场景。\n\nBrave主要是围绕Zipkin的生态发展，尽管稳定且成熟，但还是有一定的局限性。\n\n----------------------------------------\n\nOpenTelemetry官方地址\n\nOpenTelemetry是未来的观测标准【本项目就是使用这个标准，来收集指标和链路】。 提供更广泛的API和配置选项，支持更多自定义的操作，适合需要高度可扩展性和灵活性的应用。\n\n可以用它来检测，生成，收集和导出观测数据【指标、日志和跟踪（链路）】，可以用来分析软件的性能和行为。\n\n更重要是该项目是一个活跃且快速发展的项目，并且得到更广泛的行业支持，具有更广泛的社区支持和更丰富的生态系统，蕴盖了多个云供应商和监控工具。\n\n# elasticsearch\n\nelasticsearch官方文档\n\nelasticsearch是一个分布式、RESTFul风格的搜索和数据分析引擎，同时是可扩展的数据存储和矢量数据库，能够应对日益增多的各种用例。\n\n注意：什么是矢量？我个人的理解是对某种事物的特征描述，通过特征描述可以大致还原出整个事物\n\nelasticsearch能够存储海量数据，实现闪电般的搜索速度，精细的相关性调整以及强大的分析能力，并且能够轻松进行规模扩展。\n\n# beats\n\nbeats官方地址\n\nbeats是一个免费且开发的平台，集成了多种单一用途数据采集器。它们从成百上千或成千上万台机器和系统向Logstash 或Elasticsearch发送数据。\n\n# filebeat\n\nfilebeat官方文档\n\nfilebeat是使用go语言开发的，用于转发和汇总日志与文件，让简单的事情不再繁杂。\n\n# logstash\n\nlogstash官方地址\n\nlogstash是一个开源数据收集引擎，具有流水线功能，可以动态接收来自不同数据源的数据，并将数据按照一定的规则进行数据清洗，然后写入对应的目标数据源。\n\n任何类型事件可以通过广泛的input、output、filter插件来进行清洗和转换，丰富的编解码器进一步简化开发。\n\n注意：logstash资源消耗大，占用CPU和内存高，没有消息队列缓存，会有丢失消息的风险，因此，本项目自行写了一个轻量级的服务，用来清洗数据，写入ES。\n\n# kibana\n\nkibana官方文档\n\nkibana是一个用户界面，可让您可视化Elasticsearch数据并管理ElasticStack。\n\n * 搜索文档，分析文档和查找安全漏洞\n * 数据可视化\n * 管理，监控Elastic Stack集群，以及权限控制\n\n# Elastic Stack\n\nElastic Stack的核心产品包括 Elasticsearch、Kibana、Beats 和 Logstash\n\nELK = Elasticsearch + Logstash + Kibana\n\nEFK = Elasticsearch + Filebeat + Logstash + Kibana\n\n\n# 安装ELK\n\n请参考es+kibana安装教程,请一定要使用这个链接\n\nservices:\n\telasticsearch:\n\t\timage: docker.elastic.co/elasticsearch/elasticsearch:8.15.0\n\t\tcontainer_name: elasticsearch\n\t\t# 保持容器在没有守护程序的情况下运行\n\t\ttty: true\n\t\trestart: always\n\t\tprivileged: true\n\t\tports:\n\t\t\t- "9200:9200"\n\t\t\t- "9300:9300"\n\t\tvolumes:\n\t\t\t- ./elasticsearch8/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml\n\t\t\t- ./elasticsearch8/data:/usr/share/elasticsearch/data\n\t\t\t- ./elasticsearch8/logs:/usr/share/elasticsearch/logs\n\t\t\t- ./elasticsearch8/plugins:/usr/share/elasticsearch/plugins\n\t\t\t- ./elasticsearch8/config/certs/elastic-certificates.p12:/usr/share/elasticsearch/config/certs/elastic-certificates.p12\n\t\tenvironment:\n\t\t\t- TZ=Asia/Shanghai\n\t\t\t- ES_JAVA_OPTS=-Xmx1g -Xms1g\n\t\t\t- ELASTIC_PASSWORD=laokou123\n\t\tnetworks:\n\t\t\t- iot_network\n\t\tulimits:\n\t\t\tmemlock:\n\t\t\t\tsoft: -1\n\t\t\t\thard: -1\n\tkibana:\n\t\timage: kibana:8.15.0\n\t\tcontainer_name: kibana\n\t\t# 保持容器在没有守护程序的情况下运行\n\t\ttty: true\n\t\trestart: always\n\t\tprivileged: true\n\t\tenvironment:\n\t\t\t- TZ=Asia/Shanghai\n\t\tports:\n\t\t\t- "5601:5601"\n\t\tvolumes:\n\t\t\t- ./kibana8/config/kibana.yml:/usr/share/kibana/config/kibana.yml\n\t\tnetworks:\n\t\t\t- iot_network\n\t\tdepends_on:\n\t\t\t- elasticsearch\n\t\tdeploy:\n\t\t\tresources:\n\t\t\t\tlimits:\n\t\t\t\t\tcpus: \'0.50\'\n\t\t\t\t\tmemory: 1G\n\nnetworks:\n\tiot_network:\n\t\tdriver: bridge\n\n\nkibana.yaml配置\n\nserver.name: kibana\nserver.host: 0.0.0.0\nserver.port: 5601\nserver.ssl.enabled: false\nelasticsearch.hosts: [ "https://elasticsearch:9200" ]\nmonitoring.ui.container.elasticsearch.enabled: true\nelasticsearch.ssl.verificationMode: none\nelasticsearch.username: "kibana_system"\nelasticsearch.password: "laokou123"\ni18n.locale: zh-CN\n\n\ndocker-compose up -d\n\n\n# 从docker进入Linux系统\ndocker exec -it elasticsearch /bin/bash\n\ncd /usr/share/elasticsearch\n\n# 设置kibana密码\n./bin/elasticsearch-setup-passwords interactive\n# 移除容器，重新启动\ndocker-compose stop elasticsearch kibaba\ndocker-compose rm\n# 重启\ndocker-compose restart elasticsearch kibaba\n\n\n\n# 使用\n\n# log4j2使用\n\n引入依赖\n\n\n<dependencys>\n\t<dependency>\n\t\t<groupId>org.springframework.kafka</groupId>\n\t\t<artifactId>spring-kafka</artifactId>\n\t</dependency>\n\t\x3c!-- log4j2的AsyncLogger时需要包含disruptor --\x3e\n\t<dependency>\n\t\t<groupId>com.lmax</groupId>\n\t\t<artifactId>disruptor</artifactId>\n\t</dependency>\n\t<dependency>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-log4j2</artifactId>\n\t</dependency>\n</dependencys>\n\n\n开启异步日志，请创建log4j2.component.properties\n\nlog4jContextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector\n\n\n注意：请切换至prod环境\n\nlog4j2配置\n\n以auth服务为例\n\n\n<Configuration status="INFO" monitorInterval="5">\n\t\x3c!-- 变量配置 --\x3e\n\t<Properties>\n\t\t\x3c!-- 存放目录 --\x3e\n\t\t<property name="LOG_PATH" value="/opt/auth"/>\n\t\t\x3c!-- 日志文件大小 --\x3e\n\t\t<property name="LOG_ROLL_SIZE" value="1 GB"/>\n\t\t\x3c!-- 服务名称 --\x3e\n\t\t<property name="SERVICE_ID" value="laokou-auth"/>\n\t\t\x3c!-- -Dlog4j.skipJansi=false --\x3e\n\t\t\x3c!-- 日志格式 --\x3e\n\t\t\x3c!--\n\t\t\t%d 日期\n\t\t\t%t 线程\n\n\t\t\t对于系统参数，使用${sys:xxx}即可，例如读取-Dserver.port=1111，即${sys:server.port}\n\t\t\tspanId  => %X{spanId}\n\t\t\ttraceId => %X{traceId}\n\t\t--\x3e\n\t\t<property name="LOG_CONSOLE_PATTERN"\n\t\t\t\t  value="%d{yyyy-MM-dd HH:mm:ss.SSS} ---\x3e [${SERVICE_ID} - ${sys:address:-}] - [%X{traceId}] - [%X{spanId}] - [ %style{%-5level}{red}] - [%t] - %logger : %msg%n"/>\n\t\t<property name="LOG_FILE_PATTERN"\n\t\t\t\t  value="%d{yyyy-MM-dd HH:mm:ss.SSS} ---\x3e [${SERVICE_ID} - ${sys:address:-}] - [%X{traceId}] - [%X{spanId}] - [ %-5level] - [%t] - %logger : %msg%n"/>\n\t\t\x3c!-- 日志保留30天 --\x3e\n\t\t<property name="LOG_DAYS" value="30"/>\n\t\t\x3c!-- 1天滚动一次 --\x3e\n\t\t<property name="LOG_INTERVAL" value="1"/>\n\t</Properties>\n\t<Appenders>\n\t\t\x3c!-- 控制台输出 --\x3e\n\t\t<Console name="console" target="SYSTEM_OUT">\n\t\t\t<PatternLayout pattern="${LOG_CONSOLE_PATTERN}"/>\n\t\t</Console>\n\t\t<RollingRandomAccessFile name="file" fileName="${LOG_PATH}/${SERVICE_ID}.log"\n\t\t\t\t\t\t\t\t filePattern="${LOG_PATH}/%d{yyyyMMdd}/${SERVICE_ID}_%d{yyyy-MM-dd}.%i.log.gz"\n\t\t\t\t\t\t\t\t immediateFlush="false">\n\t\t\t<Filters>\n\t\t\t\t<ThresholdFilter level="ERROR" onMatch="ACCEPT" onMismatch="DENY"/>\n\t\t\t</Filters>\n\t\t\t<PatternLayout pattern="${LOG_FILE_PATTERN}"/>\n\t\t\t<Policies>\n\t\t\t\t<TimeBasedTriggeringPolicy interval="${LOG_INTERVAL}"/>\n\t\t\t\t<SizeBasedTriggeringPolicy size="${LOG_ROLL_SIZE}"/>\n\t\t\t</Policies>\n\t\t\t<DefaultRolloverStrategy max="${LOG_DAYS}"/>\n\t\t</RollingRandomAccessFile>\n\t\t<RollingRandomAccessFile name="failover_kafka" fileName="${LOG_PATH}/${SERVICE_ID}_kafka.log"\n\t\t\t\t\t\t\t\t filePattern="${LOG_PATH}/%d{yyyyMMdd}/${SERVICE_ID}_kafka_%d{yyyy-MM-dd}.%i.log.gz"\n\t\t\t\t\t\t\t\t immediateFlush="false">\n\t\t\t<Filters>\n\t\t\t\t<ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>\n\t\t\t</Filters>\n\t\t\t<PatternLayout pattern="${LOG_FILE_PATTERN}"/>\n\t\t\t<Policies>\n\t\t\t\t<TimeBasedTriggeringPolicy interval="${LOG_INTERVAL}"/>\n\t\t\t\t<SizeBasedTriggeringPolicy size="${LOG_ROLL_SIZE}"/>\n\t\t\t</Policies>\n\t\t\t<DefaultRolloverStrategy max="${LOG_DAYS}"/>\n\t\t</RollingRandomAccessFile>\n\t\t<Failover name="failover" primary="kafka" retryIntervalSeconds="600">\n\t\t\t<Failovers>\n\t\t\t\t<AppenderRef ref="failover_kafka"/>\n\t\t\t</Failovers>\n\t\t</Failover>\n\t\t<Async name="async_file" bufferSize="2000" blocking="false">\n\t\t\t<AppenderRef ref="file"/>\n\t\t</Async>\n\t\t<Async name="async_kafka" bufferSize="2000" blocking="false">\n\t\t\t<AppenderRef ref="failover"/>\n\t\t</Async>\n\t\t<Kafka name="kafka" topic="trace-log" ignoreExceptions="false">\n\t\t\t<PatternLayout>\n\t\t\t\t\x3c!--\n\n\t\t\t\t   注意：真实的生产环境，日志打印的内容是五花八门，日志内容会出现一些莫名其他的特殊符号，导致json无法反序列化\n\t\t\t\t   因此，可以利用Pattern Layout 提供的标签enc，enc支持4种转义，HTML/XML/JSON/CRLF，默认进行HTML转义\n\t\t\t\t  目前，只对JSON处理，即%enc{%m}{JSON} => {"msg":"%enc{%m}{JSON}"}\n\n\t\t\t\t--\x3e\n\t\t\t\t<pattern>\n\t\t\t\t\t{\n\t\t\t\t\t"serviceId":"${SERVICE_ID}",\n\t\t\t\t\t"profile":"prod",\n\t\t\t\t\t"dateTime":"%d{yyyy-MM-dd HH:mm:ss.SSS}",\n\t\t\t\t\t"traceId":"%X{traceId}",\n\t\t\t\t\t"spanId":"%X{spanId}",\n\t\t\t\t\t"address":"${sys:address:-}",\n\t\t\t\t\t"level":"%-5level",\n\t\t\t\t\t"thread":"%thread",\n\t\t\t\t\t"logger":"%logger",\n\t\t\t\t\t"msg":"%enc{%m}{JSON}"\n\t\t\t\t\t}\n\t\t\t\t</pattern>\n\t\t\t</PatternLayout>\n\t\t\t\x3c!-- 生产者发送消息最大阻塞时间，单位为毫秒，生产者阻塞超过2秒，则抛出异常并中断发送【生产者内部缓冲区已满或元数据不可用，send()会阻塞等待】 --\x3e\n\t\t\t<Property name="max.block.ms">2000</Property>\n\t\t\t\x3c!-- 客户端发送请求到kafka broker超时时间，单位为毫秒，2秒内没有从kafka broker收到响应，则认为请求失败则抛出异常 --\x3e\n\t\t\t<Property name="request.timeout.ms">2000</Property>\n\t\t\t<Property name="bootstrap.servers">kafka:9092</Property>\n\t\t</Kafka>\n\t</Appenders>\n\t\x3c!--\n\t \tadditivity      => 需不需要打印此logger继承的父logger，false只打印当前logger，true继续打印上一层logger，直至root\n\t \tincludeLocation => 显示文件行数，方法名等信息，true显示，false不显示，可以减少日志输出的体积，加快日志写入速度\n\t --\x3e\n\t<Loggers>\n\t\t<AsyncLogger name="org.laokou" additivity="FALSE" includeLocation="FALSE" level="INFO">\n\t\t\t<AppenderRef ref="async_kafka"/>\n\t\t</AsyncLogger>\n\t\t<AsyncRoot level="ERROR" additivity="FALSE" includeLocation="FALSE">\n\t\t\t<AppenderRef ref="console"/>\n\t\t\t<AppenderRef ref="async_file"/>\n\t\t</AsyncRoot>\n\t</Loggers>\n</Configuration>\n\n\n# micrometer使用\n\n依赖\n\n\n<dependencys>\n\t<dependency>\n\t\t<groupId>io.micrometer</groupId>\n\t\t<artifactId>micrometer-tracing-bridge-otel</artifactId>\n\t</dependency>\n\t\x3c!-- openfeign集成micrometer --\x3e\n\t<dependency>\n\t\t<groupId>io.github.openfeign</groupId>\n\t\t<artifactId>feign-micrometer</artifactId>\n\t</dependency>\n</dependencys>\n\n\n\n@Component\n@RequiredArgsConstructor\npublic class TraceUtil {\n\n\tprivate final Tracer tracer;\n\n\tpublic String getTraceId() {\n\t\tTraceContext context = getContext();\n\t\treturn ObjectUtil.isNull(context) ? "" : context.traceId();\n\t}\n\n\tpublic String getSpanId() {\n\t\tTraceContext context = getContext();\n\t\treturn ObjectUtil.isNull(context) ? "" : context.spanId();\n\t}\n\n\tprivate TraceContext getContext() {\n\t\treturn tracer.currentTraceContext().context();\n\t}\n\n}\n\n\n# elasticsearch使用\n\n引入依赖\n\n\n<dependencies>\n\t<dependency>\n\t\t<groupId>co.elastic.clients</groupId>\n\t\t<artifactId>elasticsearch-java</artifactId>\n\t\t<exclusions>\n\t\t\t<exclusion>\n\t\t\t\t<groupId>org.apache.httpcomponents</groupId>\n\t\t\t\t<artifactId>httpclient</artifactId>\n\t\t\t</exclusion>\n\t\t</exclusions>\n\t</dependency>\n\t<dependency>\n\t\t<groupId>org.apache.httpcomponents</groupId>\n\t\t<artifactId>httpclient</artifactId>\n\t</dependency>\n</dependencies>\n\n\n异步创建索引和批量同步索引【详情请查看本项目源码，laokou-common-elasticsearch】\n\n\n@Slf4j\n@Component\n@RequiredArgsConstructor\npublic class ElasticsearchTemplate {\n\n\tprivate final ElasticsearchAsyncClient elasticsearchAsyncClient;\n\n\tpublic <TDocument> CompletableFuture<Boolean> asyncCreateIndex(String name, String alias, Class<TDocument> clazz) {\n\t\treturn asyncExist(List.of(name)).thenApplyAsync(resp -> {\n\t\t\tif (resp) {\n\t\t\t\tlog.info("索引：{} -> 创建索引失败，索引已存在", name);\n\t\t\t\treturn Boolean.FALSE;\n\t\t\t}\n\t\t\treturn Boolean.TRUE;\n\t\t}).thenApplyAsync(resp -> {\n\t\t\tif (resp) {\n\t\t\t\tDocument document = convert(name, alias, clazz);\n\t\t\t\telasticsearchAsyncClient.indices().create(getCreateIndexRequest(document)).thenApplyAsync(response -> {\n\t\t\t\t\tif (response.acknowledged()) {\n\t\t\t\t\t\tlog.info("索引：{} -> 创建索引成功", name);\n\t\t\t\t\t\treturn Boolean.TRUE;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlog.info("索引：{} -> 创建索引失败", name);\n\t\t\t\t\t\treturn Boolean.FALSE;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn Boolean.FALSE;\n\t\t});\n\t}\n\n\tpublic CompletableFuture<Boolean> asyncBulkCreateDocument(String index, Map<String, Object> map) {\n\t\treturn elasticsearchAsyncClient\n\t\t\t.bulk(bulk -> bulk.index(index).refresh(Refresh.True).operations(getBulkOperations(map)))\n\t\t\t.thenApplyAsync(resp -> {\n\t\t\t\tif (resp.errors()) {\n\t\t\t\t\tlog.info("索引：{} -> 异步批量同步索引失败", index);\n\t\t\t\t\treturn Boolean.FALSE;\n\t\t\t\t} else {\n\t\t\t\t\tlog.info("索引：{} -> 异步批量同步索引成功", index);\n\t\t\t\t\treturn Boolean.TRUE;\n\t\t\t\t}\n\t\t\t});\n\t}\n\n}\n\n\n# logstash使用\n\n注意：logstash是用的本项目自己搞的轻量级日志收集引擎\n\n核心源码\n\n\n@Slf4j\n@Component\n@RequiredArgsConstructor\npublic class TraceHandler {\n\n\tprivate static final String TRACE = "trace_log";\n\n\tprivate final ElasticsearchTemplate elasticsearchTemplate;\n\n\t@KafkaListener(topics = "trace_log", groupId = "trace_consumer_group")\n\tpublic void kafkaConsumer(List<String> messages, Acknowledgment ack) {\n\t\ttry {\n\t\t\tMap<String, Object> dataMap = messages.stream()\n\t\t\t\t.map(this::getTraceIndex)\n\t\t\t\t.filter(Objects::nonNull)\n\t\t\t\t.toList()\n\t\t\t\t.stream()\n\t\t\t\t.collect(Collectors.toMap(TraceIndex::getId, traceIndex -> traceIndex));\n\t\t\tif (MapUtil.isNotEmpty(dataMap)) {\n\t\t\t\telasticsearchTemplate.asyncCreateIndex(getIndexName(), TRACE, TraceIndex.class)\n\t\t\t\t\t.thenAcceptAsync(res -> elasticsearchTemplate.asyncBulkCreateDocument(getIndexName(), dataMap));\n\t\t\t}\n\t\t} catch (Throwable e) {\n\t\t\tlog.error("分布式链路写入失败，错误信息：{}", e.getMessage());\n\t\t} finally {\n\t\t\tack.acknowledge();\n\t\t}\n\t}\n\n\tprivate TraceIndex getTraceIndex(String str) {\n\t\ttry {\n\t\t\tTraceIndex traceIndex = JacksonUtil.toBean(str, TraceIndex.class);\n\t\t\tString traceId = traceIndex.getTraceId();\n\t\t\tString spanId = traceIndex.getSpanId();\n\t\t\tif (isTrace(traceId, spanId)) {\n\t\t\t\ttraceIndex.setId(String.valueOf(IdGenerator.defaultSnowflakeId()));\n\t\t\t\treturn traceIndex;\n\t\t\t}\n\t\t} catch (Exception ex) {\n\t\t\tlog.error("分布式链路日志JSON转换失败，错误信息：{}", ex.getMessage());\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate boolean isTrace(String traceId, String spanId) {\n\t\treturn isTrace(traceId) && isTrace(spanId);\n\t}\n\n\tprivate boolean isTrace(String str) {\n\t\treturn StringUtil.isNotEmpty(str) && !str.startsWith("${") && !str.endsWith("}");\n\t}\n\n\tprivate String getIndexName() {\n\t\treturn TRACE + "_" + DateUtil.format(DateUtil.nowDate(), "yyyyMMdd");\n\t}\n\n\t@Data\n\t@Index(setting = @Setting(refreshInterval = "-1"))\n\tpublic final static class TraceIndex implements Serializable {\n\n\t\t@Field(type = Type.LONG)\n\t\tprivate String id;\n\n\t\t@Field(type = Type.KEYWORD)\n\t\tprivate String serviceId;\n\n\t\t@Field(type = Type.KEYWORD)\n\t\tprivate String profile;\n\n\t\t@Field(type = Type.DATE, format = "yyyy-MM-dd HH:mm:ss.SSS")\n\t\tprivate String dateTime;\n\n\t\t@Field(type = Type.KEYWORD, index = true)\n\t\tprivate String traceId;\n\n\t\t@Field(type = Type.KEYWORD, index = true)\n\t\tprivate String spanId;\n\n\t\t@Field(type = Type.KEYWORD)\n\t\tprivate String address;\n\n\t\t@Field(type = Type.KEYWORD)\n\t\tprivate String level;\n\n\t\t@Field(type = Type.KEYWORD)\n\t\tprivate String thread;\n\n\t\t@Field(type = Type.KEYWORD)\n\t\tprivate String logger;\n\n\t\t@Field(type = Type.KEYWORD)\n\t\tprivate String msg;\n\n\t}\n\n}\n\n\n# kibana使用\n\n1.启动nacos/auth/gateway/logstash\n\n2.运行auth测试用例\n\n3.打开kibana控制台\n\n输入设置好的账号密码 => elastic/laokou123\n\n补充\n\n本项目使用分布链路跟踪，只需要引入依赖\n\n\n<dependency>\n\t<groupId>org.laokou</groupId>\n\t<artifactId>laokou-common-trace</artifactId>\n</dependency>\n\n\n至此，大功告成，恭喜你看完分布式链路跟踪之ELK日志，你学废了码？\n\n我是老寇，我们下次再见啦！',normalizedContent:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，讲一讲分布式链路跟踪之elk日志！\n\n\n# 服务治理\n\n在微服务治理中，最重要的莫过于日志、链路和指标，为什么？因为微服务调用链路错综复杂，服务节点的数量成千上万，所以，基础设施建设重中之重，否则，出现问题，排查将是一大难题。\n\n\n# 技术栈\n\n# log4j2\n\nlog4j2官方地址\n\n像log4j、logback、log4j2都是java日志记录框架，而slf4j是日志门面，统一日志api，隐藏具体的日志实现。\n\nlog4j2是log4j的升级版，性能卓越，支持异步日志，也是目前性能最好的java日志记录框架。\n\nlog4j2不会给java垃圾回收器带来任何负担，这是通过基于 lmax disruptor 技术和jvm零gc实现\n\n注意：零gc就是无垃圾回收，log4j2复用字节数组，字符串数组等对象，不需要重复创建，减少不必要的对象创建，从而不触发gc\n\n# kafka\n\nkafka官方地址\n\n什么是事件流处理？\n\n事件流处理是 从事件源实时捕获数据的做法\n\n例如，从数据库，传感器，移动设备实时捕获数据，持久化存储这些这些事件流以供检索、操作和处理。\n\nkafka就是一个事件流处理平台\n\n * 发布（写入）和订阅（读取）事件流，包括连续导入/导出来自其他系统的数据\n * 根据需要持久可靠地存储事件流\n * 在事件发生时（实时）或回顾性地处理事件流\n\nkafka如何工作？\n\nkafka 是一个分布式系统，由服务器和客户端组成，这些服务器和客户端通过高性能 tcp网络协议 通信。\n\n# micrometer\n\nmicrometer官方地址\n\nmicrometer【千分尺】为最流行的可观测性系统在检测客户端提供了一个简单的外观，允许您检测基于jvm的应用程序代码，而不受供应商限制。\n\n注意：spring cloud sleuth 迁移至 micrometer tracing\n\nmicrometer是最流行的可观测性工具的应用程序可观测性外观\n\ntracing是提供对跟踪器和跟踪系统报告器的跟踪抽象\n\n注意：tracing官方提供对brave和opentelemetry的桥接，tracing只是一个跟踪抽象，类似slf4j门面，具体的链路跟踪由brave或opentelemetry来实现。\n\n\n<dependencys>\n\t<dependency>\n\t\t<groupid>io.micrometer</groupid>\n\t\t\x3c!-- 集成brave --\x3e\n\t\t<artifactid>micrometer-tracing-bridge-brave</artifactid>\n\t\t<version>1.3.3</version>\n\t</dependency>\n\t<dependency>\n\t\t<groupid>io.micrometer</groupid>\n\t\t\x3c!-- 集成opentelemetry --\x3e\n\t\t<artifactid>micrometer-tracing-bridge-otel</artifactid>\n\t\t<version>1.3.3</version>\n\t</dependency>\n</dependencys>\n\n\nbrave和opentelemetry区别？\n\nbrave代码地址\n\nbrave是一个分布式链路跟踪插桩库。通过拦截请求的方式收集时序数据并通过链路标识来关联传播。 通常会将链路跟踪数据发送到zipkin，也可以使用第三方插件方式发送到其他替代服务。\n\nbrave提供的api，配置选项较少，但其集成比较简单，适合不需要复杂自定义的场景。\n\nbrave主要是围绕zipkin的生态发展，尽管稳定且成熟，但还是有一定的局限性。\n\n----------------------------------------\n\nopentelemetry官方地址\n\nopentelemetry是未来的观测标准【本项目就是使用这个标准，来收集指标和链路】。 提供更广泛的api和配置选项，支持更多自定义的操作，适合需要高度可扩展性和灵活性的应用。\n\n可以用它来检测，生成，收集和导出观测数据【指标、日志和跟踪（链路）】，可以用来分析软件的性能和行为。\n\n更重要是该项目是一个活跃且快速发展的项目，并且得到更广泛的行业支持，具有更广泛的社区支持和更丰富的生态系统，蕴盖了多个云供应商和监控工具。\n\n# elasticsearch\n\nelasticsearch官方文档\n\nelasticsearch是一个分布式、restful风格的搜索和数据分析引擎，同时是可扩展的数据存储和矢量数据库，能够应对日益增多的各种用例。\n\n注意：什么是矢量？我个人的理解是对某种事物的特征描述，通过特征描述可以大致还原出整个事物\n\nelasticsearch能够存储海量数据，实现闪电般的搜索速度，精细的相关性调整以及强大的分析能力，并且能够轻松进行规模扩展。\n\n# beats\n\nbeats官方地址\n\nbeats是一个免费且开发的平台，集成了多种单一用途数据采集器。它们从成百上千或成千上万台机器和系统向logstash 或elasticsearch发送数据。\n\n# filebeat\n\nfilebeat官方文档\n\nfilebeat是使用go语言开发的，用于转发和汇总日志与文件，让简单的事情不再繁杂。\n\n# logstash\n\nlogstash官方地址\n\nlogstash是一个开源数据收集引擎，具有流水线功能，可以动态接收来自不同数据源的数据，并将数据按照一定的规则进行数据清洗，然后写入对应的目标数据源。\n\n任何类型事件可以通过广泛的input、output、filter插件来进行清洗和转换，丰富的编解码器进一步简化开发。\n\n注意：logstash资源消耗大，占用cpu和内存高，没有消息队列缓存，会有丢失消息的风险，因此，本项目自行写了一个轻量级的服务，用来清洗数据，写入es。\n\n# kibana\n\nkibana官方文档\n\nkibana是一个用户界面，可让您可视化elasticsearch数据并管理elasticstack。\n\n * 搜索文档，分析文档和查找安全漏洞\n * 数据可视化\n * 管理，监控elastic stack集群，以及权限控制\n\n# elastic stack\n\nelastic stack的核心产品包括 elasticsearch、kibana、beats 和 logstash\n\nelk = elasticsearch + logstash + kibana\n\nefk = elasticsearch + filebeat + logstash + kibana\n\n\n# 安装elk\n\n请参考es+kibana安装教程,请一定要使用这个链接\n\nservices:\n\telasticsearch:\n\t\timage: docker.elastic.co/elasticsearch/elasticsearch:8.15.0\n\t\tcontainer_name: elasticsearch\n\t\t# 保持容器在没有守护程序的情况下运行\n\t\ttty: true\n\t\trestart: always\n\t\tprivileged: true\n\t\tports:\n\t\t\t- "9200:9200"\n\t\t\t- "9300:9300"\n\t\tvolumes:\n\t\t\t- ./elasticsearch8/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml\n\t\t\t- ./elasticsearch8/data:/usr/share/elasticsearch/data\n\t\t\t- ./elasticsearch8/logs:/usr/share/elasticsearch/logs\n\t\t\t- ./elasticsearch8/plugins:/usr/share/elasticsearch/plugins\n\t\t\t- ./elasticsearch8/config/certs/elastic-certificates.p12:/usr/share/elasticsearch/config/certs/elastic-certificates.p12\n\t\tenvironment:\n\t\t\t- tz=asia/shanghai\n\t\t\t- es_java_opts=-xmx1g -xms1g\n\t\t\t- elastic_password=laokou123\n\t\tnetworks:\n\t\t\t- iot_network\n\t\tulimits:\n\t\t\tmemlock:\n\t\t\t\tsoft: -1\n\t\t\t\thard: -1\n\tkibana:\n\t\timage: kibana:8.15.0\n\t\tcontainer_name: kibana\n\t\t# 保持容器在没有守护程序的情况下运行\n\t\ttty: true\n\t\trestart: always\n\t\tprivileged: true\n\t\tenvironment:\n\t\t\t- tz=asia/shanghai\n\t\tports:\n\t\t\t- "5601:5601"\n\t\tvolumes:\n\t\t\t- ./kibana8/config/kibana.yml:/usr/share/kibana/config/kibana.yml\n\t\tnetworks:\n\t\t\t- iot_network\n\t\tdepends_on:\n\t\t\t- elasticsearch\n\t\tdeploy:\n\t\t\tresources:\n\t\t\t\tlimits:\n\t\t\t\t\tcpus: \'0.50\'\n\t\t\t\t\tmemory: 1g\n\nnetworks:\n\tiot_network:\n\t\tdriver: bridge\n\n\nkibana.yaml配置\n\nserver.name: kibana\nserver.host: 0.0.0.0\nserver.port: 5601\nserver.ssl.enabled: false\nelasticsearch.hosts: [ "https://elasticsearch:9200" ]\nmonitoring.ui.container.elasticsearch.enabled: true\nelasticsearch.ssl.verificationmode: none\nelasticsearch.username: "kibana_system"\nelasticsearch.password: "laokou123"\ni18n.locale: zh-cn\n\n\ndocker-compose up -d\n\n\n# 从docker进入linux系统\ndocker exec -it elasticsearch /bin/bash\n\ncd /usr/share/elasticsearch\n\n# 设置kibana密码\n./bin/elasticsearch-setup-passwords interactive\n# 移除容器，重新启动\ndocker-compose stop elasticsearch kibaba\ndocker-compose rm\n# 重启\ndocker-compose restart elasticsearch kibaba\n\n\n\n# 使用\n\n# log4j2使用\n\n引入依赖\n\n\n<dependencys>\n\t<dependency>\n\t\t<groupid>org.springframework.kafka</groupid>\n\t\t<artifactid>spring-kafka</artifactid>\n\t</dependency>\n\t\x3c!-- log4j2的asynclogger时需要包含disruptor --\x3e\n\t<dependency>\n\t\t<groupid>com.lmax</groupid>\n\t\t<artifactid>disruptor</artifactid>\n\t</dependency>\n\t<dependency>\n\t\t<groupid>org.springframework.boot</groupid>\n\t\t<artifactid>spring-boot-starter-log4j2</artifactid>\n\t</dependency>\n</dependencys>\n\n\n开启异步日志，请创建log4j2.component.properties\n\nlog4jcontextselector=org.apache.logging.log4j.core.async.asyncloggercontextselector\n\n\n注意：请切换至prod环境\n\nlog4j2配置\n\n以auth服务为例\n\n\n<configuration status="info" monitorinterval="5">\n\t\x3c!-- 变量配置 --\x3e\n\t<properties>\n\t\t\x3c!-- 存放目录 --\x3e\n\t\t<property name="log_path" value="/opt/auth"/>\n\t\t\x3c!-- 日志文件大小 --\x3e\n\t\t<property name="log_roll_size" value="1 gb"/>\n\t\t\x3c!-- 服务名称 --\x3e\n\t\t<property name="service_id" value="laokou-auth"/>\n\t\t\x3c!-- -dlog4j.skipjansi=false --\x3e\n\t\t\x3c!-- 日志格式 --\x3e\n\t\t\x3c!--\n\t\t\t%d 日期\n\t\t\t%t 线程\n\n\t\t\t对于系统参数，使用${sys:xxx}即可，例如读取-dserver.port=1111，即${sys:server.port}\n\t\t\tspanid  => %x{spanid}\n\t\t\ttraceid => %x{traceid}\n\t\t--\x3e\n\t\t<property name="log_console_pattern"\n\t\t\t\t  value="%d{yyyy-mm-dd hh:mm:ss.sss} ---\x3e [${service_id} - ${sys:address:-}] - [%x{traceid}] - [%x{spanid}] - [ %style{%-5level}{red}] - [%t] - %logger : %msg%n"/>\n\t\t<property name="log_file_pattern"\n\t\t\t\t  value="%d{yyyy-mm-dd hh:mm:ss.sss} ---\x3e [${service_id} - ${sys:address:-}] - [%x{traceid}] - [%x{spanid}] - [ %-5level] - [%t] - %logger : %msg%n"/>\n\t\t\x3c!-- 日志保留30天 --\x3e\n\t\t<property name="log_days" value="30"/>\n\t\t\x3c!-- 1天滚动一次 --\x3e\n\t\t<property name="log_interval" value="1"/>\n\t</properties>\n\t<appenders>\n\t\t\x3c!-- 控制台输出 --\x3e\n\t\t<console name="console" target="system_out">\n\t\t\t<patternlayout pattern="${log_console_pattern}"/>\n\t\t</console>\n\t\t<rollingrandomaccessfile name="file" filename="${log_path}/${service_id}.log"\n\t\t\t\t\t\t\t\t filepattern="${log_path}/%d{yyyymmdd}/${service_id}_%d{yyyy-mm-dd}.%i.log.gz"\n\t\t\t\t\t\t\t\t immediateflush="false">\n\t\t\t<filters>\n\t\t\t\t<thresholdfilter level="error" onmatch="accept" onmismatch="deny"/>\n\t\t\t</filters>\n\t\t\t<patternlayout pattern="${log_file_pattern}"/>\n\t\t\t<policies>\n\t\t\t\t<timebasedtriggeringpolicy interval="${log_interval}"/>\n\t\t\t\t<sizebasedtriggeringpolicy size="${log_roll_size}"/>\n\t\t\t</policies>\n\t\t\t<defaultrolloverstrategy max="${log_days}"/>\n\t\t</rollingrandomaccessfile>\n\t\t<rollingrandomaccessfile name="failover_kafka" filename="${log_path}/${service_id}_kafka.log"\n\t\t\t\t\t\t\t\t filepattern="${log_path}/%d{yyyymmdd}/${service_id}_kafka_%d{yyyy-mm-dd}.%i.log.gz"\n\t\t\t\t\t\t\t\t immediateflush="false">\n\t\t\t<filters>\n\t\t\t\t<thresholdfilter level="info" onmatch="accept" onmismatch="deny"/>\n\t\t\t</filters>\n\t\t\t<patternlayout pattern="${log_file_pattern}"/>\n\t\t\t<policies>\n\t\t\t\t<timebasedtriggeringpolicy interval="${log_interval}"/>\n\t\t\t\t<sizebasedtriggeringpolicy size="${log_roll_size}"/>\n\t\t\t</policies>\n\t\t\t<defaultrolloverstrategy max="${log_days}"/>\n\t\t</rollingrandomaccessfile>\n\t\t<failover name="failover" primary="kafka" retryintervalseconds="600">\n\t\t\t<failovers>\n\t\t\t\t<appenderref ref="failover_kafka"/>\n\t\t\t</failovers>\n\t\t</failover>\n\t\t<async name="async_file" buffersize="2000" blocking="false">\n\t\t\t<appenderref ref="file"/>\n\t\t</async>\n\t\t<async name="async_kafka" buffersize="2000" blocking="false">\n\t\t\t<appenderref ref="failover"/>\n\t\t</async>\n\t\t<kafka name="kafka" topic="trace-log" ignoreexceptions="false">\n\t\t\t<patternlayout>\n\t\t\t\t\x3c!--\n\n\t\t\t\t   注意：真实的生产环境，日志打印的内容是五花八门，日志内容会出现一些莫名其他的特殊符号，导致json无法反序列化\n\t\t\t\t   因此，可以利用pattern layout 提供的标签enc，enc支持4种转义，html/xml/json/crlf，默认进行html转义\n\t\t\t\t  目前，只对json处理，即%enc{%m}{json} => {"msg":"%enc{%m}{json}"}\n\n\t\t\t\t--\x3e\n\t\t\t\t<pattern>\n\t\t\t\t\t{\n\t\t\t\t\t"serviceid":"${service_id}",\n\t\t\t\t\t"profile":"prod",\n\t\t\t\t\t"datetime":"%d{yyyy-mm-dd hh:mm:ss.sss}",\n\t\t\t\t\t"traceid":"%x{traceid}",\n\t\t\t\t\t"spanid":"%x{spanid}",\n\t\t\t\t\t"address":"${sys:address:-}",\n\t\t\t\t\t"level":"%-5level",\n\t\t\t\t\t"thread":"%thread",\n\t\t\t\t\t"logger":"%logger",\n\t\t\t\t\t"msg":"%enc{%m}{json}"\n\t\t\t\t\t}\n\t\t\t\t</pattern>\n\t\t\t</patternlayout>\n\t\t\t\x3c!-- 生产者发送消息最大阻塞时间，单位为毫秒，生产者阻塞超过2秒，则抛出异常并中断发送【生产者内部缓冲区已满或元数据不可用，send()会阻塞等待】 --\x3e\n\t\t\t<property name="max.block.ms">2000</property>\n\t\t\t\x3c!-- 客户端发送请求到kafka broker超时时间，单位为毫秒，2秒内没有从kafka broker收到响应，则认为请求失败则抛出异常 --\x3e\n\t\t\t<property name="request.timeout.ms">2000</property>\n\t\t\t<property name="bootstrap.servers">kafka:9092</property>\n\t\t</kafka>\n\t</appenders>\n\t\x3c!--\n\t \tadditivity      => 需不需要打印此logger继承的父logger，false只打印当前logger，true继续打印上一层logger，直至root\n\t \tincludelocation => 显示文件行数，方法名等信息，true显示，false不显示，可以减少日志输出的体积，加快日志写入速度\n\t --\x3e\n\t<loggers>\n\t\t<asynclogger name="org.laokou" additivity="false" includelocation="false" level="info">\n\t\t\t<appenderref ref="async_kafka"/>\n\t\t</asynclogger>\n\t\t<asyncroot level="error" additivity="false" includelocation="false">\n\t\t\t<appenderref ref="console"/>\n\t\t\t<appenderref ref="async_file"/>\n\t\t</asyncroot>\n\t</loggers>\n</configuration>\n\n\n# micrometer使用\n\n依赖\n\n\n<dependencys>\n\t<dependency>\n\t\t<groupid>io.micrometer</groupid>\n\t\t<artifactid>micrometer-tracing-bridge-otel</artifactid>\n\t</dependency>\n\t\x3c!-- openfeign集成micrometer --\x3e\n\t<dependency>\n\t\t<groupid>io.github.openfeign</groupid>\n\t\t<artifactid>feign-micrometer</artifactid>\n\t</dependency>\n</dependencys>\n\n\n\n@component\n@requiredargsconstructor\npublic class traceutil {\n\n\tprivate final tracer tracer;\n\n\tpublic string gettraceid() {\n\t\ttracecontext context = getcontext();\n\t\treturn objectutil.isnull(context) ? "" : context.traceid();\n\t}\n\n\tpublic string getspanid() {\n\t\ttracecontext context = getcontext();\n\t\treturn objectutil.isnull(context) ? "" : context.spanid();\n\t}\n\n\tprivate tracecontext getcontext() {\n\t\treturn tracer.currenttracecontext().context();\n\t}\n\n}\n\n\n# elasticsearch使用\n\n引入依赖\n\n\n<dependencies>\n\t<dependency>\n\t\t<groupid>co.elastic.clients</groupid>\n\t\t<artifactid>elasticsearch-java</artifactid>\n\t\t<exclusions>\n\t\t\t<exclusion>\n\t\t\t\t<groupid>org.apache.httpcomponents</groupid>\n\t\t\t\t<artifactid>httpclient</artifactid>\n\t\t\t</exclusion>\n\t\t</exclusions>\n\t</dependency>\n\t<dependency>\n\t\t<groupid>org.apache.httpcomponents</groupid>\n\t\t<artifactid>httpclient</artifactid>\n\t</dependency>\n</dependencies>\n\n\n异步创建索引和批量同步索引【详情请查看本项目源码，laokou-common-elasticsearch】\n\n\n@slf4j\n@component\n@requiredargsconstructor\npublic class elasticsearchtemplate {\n\n\tprivate final elasticsearchasyncclient elasticsearchasyncclient;\n\n\tpublic <tdocument> completablefuture<boolean> asynccreateindex(string name, string alias, class<tdocument> clazz) {\n\t\treturn asyncexist(list.of(name)).thenapplyasync(resp -> {\n\t\t\tif (resp) {\n\t\t\t\tlog.info("索引：{} -> 创建索引失败，索引已存在", name);\n\t\t\t\treturn boolean.false;\n\t\t\t}\n\t\t\treturn boolean.true;\n\t\t}).thenapplyasync(resp -> {\n\t\t\tif (resp) {\n\t\t\t\tdocument document = convert(name, alias, clazz);\n\t\t\t\telasticsearchasyncclient.indices().create(getcreateindexrequest(document)).thenapplyasync(response -> {\n\t\t\t\t\tif (response.acknowledged()) {\n\t\t\t\t\t\tlog.info("索引：{} -> 创建索引成功", name);\n\t\t\t\t\t\treturn boolean.true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlog.info("索引：{} -> 创建索引失败", name);\n\t\t\t\t\t\treturn boolean.false;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn boolean.false;\n\t\t});\n\t}\n\n\tpublic completablefuture<boolean> asyncbulkcreatedocument(string index, map<string, object> map) {\n\t\treturn elasticsearchasyncclient\n\t\t\t.bulk(bulk -> bulk.index(index).refresh(refresh.true).operations(getbulkoperations(map)))\n\t\t\t.thenapplyasync(resp -> {\n\t\t\t\tif (resp.errors()) {\n\t\t\t\t\tlog.info("索引：{} -> 异步批量同步索引失败", index);\n\t\t\t\t\treturn boolean.false;\n\t\t\t\t} else {\n\t\t\t\t\tlog.info("索引：{} -> 异步批量同步索引成功", index);\n\t\t\t\t\treturn boolean.true;\n\t\t\t\t}\n\t\t\t});\n\t}\n\n}\n\n\n# logstash使用\n\n注意：logstash是用的本项目自己搞的轻量级日志收集引擎\n\n核心源码\n\n\n@slf4j\n@component\n@requiredargsconstructor\npublic class tracehandler {\n\n\tprivate static final string trace = "trace_log";\n\n\tprivate final elasticsearchtemplate elasticsearchtemplate;\n\n\t@kafkalistener(topics = "trace_log", groupid = "trace_consumer_group")\n\tpublic void kafkaconsumer(list<string> messages, acknowledgment ack) {\n\t\ttry {\n\t\t\tmap<string, object> datamap = messages.stream()\n\t\t\t\t.map(this::gettraceindex)\n\t\t\t\t.filter(objects::nonnull)\n\t\t\t\t.tolist()\n\t\t\t\t.stream()\n\t\t\t\t.collect(collectors.tomap(traceindex::getid, traceindex -> traceindex));\n\t\t\tif (maputil.isnotempty(datamap)) {\n\t\t\t\telasticsearchtemplate.asynccreateindex(getindexname(), trace, traceindex.class)\n\t\t\t\t\t.thenacceptasync(res -> elasticsearchtemplate.asyncbulkcreatedocument(getindexname(), datamap));\n\t\t\t}\n\t\t} catch (throwable e) {\n\t\t\tlog.error("分布式链路写入失败，错误信息：{}", e.getmessage());\n\t\t} finally {\n\t\t\tack.acknowledge();\n\t\t}\n\t}\n\n\tprivate traceindex gettraceindex(string str) {\n\t\ttry {\n\t\t\ttraceindex traceindex = jacksonutil.tobean(str, traceindex.class);\n\t\t\tstring traceid = traceindex.gettraceid();\n\t\t\tstring spanid = traceindex.getspanid();\n\t\t\tif (istrace(traceid, spanid)) {\n\t\t\t\ttraceindex.setid(string.valueof(idgenerator.defaultsnowflakeid()));\n\t\t\t\treturn traceindex;\n\t\t\t}\n\t\t} catch (exception ex) {\n\t\t\tlog.error("分布式链路日志json转换失败，错误信息：{}", ex.getmessage());\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate boolean istrace(string traceid, string spanid) {\n\t\treturn istrace(traceid) && istrace(spanid);\n\t}\n\n\tprivate boolean istrace(string str) {\n\t\treturn stringutil.isnotempty(str) && !str.startswith("${") && !str.endswith("}");\n\t}\n\n\tprivate string getindexname() {\n\t\treturn trace + "_" + dateutil.format(dateutil.nowdate(), "yyyymmdd");\n\t}\n\n\t@data\n\t@index(setting = @setting(refreshinterval = "-1"))\n\tpublic final static class traceindex implements serializable {\n\n\t\t@field(type = type.long)\n\t\tprivate string id;\n\n\t\t@field(type = type.keyword)\n\t\tprivate string serviceid;\n\n\t\t@field(type = type.keyword)\n\t\tprivate string profile;\n\n\t\t@field(type = type.date, format = "yyyy-mm-dd hh:mm:ss.sss")\n\t\tprivate string datetime;\n\n\t\t@field(type = type.keyword, index = true)\n\t\tprivate string traceid;\n\n\t\t@field(type = type.keyword, index = true)\n\t\tprivate string spanid;\n\n\t\t@field(type = type.keyword)\n\t\tprivate string address;\n\n\t\t@field(type = type.keyword)\n\t\tprivate string level;\n\n\t\t@field(type = type.keyword)\n\t\tprivate string thread;\n\n\t\t@field(type = type.keyword)\n\t\tprivate string logger;\n\n\t\t@field(type = type.keyword)\n\t\tprivate string msg;\n\n\t}\n\n}\n\n\n# kibana使用\n\n1.启动nacos/auth/gateway/logstash\n\n2.运行auth测试用例\n\n3.打开kibana控制台\n\n输入设置好的账号密码 => elastic/laokou123\n\n补充\n\n本项目使用分布链路跟踪，只需要引入依赖\n\n\n<dependency>\n\t<groupid>org.laokou</groupid>\n\t<artifactid>laokou-common-trace</artifactid>\n</dependency>\n\n\n至此，大功告成，恭喜你看完分布式链路跟踪之elk日志，你学废了码？\n\n我是老寇，我们下次再见啦！',charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"OAuth2.1流程",frontmatter:{title:"OAuth2.1流程",date:"2024-09-08T15:58:12.000Z",permalink:"/pages/766b36/"},regularPath:"/01.%E6%8C%87%E5%8D%97/05.%E5%90%8E%E7%AB%AF%E6%8C%87%E5%8D%97/10.OAuth2.1%E6%B5%81%E7%A8%8B.html",relativePath:"01.指南/05.后端指南/10.OAuth2.1流程.md",key:"v-06c7d395",path:"/pages/766b36/",headers:[{level:3,title:"OAuth2和OAuth2.1区别",slug:"oauth2和oauth2-1区别",normalizedTitle:"oauth2和oauth2.1区别",charIndex:51}],headersStr:"OAuth2和OAuth2.1区别",content:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，讲一讲OAuth2.1流程！\n\n\n# OAuth2和OAuth2.1区别\n\n对比项      OAUTH2.0                    OAUTH2.1\n授权模式     支持四种授权模式：                   仅至此2种授权模式：\n         1.授权码模式                     1.授权码模式【强制PKCE】\n         2.隐式模式                      2.客户端模式\n         3.密码模式                      注意：移除隐式模式和密码模式\n         4.客户端模式\nPKCE     可选，主要用于公共客户端【如移动应用和单页面应用】   强制要求所有客户端【包括机密客户端】使用PKCE，提高安全性\n令牌传递方式   允许通过URL查询参数传递访问令牌【不推荐】      ",normalizedContent:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，讲一讲oauth2.1流程！\n\n\n# oauth2和oauth2.1区别\n\n对比项      oauth2.0                    oauth2.1\n授权模式     支持四种授权模式：                   仅至此2种授权模式：\n         1.授权码模式                     1.授权码模式【强制pkce】\n         2.隐式模式                      2.客户端模式\n         3.密码模式                      注意：移除隐式模式和密码模式\n         4.客户端模式\npkce     可选，主要用于公共客户端【如移动应用和单页面应用】   强制要求所有客户端【包括机密客户端】使用pkce，提高安全性\n令牌传递方式   允许通过url查询参数传递访问令牌【不推荐】      ",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"项目部署之镜像打包与推送",frontmatter:{title:"项目部署之镜像打包与推送",date:"2024-08-19T12:43:30.000Z",permalink:"/pages/61389d/"},regularPath:"/01.%E6%8C%87%E5%8D%97/06.%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/00.%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B9%8B%E9%95%9C%E5%83%8F%E6%89%93%E5%8C%85%E4%B8%8E%E6%8E%A8%E9%80%81.html",relativePath:"01.指南/06.项目部署/00.项目部署之镜像打包与推送.md",key:"v-0781bd81",path:"/pages/61389d/",headers:[{level:3,title:"安装插件",slug:"安装插件",normalizedTitle:"安装插件",charIndex:53},{level:3,title:"注册阿里云仓库",slug:"注册阿里云仓库",normalizedTitle:"注册阿里云仓库",charIndex:3101},{level:3,title:"项目打包",slug:"项目打包",normalizedTitle:"项目打包",charIndex:3120},{level:4,title:"配置docker和镜像仓库",slug:"配置docker和镜像仓库",normalizedTitle:"配置docker和镜像仓库",charIndex:3128},{level:4,title:"打包",slug:"打包",normalizedTitle:"打包",charIndex:42},{level:6,title:"切换环境",slug:"切换环境",normalizedTitle:"切换环境",charIndex:3439},{level:5,title:"打包项目",slug:"打包项目",normalizedTitle:"打包项目",charIndex:3469},{level:4,title:"推送",slug:"推送",normalizedTitle:"推送",charIndex:45},{level:5,title:"启动docker",slug:"启动docker",normalizedTitle:"启动docker",charIndex:3516},{level:5,title:"推送镜像",slug:"推送镜像",normalizedTitle:"推送镜像",charIndex:3747},{level:3,title:"部署",slug:"部署",normalizedTitle:"部署",charIndex:37}],headersStr:"安装插件 注册阿里云仓库 项目打包 配置docker和镜像仓库 打包 切换环境 打包项目 推送 启动docker 推送镜像 部署",content:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台!\n\n话不多说，讲一讲项目部署之镜像打包与推送！\n\n\n# 安装插件\n\n\x3c!-- 打包插件，将 Java 源代码编译为字节码（.class 文件） --\x3e\n<plugins>\n\t<plugin>\n\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t<artifactId>maven-compiler-plugin</artifactId>\n\t\t<version>3.13.0</version>\n\t\t<configuration>\n\t\t\t<source>21</source>\n\t\t\t<target>21</target>\n\t\t\t<encoding>UTF-8</encoding>\n\t\t\t<compilerArgs>\n\t\t\t\t\x3c!-- 关闭对不推荐使用的编译器选项的警告 --\x3e\n\t\t\t\t<arg>-Xlint:-options</arg>\n\t\t\t\t\x3c!--  启用对可变参数使用的警告 --\x3e\n\t\t\t\t<arg>-Xlint:varargs</arg>\n\t\t\t\t\x3c!-- 启用对使用原始类型raw types的警告 --\x3e\n\t\t\t\t<arg>-Xlint:rawtypes</arg>\n\t\t\t\t\x3c!-- 启用对未检查的操作的警告，比如未检查的类型转换 --\x3e\n\t\t\t\t<arg>-Xlint:unchecked</arg>\n\t\t\t\t\x3c!-- 启用对使用过时 API 的警告 --\x3e\n\t\t\t\t<arg>-Xlint:deprecation</arg>\n\t\t\t\t\x3c!-- 在编译的字节码中保留方法参数的名称，这对反射或序列化框架非常有用 --\x3e\n\t\t\t\t<arg>-parameters</arg>\n\t\t\t</compilerArgs>\n\t\t</configuration>\n\t</plugin>\n\n\t\x3c!-- 专门用于 Spring Boot 应用的打包和运行，提供打包为可执行 JAR/WAR 文件的功能，还可以在开发过程中直接运行应用 --\x3e\n\t<plugin>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t<version>3.3.2</version>\n\t\t<configuration>\n\t\t\t<finalName>${project.artifactId}</finalName>\n\t\t\t\x3c!-- main方法的地址 只需要修改这个地址--\x3e\n\t\t\t<mainClass>xxx.xxx.xxx.XxxApp</mainClass>\n\t\t</configuration>\n\t\t<executions>\n\t\t\t<execution>\n\t\t\t\t<goals>\n\t\t\t\t\t<goal>repackage</goal>\n\t\t\t\t</goals>\n\t\t\t</execution>\n\t\t</executions>\n\t</plugin>\n\n\t\x3c!-- 执行Docker镜像的构建、推送和运行等操作 --\x3e\n\t<plugin>\n\t\t<groupId>io.fabric8</groupId>\n\t\t<artifactId>docker-maven-plugin</artifactId>\n\t\t<version>0.45.0</version>\n\t\t<configuration>\n\t\t\t\x3c!--Docker主机--\x3e\n\t\t\t<dockerHost>${docker.host}</dockerHost>\n\t\t\t\x3c!--Docker私库--\x3e\n\t\t\t<registry>${docker.registry}</registry>\n\t\t\t\x3c!-- 认证信息--\x3e\n\t\t\t<authConfig>\n\t\t\t\t<push>\n\t\t\t\t\t<username>${docker.username}</username>\n\t\t\t\t\t<password>${docker.password}</password>\n\t\t\t\t</push>\n\t\t\t</authConfig>\n\t\t\t<images>\n\t\t\t\t<image>\n\t\t\t\t\t\x3c!-- 推送仓库/命名空间/仓库名称:镜像版本号--\x3e\n\t\t\t\t\t<name>${docker.registry}/${docker.namespace}/${project.artifactId}:${project.version}</name>\n\t\t\t\t\t<build>\n\t\t\t\t\t\t<tags>\n\t\t\t\t\t\t\t<tag>${project.version}</tag>\n\t\t\t\t\t\t</tags>\n\t\t\t\t\t\t\x3c!-- 指定dockerfile文件的位置--\x3e\n\t\t\t\t\t\t<dockerFile>${project.basedir}/Dockerfile</dockerFile>\n\t\t\t\t\t</build>\n\t\t\t\t</image>\n\t\t\t</images>\n\t\t</configuration>\n\t</plugin>\n\n\t\x3c!-- profile对资源的操作 --\x3e\n\t<resources>\n\t\t\x3c!-- 打包的时候先去掉所有的配置文件 --\x3e\n\t\t<resource>\n\t\t\t<directory>src/main/resources</directory>\n\t\t\t<excludes>\n\t\t\t\t<exclude>application*.yml</exclude>\n\t\t\t\t<exclude>bootstrap*.yml</exclude>\n\t\t\t\t<exclude>log4j2*.xml</exclude>\n\t\t\t\t<exclude>*.json</exclude>\n\t\t\t\t<exclude>*.properties</exclude>\n\t\t\t</excludes>\n\t\t</resource>\n\t\t\x3c!-- 添加需要包含的文件 --\x3e\n\t\t<resource>\n\t\t\t<directory>src/main/resources</directory>\n\t\t\t\x3c!-- 是否替换yml或者properties里@xx@表示的maven properties属性值 --\x3e\n\t\t\t<filtering>true</filtering>\n\t\t\t\x3c!-- 在打包的时候，根据-P参数，加上需要的yml配置文件 --\x3e\n\t\t\t<includes>\n\t\t\t\t<include>application.yml</include>\n\t\t\t\t<include>application-${PROFILE-ACTIVE}.yml</include>\n\t\t\t\t<include>bootstrap.yml</include>\n\t\t\t\t<include>bootstrap-${PROFILE-ACTIVE}.yml</include>\n\t\t\t\t<include>log4j2-${PROFILE-ACTIVE}.xml</include>\n\t\t\t\t<include>init_router.json</include>\n\t\t\t\t<include>log4j2.component.properties</include>\n\t\t\t</includes>\n\t\t</resource>\n\t</resources>\n</plugins>\n\n\n\n# 注册阿里云仓库\n\n请自行百度\n\n\n# 项目打包\n\n# 配置docker和镜像仓库\n\n\n<properties>\n\t<docker.host>tcp://127.0.0.1:2375</docker.host>\n\t<docker.registry>registry.cn-shenzhen.aliyuncs.com</docker.registry>\n\t<docker.namespace>koushenhai</docker.namespace>\n\t<docker.username>username</docker.username>\n\t<docker.password>password</docker.password>\n</properties>\n\n\n# 打包\n\n# 切换环境\n\n切换到prod环境[记得刷新maven]\n\n# 打包项目\n\n# 打包\nmvn clean install -P prod\n\n\n# 推送\n\n# 启动docker\n\n自行启动，不过需要注意一下，因某些原因docker暂不能用，需要科学上网才行\n\n作者的docker镜像源\n\n{\n\t"registry-mirrors": [\n\t\t"https://dockerproxy.com",\n\t\t"https://docker.mirrors.ustc.edu.cn",\n\t\t"https://docker.nju.edu.cn",\n\t\t"https://docker.m.daocloud.io"\n\t]\n}\n\n\n# 推送镜像\n\n以Nacos为例\n\n按此步骤依次打包gateway/monitor/auth/admin/logstash\n\n\n# 部署\n\n找到项目的部署文件夹\n\n注意：需要将如下文件夹拖到到新建文件夹\n\n# 注意需要先启动postgresql，然后运行sql脚本，再重新启动docker\ndocker-compose up -d\n\n\n我是老寇，我们下次再见啦！',normalizedContent:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台!\n\n话不多说，讲一讲项目部署之镜像打包与推送！\n\n\n# 安装插件\n\n\x3c!-- 打包插件，将 java 源代码编译为字节码（.class 文件） --\x3e\n<plugins>\n\t<plugin>\n\t\t<groupid>org.apache.maven.plugins</groupid>\n\t\t<artifactid>maven-compiler-plugin</artifactid>\n\t\t<version>3.13.0</version>\n\t\t<configuration>\n\t\t\t<source>21</source>\n\t\t\t<target>21</target>\n\t\t\t<encoding>utf-8</encoding>\n\t\t\t<compilerargs>\n\t\t\t\t\x3c!-- 关闭对不推荐使用的编译器选项的警告 --\x3e\n\t\t\t\t<arg>-xlint:-options</arg>\n\t\t\t\t\x3c!--  启用对可变参数使用的警告 --\x3e\n\t\t\t\t<arg>-xlint:varargs</arg>\n\t\t\t\t\x3c!-- 启用对使用原始类型raw types的警告 --\x3e\n\t\t\t\t<arg>-xlint:rawtypes</arg>\n\t\t\t\t\x3c!-- 启用对未检查的操作的警告，比如未检查的类型转换 --\x3e\n\t\t\t\t<arg>-xlint:unchecked</arg>\n\t\t\t\t\x3c!-- 启用对使用过时 api 的警告 --\x3e\n\t\t\t\t<arg>-xlint:deprecation</arg>\n\t\t\t\t\x3c!-- 在编译的字节码中保留方法参数的名称，这对反射或序列化框架非常有用 --\x3e\n\t\t\t\t<arg>-parameters</arg>\n\t\t\t</compilerargs>\n\t\t</configuration>\n\t</plugin>\n\n\t\x3c!-- 专门用于 spring boot 应用的打包和运行，提供打包为可执行 jar/war 文件的功能，还可以在开发过程中直接运行应用 --\x3e\n\t<plugin>\n\t\t<groupid>org.springframework.boot</groupid>\n\t\t<artifactid>spring-boot-maven-plugin</artifactid>\n\t\t<version>3.3.2</version>\n\t\t<configuration>\n\t\t\t<finalname>${project.artifactid}</finalname>\n\t\t\t\x3c!-- main方法的地址 只需要修改这个地址--\x3e\n\t\t\t<mainclass>xxx.xxx.xxx.xxxapp</mainclass>\n\t\t</configuration>\n\t\t<executions>\n\t\t\t<execution>\n\t\t\t\t<goals>\n\t\t\t\t\t<goal>repackage</goal>\n\t\t\t\t</goals>\n\t\t\t</execution>\n\t\t</executions>\n\t</plugin>\n\n\t\x3c!-- 执行docker镜像的构建、推送和运行等操作 --\x3e\n\t<plugin>\n\t\t<groupid>io.fabric8</groupid>\n\t\t<artifactid>docker-maven-plugin</artifactid>\n\t\t<version>0.45.0</version>\n\t\t<configuration>\n\t\t\t\x3c!--docker主机--\x3e\n\t\t\t<dockerhost>${docker.host}</dockerhost>\n\t\t\t\x3c!--docker私库--\x3e\n\t\t\t<registry>${docker.registry}</registry>\n\t\t\t\x3c!-- 认证信息--\x3e\n\t\t\t<authconfig>\n\t\t\t\t<push>\n\t\t\t\t\t<username>${docker.username}</username>\n\t\t\t\t\t<password>${docker.password}</password>\n\t\t\t\t</push>\n\t\t\t</authconfig>\n\t\t\t<images>\n\t\t\t\t<image>\n\t\t\t\t\t\x3c!-- 推送仓库/命名空间/仓库名称:镜像版本号--\x3e\n\t\t\t\t\t<name>${docker.registry}/${docker.namespace}/${project.artifactid}:${project.version}</name>\n\t\t\t\t\t<build>\n\t\t\t\t\t\t<tags>\n\t\t\t\t\t\t\t<tag>${project.version}</tag>\n\t\t\t\t\t\t</tags>\n\t\t\t\t\t\t\x3c!-- 指定dockerfile文件的位置--\x3e\n\t\t\t\t\t\t<dockerfile>${project.basedir}/dockerfile</dockerfile>\n\t\t\t\t\t</build>\n\t\t\t\t</image>\n\t\t\t</images>\n\t\t</configuration>\n\t</plugin>\n\n\t\x3c!-- profile对资源的操作 --\x3e\n\t<resources>\n\t\t\x3c!-- 打包的时候先去掉所有的配置文件 --\x3e\n\t\t<resource>\n\t\t\t<directory>src/main/resources</directory>\n\t\t\t<excludes>\n\t\t\t\t<exclude>application*.yml</exclude>\n\t\t\t\t<exclude>bootstrap*.yml</exclude>\n\t\t\t\t<exclude>log4j2*.xml</exclude>\n\t\t\t\t<exclude>*.json</exclude>\n\t\t\t\t<exclude>*.properties</exclude>\n\t\t\t</excludes>\n\t\t</resource>\n\t\t\x3c!-- 添加需要包含的文件 --\x3e\n\t\t<resource>\n\t\t\t<directory>src/main/resources</directory>\n\t\t\t\x3c!-- 是否替换yml或者properties里@xx@表示的maven properties属性值 --\x3e\n\t\t\t<filtering>true</filtering>\n\t\t\t\x3c!-- 在打包的时候，根据-p参数，加上需要的yml配置文件 --\x3e\n\t\t\t<includes>\n\t\t\t\t<include>application.yml</include>\n\t\t\t\t<include>application-${profile-active}.yml</include>\n\t\t\t\t<include>bootstrap.yml</include>\n\t\t\t\t<include>bootstrap-${profile-active}.yml</include>\n\t\t\t\t<include>log4j2-${profile-active}.xml</include>\n\t\t\t\t<include>init_router.json</include>\n\t\t\t\t<include>log4j2.component.properties</include>\n\t\t\t</includes>\n\t\t</resource>\n\t</resources>\n</plugins>\n\n\n\n# 注册阿里云仓库\n\n请自行百度\n\n\n# 项目打包\n\n# 配置docker和镜像仓库\n\n\n<properties>\n\t<docker.host>tcp://127.0.0.1:2375</docker.host>\n\t<docker.registry>registry.cn-shenzhen.aliyuncs.com</docker.registry>\n\t<docker.namespace>koushenhai</docker.namespace>\n\t<docker.username>username</docker.username>\n\t<docker.password>password</docker.password>\n</properties>\n\n\n# 打包\n\n# 切换环境\n\n切换到prod环境[记得刷新maven]\n\n# 打包项目\n\n# 打包\nmvn clean install -p prod\n\n\n# 推送\n\n# 启动docker\n\n自行启动，不过需要注意一下，因某些原因docker暂不能用，需要科学上网才行\n\n作者的docker镜像源\n\n{\n\t"registry-mirrors": [\n\t\t"https://dockerproxy.com",\n\t\t"https://docker.mirrors.ustc.edu.cn",\n\t\t"https://docker.nju.edu.cn",\n\t\t"https://docker.m.daocloud.io"\n\t]\n}\n\n\n# 推送镜像\n\n以nacos为例\n\n按此步骤依次打包gateway/monitor/auth/admin/logstash\n\n\n# 部署\n\n找到项目的部署文件夹\n\n注意：需要将如下文件夹拖到到新建文件夹\n\n# 注意需要先启动postgresql，然后运行sql脚本，再重新启动docker\ndocker-compose up -d\n\n\n我是老寇，我们下次再见啦！',charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"Java如何快速转Go",frontmatter:{title:"Java如何快速转Go",date:"2024-04-01T20:23:33.000Z",permalink:"/pages/643da2/"},regularPath:"/01.%E6%8C%87%E5%8D%97/07.%E5%85%B6%E4%BB%96/00.Java%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E8%BD%ACGo.html",relativePath:"01.指南/07.其他/00.Java如何快速转Go.md",key:"v-765b100f",path:"/pages/643da2/",headersStr:null,content:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，我说说如何快速转Go\n\n  因为项目需要，我不得不使用Go开发项目，不要看Go是一门新语言，其实Java转Go，还是很快的，最多一周时间。\n\n  很多人谈起Go，都会联想到云原生相关技术，比如Docker、Kubernetes，并且都会想到Go的性能比Java好，Go是静态编译语言，占用内存少，并且不需要运行在虚拟机上，这肯定快啊！\n\n  首先，我说一下，我为什么转Go，随着物联网的发展，设备数量呈指数倍增长，Go因其卓越的性能，可以轻松连接海量设备。Go目前在物联网用的多，因为出现没多少年，并且最近这几年才在国内火起来，再加上大公司将Go作为本公司的主要语言，前景应该还不错。我也比较看好！\n\n  其次，我说一下，我是怎么学习的，我大概花了三天，第一天学习《菜鸟教程》，熟悉基本语法。第二天，学会使用组件库连接数据库、缓存和消息队列，把所学的知识应用到实践中。第三天，学习协议对接，比如TCP、UDP等等。学完这些，就能应付工作啦。\n\n  最后，我说一下，不能只局限于语言上，更重要的是培养自己解决问题的能力。这点很重要！\n\n我是老寇，我们下次再见啦！",normalizedContent:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n话不多说，我说说如何快速转go\n\n  因为项目需要，我不得不使用go开发项目，不要看go是一门新语言，其实java转go，还是很快的，最多一周时间。\n\n  很多人谈起go，都会联想到云原生相关技术，比如docker、kubernetes，并且都会想到go的性能比java好，go是静态编译语言，占用内存少，并且不需要运行在虚拟机上，这肯定快啊！\n\n  首先，我说一下，我为什么转go，随着物联网的发展，设备数量呈指数倍增长，go因其卓越的性能，可以轻松连接海量设备。go目前在物联网用的多，因为出现没多少年，并且最近这几年才在国内火起来，再加上大公司将go作为本公司的主要语言，前景应该还不错。我也比较看好！\n\n  其次，我说一下，我是怎么学习的，我大概花了三天，第一天学习《菜鸟教程》，熟悉基本语法。第二天，学会使用组件库连接数据库、缓存和消息队列，把所学的知识应用到实践中。第三天，学习协议对接，比如tcp、udp等等。学完这些，就能应付工作啦。\n\n  最后，我说一下，不能只局限于语言上，更重要的是培养自己解决问题的能力。这点很重要！\n\n我是老寇，我们下次再见啦！",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"Vue快速开发Api",frontmatter:{title:"Vue快速开发Api",date:"2025-03-26T21:28:17.000Z",permalink:"/pages/52f121/"},regularPath:"/01.%E6%8C%87%E5%8D%97/07.%E5%85%B6%E4%BB%96/02.Vue%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91Api.html",relativePath:"01.指南/07.其他/02.Vue快速开发Api.md",key:"v-607a078c",path:"/pages/52f121/",headers:[{level:3,title:"时间互转",slug:"时间互转",normalizedTitle:"时间互转",charIndex:30}],headersStr:"时间互转",content:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n\n# 时间互转\n\n<script>\n\timport moment from \"moment\";\n\tconst number = moment.now();\n\tconsole.log(number)\n\tconsole.log(moment(number).format('YYYY-MM-DD HH:mm:ss'))\n\tconsole.log(moment(number).format('YYYY-MM-DD'))\n\tconsole.log(moment(number).format('YYYYMMDD'))\n\tconsole.log(moment(number).add(1,'days').format('YYYY-MM-DD'))\n\tconsole.log(moment(number).subtract(1,'days').format('YYYY-MM-DD'))\n\tconsole.log(moment(number).add(1,'months').format('YYYY-MM-DD'))\n\tconsole.log(moment(number).subtract(1,'months').format('YYYY-MM-DD'))\n\tconsole.log(moment(number).add(1,'years').format('YYYY-MM-DD'))\n\tconsole.log(moment(number).subtract(1,'years').format('YYYY-MM-DD'))\n\tconst date1 = moment('2023-01-01')\n\tconst date2 = moment('2023-01-02')\n\tconsole.log(date2.diff(date1,'days'))\n\tconsole.log(date2.diff(date1,'months'))\n\tconsole.log(date1.isBefore(date2))\n\tconsole.log(date1.isAfter(date2))\n\tconsole.log(moment(number).fromNow(true))\n\tconsole.log(moment(number).fromNow())\n\tconsole.log(moment(number).toNow(true))\n\tconsole.log(moment(number).toNow())\n\tconsole.log(moment().calendar())\n\tconsole.log(moment(\"333\").isValid())\n\tconsole.log(moment(\"2023-01-01\").isSame(moment(\"2023-01-01\")))\n\tconsole.log(moment(number).year())\n\tconsole.log(moment(number).month())\n\t// 天\n\tconsole.log(moment(number).date())\n\t// 星期\n\tconsole.log(moment(number).day())\n\tconsole.log(moment(number).week())\n\tconsole.log(moment(number).isoWeek())\n\tconsole.log(moment(number).weekday())\n\tconsole.log(moment(number).isoWeekday())\n\tconsole.log(moment(number).isoWeeksInYear())\n\tconsole.log(moment(number).weekYear())\n\tconsole.log(moment(number).isoWeekYear())\n\tconsole.log(moment(number).quarter())\n\tconsole.log(moment(number).weeksInYear())\n\tconsole.log(moment(number).weeks())\n\tconsole.log(moment(number).toDate())\n\tconsole.log(moment().valueOf())\n\tconsole.log(moment().unix())\n\tconsole.log(moment.unix(moment().unix()).format('YYYY-MM-DD HH:mm:ss'))\n\tconsole.log(moment().year(2025).month(0).date(1).week())\n\tmoment.locale('zh-cn')\n\tconsole.log(moment().format('MMMM'))\n\tconsole.log(moment().startOf('day').format('YYYY-MM-DD HH:mm:ss'))\n\tconsole.log(moment().endOf('day').format('YYYY-MM-DD HH:mm:ss'))\n\tconsole.log(moment().startOf('week').format('YYYY-MM-DD HH:mm:ss'))\n\tconsole.log(moment().endOf('week').format('YYYY-MM-DD HH:mm:ss'))\n\tconsole.log(moment().startOf('month').format('YYYY-MM-DD HH:mm:ss'))\n\tconsole.log(moment().endOf('month').format('YYYY-MM-DD HH:mm:ss'))\n\tconsole.log(moment().startOf('year').format('YYYY-MM-DD HH:mm:ss'))\n\tconsole.log(moment().endOf('year').format('YYYY-MM-DD HH:mm:ss'))\n<\/script>\n\n\n<script>\n\t// 安装 luxon【pnpm add luxon】\n\timport { DateTime } from 'luxon'\n\tconst dateTime = DateTime.now();\n\tconst targetTime = DateTime.fromFormat('2025-03-28 12:00:00', 'yyyy-MM-dd HH:mm:ss')\n\tconsole.log(dateTime.diff(targetTime,['days', 'hours', 'minutes', 'seconds']).toHuman({listStyle: 'long'}))\n\tconsole.log(dateTime.toFormat('yyyy-MM-dd HH:mm:ss'))\n<\/script>\n",normalizedContent:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n\n# 时间互转\n\n<script>\n\timport moment from \"moment\";\n\tconst number = moment.now();\n\tconsole.log(number)\n\tconsole.log(moment(number).format('yyyy-mm-dd hh:mm:ss'))\n\tconsole.log(moment(number).format('yyyy-mm-dd'))\n\tconsole.log(moment(number).format('yyyymmdd'))\n\tconsole.log(moment(number).add(1,'days').format('yyyy-mm-dd'))\n\tconsole.log(moment(number).subtract(1,'days').format('yyyy-mm-dd'))\n\tconsole.log(moment(number).add(1,'months').format('yyyy-mm-dd'))\n\tconsole.log(moment(number).subtract(1,'months').format('yyyy-mm-dd'))\n\tconsole.log(moment(number).add(1,'years').format('yyyy-mm-dd'))\n\tconsole.log(moment(number).subtract(1,'years').format('yyyy-mm-dd'))\n\tconst date1 = moment('2023-01-01')\n\tconst date2 = moment('2023-01-02')\n\tconsole.log(date2.diff(date1,'days'))\n\tconsole.log(date2.diff(date1,'months'))\n\tconsole.log(date1.isbefore(date2))\n\tconsole.log(date1.isafter(date2))\n\tconsole.log(moment(number).fromnow(true))\n\tconsole.log(moment(number).fromnow())\n\tconsole.log(moment(number).tonow(true))\n\tconsole.log(moment(number).tonow())\n\tconsole.log(moment().calendar())\n\tconsole.log(moment(\"333\").isvalid())\n\tconsole.log(moment(\"2023-01-01\").issame(moment(\"2023-01-01\")))\n\tconsole.log(moment(number).year())\n\tconsole.log(moment(number).month())\n\t// 天\n\tconsole.log(moment(number).date())\n\t// 星期\n\tconsole.log(moment(number).day())\n\tconsole.log(moment(number).week())\n\tconsole.log(moment(number).isoweek())\n\tconsole.log(moment(number).weekday())\n\tconsole.log(moment(number).isoweekday())\n\tconsole.log(moment(number).isoweeksinyear())\n\tconsole.log(moment(number).weekyear())\n\tconsole.log(moment(number).isoweekyear())\n\tconsole.log(moment(number).quarter())\n\tconsole.log(moment(number).weeksinyear())\n\tconsole.log(moment(number).weeks())\n\tconsole.log(moment(number).todate())\n\tconsole.log(moment().valueof())\n\tconsole.log(moment().unix())\n\tconsole.log(moment.unix(moment().unix()).format('yyyy-mm-dd hh:mm:ss'))\n\tconsole.log(moment().year(2025).month(0).date(1).week())\n\tmoment.locale('zh-cn')\n\tconsole.log(moment().format('mmmm'))\n\tconsole.log(moment().startof('day').format('yyyy-mm-dd hh:mm:ss'))\n\tconsole.log(moment().endof('day').format('yyyy-mm-dd hh:mm:ss'))\n\tconsole.log(moment().startof('week').format('yyyy-mm-dd hh:mm:ss'))\n\tconsole.log(moment().endof('week').format('yyyy-mm-dd hh:mm:ss'))\n\tconsole.log(moment().startof('month').format('yyyy-mm-dd hh:mm:ss'))\n\tconsole.log(moment().endof('month').format('yyyy-mm-dd hh:mm:ss'))\n\tconsole.log(moment().startof('year').format('yyyy-mm-dd hh:mm:ss'))\n\tconsole.log(moment().endof('year').format('yyyy-mm-dd hh:mm:ss'))\n<\/script>\n\n\n<script>\n\t// 安装 luxon【pnpm add luxon】\n\timport { datetime } from 'luxon'\n\tconst datetime = datetime.now();\n\tconst targettime = datetime.fromformat('2025-03-28 12:00:00', 'yyyy-mm-dd hh:mm:ss')\n\tconsole.log(datetime.diff(targettime,['days', 'hours', 'minutes', 'seconds']).tohuman({liststyle: 'long'}))\n\tconsole.log(datetime.toformat('yyyy-mm-dd hh:mm:ss'))\n<\/script>\n",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"React快速开发Api",frontmatter:{title:"React快速开发Api",date:"2025-03-26T21:28:55.000Z",permalink:"/pages/3de3af/"},regularPath:"/01.%E6%8C%87%E5%8D%97/07.%E5%85%B6%E4%BB%96/03.React%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91Api.html",relativePath:"01.指南/07.其他/03.React快速开发Api.md",key:"v-dfdfb98c",path:"/pages/3de3af/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"物联网之对接MQTT最佳实践",frontmatter:{title:"物联网之对接MQTT最佳实践",date:"2025-05-05T15:15:01.000Z",permalink:"/pages/330c83/"},regularPath:"/01.%E6%8C%87%E5%8D%97/08.%E6%96%87%E7%AB%A0/00.%E7%89%A9%E8%81%94%E7%BD%91%E4%B9%8B%E5%AF%B9%E6%8E%A5MQTT%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.html",relativePath:"01.指南/08.文章/00.物联网之对接MQTT最佳实践.md",key:"v-156fc168",path:"/pages/330c83/",headers:[{level:3,title:"安装EMQX",slug:"安装emqx",normalizedTitle:"安装emqx",charIndex:44},{level:6,title:"使用 emqx 5.4.1，按照老夫的教程来，请不要改版本号！！！",slug:"使用-emqx-5-4-1-按照老夫的教程来-请不要改版本号",normalizedTitle:"使用 emqx 5.4.1，按照老夫的教程来，请不要改版本号！！！",charIndex:155},{level:6,title:"使用 emqx 5.4.1，按照老夫的教程来，请不要改版本号！！！",slug:"使用-emqx-5-4-1-按照老夫的教程来-请不要改版本号-2",normalizedTitle:"使用 emqx 5.4.1，按照老夫的教程来，请不要改版本号！！！",charIndex:155},{level:6,title:"使用 emqx 5.4.1，按照老夫的教程来，请不要改版本号！！！",slug:"使用-emqx-5-4-1-按照老夫的教程来-请不要改版本号-3",normalizedTitle:"使用 emqx 5.4.1，按照老夫的教程来，请不要改版本号！！！",charIndex:155},{level:3,title:"EMQX MQTT【摘抄自官方文档】",slug:"emqx-mqtt【摘抄自官方文档】",normalizedTitle:"emqx mqtt【摘抄自官方文档】",charIndex:818},{level:3,title:"客户端对接",slug:"客户端对接",normalizedTitle:"客户端对接",charIndex:1059},{level:3,title:"Paho【不推荐，连接不稳定】",slug:"paho【不推荐-连接不稳定】",normalizedTitle:"paho【不推荐，连接不稳定】",charIndex:1465},{level:6,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:1494},{level:6,title:"项目集成",slug:"项目集成",normalizedTitle:"项目集成",charIndex:1887},{level:3,title:"Hivemq-MQTT-Client【不推荐】",slug:"hivemq-mqtt-client【不推荐】",normalizedTitle:"hivemq-mqtt-client【不推荐】",charIndex:7330},{level:6,title:"引入依赖",slug:"引入依赖-2",normalizedTitle:"引入依赖",charIndex:1494},{level:6,title:"项目集成",slug:"项目集成-2",normalizedTitle:"项目集成",charIndex:1887},{level:3,title:"Vert.x MQTT Client【推荐，只兼容mqtt3.1.1】",slug:"vert-x-mqtt-client【推荐-只兼容mqtt3-1-1】",normalizedTitle:"vert.x mqtt client【推荐，只兼容mqtt3.1.1】",charIndex:37863},{level:6,title:"引入依赖",slug:"引入依赖-3",normalizedTitle:"引入依赖",charIndex:1494},{level:6,title:"项目集成",slug:"项目集成-3",normalizedTitle:"项目集成",charIndex:1887}],headersStr:"安装EMQX 使用 emqx 5.4.1，按照老夫的教程来，请不要改版本号！！！ 使用 emqx 5.4.1，按照老夫的教程来，请不要改版本号！！！ 使用 emqx 5.4.1，按照老夫的教程来，请不要改版本号！！！ EMQX MQTT【摘抄自官方文档】 客户端对接 Paho【不推荐，连接不稳定】 引入依赖 项目集成 Hivemq-MQTT-Client【不推荐】 引入依赖 项目集成 Vert.x MQTT Client【推荐，只兼容mqtt3.1.1】 引入依赖 项目集成",content:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n跟我一起学习对接MQTT\n\n\n# 安装EMQX\n\n采用docker-compose一键式启动！！！\n\n还没有安装docker朋友，参考文章下面两篇文章\n\n# Ubuntu20.04安装Docker\n\n# Centos7安装Docker 23.0.6\n\n# 使用 emqx 5.4.1，按照老夫的教程来，请不要改版本号！！！\n\n# 使用 emqx 5.4.1，按照老夫的教程来，请不要改版本号！！！\n\n# 使用 emqx 5.4.1，按照老夫的教程来，请不要改版本号！！！\n\nservices:\n    emqx:\n      image: emqx/emqx:5.4.1\n      container_name: emqx\n      # 保持容器在没有守护程序的情况下运行\n      tty: true\n      restart: always\n      privileged: true\n      ports:\n        - "1883:1883"\n        - "8083:8083"\n        - "8883:8883"\n        - "18083:18083"\n      environment:\n        - TZ=Asia/Shanghai\n      volumes:\n        # 挂载数据存储\n        - ./emqx/data:/opt/emqx/data\n        # 挂载日志文件\n        - ./emqx/log:/opt/emqx/log\n      networks:\n        - iot_network\nnetworks:\n  iot_network:\n    driver: bridge\n\n\n访问 http://127.0.0.1:18083 设置密码\n\n\n\n\n# EMQX MQTT【摘抄自官方文档】\n\nEMQX官方文档\n\nMQTT 是物联网 (IoT) 的 OASIS 标准消息传递协议。它被设计为一种极轻量的发布/订阅消息传输协议，非常适合以较小的代码占用空间和极低的网络带宽连接远程设备。MQTT 目前广泛应用于汽车、制造、电信、石油和天然气等众多行业。\n\nEMQX 完全兼容 MQTT 5.0 和 3.x，本节将介绍 MQTT 相关功能的基本配置项，包括基本 MQTT 设置、订阅设置、会话设置、强制关闭设置和强制垃圾回收设置等\n\n\n# 客户端对接\n\n本文章采用三种客户端对接\n\n维度      PAHO                  HIVEMQ-MQTT-CLIENT   VERT.X MQTT CLIENT\n协议支持    MQTT 3.1.1（5.0 实验性）   MQTT 5.0 完整支持        MQTT 5.0（较新版本）\n性能      中（同步模式）               高（异步非阻塞）             极高（响应式架构）\n依赖复杂度   低                     中（仅 Netty）           高（需 Vert.x 生态）\n社区资源    丰富                    较少                   中等\n适用场景    传统 IoT、跨语言项目          企业级 MQTT 5.0、高吞吐     响应式系统、高并发微服务\n\n\n# Paho【不推荐，连接不稳定】\n\nPaho代码地址\n\n# 引入依赖\n\n<dependencies>\n    <dependency>\n        <groupId>org.eclipse.paho</groupId>\n        <artifactId>org.eclipse.paho.mqttv5.client</artifactId>\n        <version>1.2.5</version>\n    </dependency>\n    <dependency>\n        <groupId>org.eclipse.paho</groupId>\n        <artifactId>org.eclipse.paho.client.mqttv3</artifactId>\n        <version>1.2.5</version>\n    </dependency>\n</dependencies>\n\n\n# 项目集成\n\nPahoProperties\n\n/**\n * @author laokou\n */\n@Data\npublic class PahoProperties {\n\n    private boolean auth = true;\n\n    private String username = "emqx";\n\n    private String password = "laokou123";\n\n    private String host = "127.0.0.1";\n\n    private int port = 1883;\n\n    private String clientId;\n\n    private int subscribeQos = 1;\n\n    private int publishQos = 0;\n\n    private int willQos = 1;\n\n    private int connectionTimeout = 60;\n\n    private boolean manualAcks = false;\n\n    // @formatter:off\n    /**\n     * 控制是否创建新会话（true=新建，false=复用历史会话）. clearStart=true => Broker 会在连接断开后立即清除所有会话信息.\n     * clearStart=false => Broker 会在连接断开后保存会话信息，并在重新连接后复用会话信息.\n     * <a href="https://github.com/hivemq/hivemq-mqtt-client/issues/627">...</a>\n     */\n    // @formatter:on\n    private boolean clearStart = false;\n\n    private int receiveMaximum = 10000;\n\n    private int maximumPacketSize = 10000;\n\n    // @formatter:off\n    /**\n     * 默认会话保留一天.\n     * 最大值，4294967295L，会话过期时间【永不过期，单位秒】.\n     * 定义客户端断开后会话保留的时间（仅在 Clean Session = false 时生效）.\n     */\n    private long sessionExpiryInterval = 86400L;\n    // @formatter:on\n\n    /**\n     * 心跳包每隔60秒发一次.\n     */\n    private int keepAliveInterval = 60;\n\n    private boolean automaticReconnect = true;\n\n    private Set<String> topics = new HashSet<>(0);\n\n}\n\n\nPahoMqttClientMessageCallbackV5\n\n/**\n * @author laokou\n */\n@Slf4j\n@RequiredArgsConstructor\npublic class PahoMqttClientMessageCallbackV5 implements MqttCallback {\n\n    private final List<MessageHandler> messageHandlers;\n\n    @Override\n    public void disconnected(MqttDisconnectResponse disconnectResponse) {\n       log.error("【Paho-V5】 => MQTT关闭连接");\n    }\n\n    @Override\n    public void mqttErrorOccurred(MqttException ex) {\n       log.error("【Paho-V5】 => MQTT报错，错误信息：{}", ex.getMessage());\n    }\n\n    @Override\n    public void messageArrived(String topic, MqttMessage message) {\n       for (MessageHandler messageHandler : messageHandlers) {\n          if (messageHandler.isSubscribe(topic)) {\n             log.info("【Paho-V5】 => MQTT接收到消息，Topic：{}", topic);\n             messageHandler.handle(new org.laokou.sample.mqtt.handler.MqttMessage(message.getPayload(), topic));\n          }\n       }\n    }\n\n    @Override\n    public void deliveryComplete(IMqttToken token) {\n       log.info("【Paho-V5】 => MQTT消息发送成功，消息ID：{}", token.getMessageId());\n    }\n\n    @Override\n    public void connectComplete(boolean reconnect, String uri) {\n       if (reconnect) {\n          log.info("【Paho-V5】 => MQTT重连成功，URI：{}", uri);\n       }\n       else {\n          log.info("【Paho-V5】 => MQTT建立连接，URI：{}", uri);\n       }\n    }\n\n    @Override\n    public void authPacketArrived(int reasonCode, MqttProperties properties) {\n       log.info("【Paho-V5】 => 接收到身份验证数据包：{}", reasonCode);\n    }\n\n}\n\n\nPahoV5MqttClientTest\n\n/**\n * @author laokou\n */\n@SpringBootTest\n@RequiredArgsConstructor\n@TestConstructor(autowireMode = TestConstructor.AutowireMode.ALL)\nclass PahoV5MqttClientTest {\n\n    private final List<MessageHandler> messageHandlers;\n\n    @Test\n    void testMqttClient() throws InterruptedException {\n        ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(16);\n\n        PahoProperties pahoProperties = new PahoProperties();\n        pahoProperties.setClientId("test-client-3");\n        pahoProperties.setTopics(Set.of("/test-topic-3/#"));\n        PahoMqttClientV5 pahoMqttClientV5 = new PahoMqttClientV5(pahoProperties, messageHandlers, scheduledExecutorService);\n        pahoMqttClientV5.open();\n        Thread.sleep(1000);\n        pahoMqttClientV5.publish("/test-topic-3/789", "Hello World789".getBytes());\n    }\n\n}\n\n\nPahoMqttClientMessageCallbackV3\n\n/**\n * @author laokou\n */\n@Slf4j\n@RequiredArgsConstructor\npublic class PahoMqttClientMessageCallbackV3 implements MqttCallback {\n\n    private final List<MessageHandler> messageHandlers;\n\n    @Override\n    public void deliveryComplete(IMqttDeliveryToken iMqttDeliveryToken) {\n       log.info("【Paho-V3】 => MQTT消息发送成功，消息ID：{}", iMqttDeliveryToken.getMessageId());\n    }\n\n    @Override\n    public void connectionLost(Throwable throwable) {\n       log.error("【Paho-V3】 => MQTT关闭连接");\n    }\n\n    @Override\n    public void messageArrived(String topic, MqttMessage message) throws Exception {\n       for (MessageHandler messageHandler : messageHandlers) {\n          if (messageHandler.isSubscribe(topic)) {\n             log.info("【Paho-V3】 => MQTT接收到消息，Topic：{}", topic);\n             messageHandler.handle(new org.laokou.sample.mqtt.handler.MqttMessage(message.getPayload(), topic));\n          }\n       }\n    }\n}\n\n\nPahoV3MqttClientTest\n\n/**\n * @author laokou\n */\n@SpringBootTest\n@RequiredArgsConstructor\n@TestConstructor(autowireMode = TestConstructor.AutowireMode.ALL)\nclass PahoV3MqttClientTest {\n\n    private final List<MessageHandler> messageHandlers;\n\n    @Test\n    void testMqttClient() throws InterruptedException {\n        ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(16);\n\n        PahoProperties pahoProperties2 = new PahoProperties();\n        pahoProperties2.setClientId("test-client-4");\n        pahoProperties2.setTopics(Set.of("/test-topic-4/#"));\n        PahoMqttClientV3 pahoMqttClientV3 = new PahoMqttClientV3(pahoProperties2, messageHandlers, scheduledExecutorService);\n        pahoMqttClientV3.open();\n        Thread.sleep(1000);\n        pahoMqttClientV3.publish("/test-topic-4/000", "Hello World000".getBytes());\n    }\n\n}\n\n\n\n# Hivemq-MQTT-Client【不推荐】\n\n注意：订阅一段时间收不到数据，标准mqtt5.0协议，不兼容emqx broker mqtt5.0\n\nHivemq代码地址\n\n# 引入依赖\n\n<dependencies>\n    <dependency>\n        <groupId>com.hivemq</groupId>\n        <artifactId>hivemq-mqtt-client-reactor</artifactId>\n        <version>1.3.5</version>\n    </dependency>\n    <dependency>\n        <groupId>com.hivemq</groupId>\n        <artifactId>hivemq-mqtt-client-epoll</artifactId>\n        <version>1.3.5</version>\n        <type>pom</type>\n    </dependency>\n<dependencies>\n\n\n# 项目集成\n\nHivemqProperties\n\n/**\n * @author laokou\n */\n@Data\npublic class HivemqProperties {\n\n    private boolean auth = true;\n\n    private String username = "emqx";\n\n    private String password = "laokou123";\n\n    private String host = "127.0.0.1";\n\n    private int port = 1883;\n\n    private String clientId;\n\n    private int subscribeQos = 1;\n\n    private int publishQos = 0;\n\n    private int willQos = 1;\n\n    // @formatter:off\n    /**\n     * 控制是否创建新会话（true=新建，false=复用历史会话）. clearStart=true => Broker 会在连接断开后立即清除所有会话信息.\n     * clearStart=false => Broker 会在连接断开后保存会话信息，并在重新连接后复用会话信息.\n     * <a href="https://github.com/hivemq/hivemq-mqtt-client/issues/627">...</a>\n     */\n    // @formatter:on\n    private boolean clearStart = false;\n\n    private int receiveMaximum = 10000;\n\n    private int sendMaximum = 10000;\n\n    private int maximumPacketSize = 10000;\n\n    private int sendMaximumPacketSize = 10000;\n\n    private int topicAliasMaximum = 1024;\n\n    private int sendTopicAliasMaximum = 2048;\n\n    private long messageExpiryInterval = 86400L;\n\n    private boolean requestProblemInformation = true;\n\n    private boolean requestResponseInformation = true;\n\n    // @formatter:off\n    /**\n     * 默认会话保留一天.\n     * 最大值，4294967295L，会话过期时间【永不过期，单位秒】.\n     * 定义客户端断开后会话保留的时间（仅在 Clean Session = false 时生效）.\n     */\n    private long sessionExpiryInterval = 86400L;\n    // @formatter:on\n\n    /**\n     * 心跳包每隔60秒发一次.\n     */\n    private int keepAliveInterval = 60;\n\n    private boolean automaticReconnect = true;\n\n    private long automaticReconnectMaxDelay = 5;\n\n    private long automaticReconnectInitialDelay = 1;\n\n    private Set<String> topics = new HashSet<>(0);\n\n    private int nettyThreads = 32;\n\n    private boolean retain = false;\n\n    private boolean noLocal = false;\n\n}\n\n\nHivemqClientV5\n\n/**\n * @author laokou\n */\n@Slf4j\npublic class HivemqClientV5 {\n\n    /**\n     * 响应主题.\n     */\n    private final String RESPONSE_TOPIC = "response/topic";\n\n    /**\n     * 服务下线数据.\n     */\n    private final byte[] WILL_PAYLOAD = "offline".getBytes(UTF_8);\n\n    /**\n     * 相关数据.\n     */\n    private final byte[] CORRELATION_DATA = "correlationData".getBytes(UTF_8);\n\n    private final HivemqProperties hivemqProperties;\n\n    private final List<MessageHandler> messageHandlers;\n\n    private volatile Mqtt5RxClient client;\n\n    private final Object lock = new Object();\n\n    private volatile Disposable connectDisposable;\n\n    private volatile Disposable subscribeDisposable;\n\n    private volatile Disposable unSubscribeDisposable;\n\n    private volatile Disposable publishDisposable;\n\n    private volatile Disposable disconnectDisposable;\n\n    private volatile Disposable consumeDisposable;\n\n    public HivemqClientV5(HivemqProperties hivemqProperties, List<MessageHandler> messageHandlers) {\n        this.hivemqProperties = hivemqProperties;\n        this.messageHandlers = messageHandlers;\n    }\n\n    public void open() {\n        if (Objects.isNull(client)) {\n            synchronized (lock) {\n                if (Objects.isNull(client)) {\n                    client = getMqtt5ClientBuilder().buildRx();\n                }\n            }\n        }\n        connect();\n        consume();\n    }\n\n    public void close() {\n        if (!Objects.isNull(client)) {\n            disconnectDisposable = client.disconnectWith()\n                    .sessionExpiryInterval(hivemqProperties.getSessionExpiryInterval())\n                    .applyDisconnect()\n                    .subscribeOn(Schedulers.io())\n                    .retryWhen(errors -> errors.scan(1, (retryCount, error) -> retryCount > 5 ? -1 : retryCount + 1)\n                            .takeWhile(retryCount -> retryCount != -1)\n                            .flatMap(retryCount -> Flowable.timer((long) Math.pow(2, retryCount) * 100, TimeUnit.MILLISECONDS)))\n                    .subscribe(() -> log.info("【Hivemq-V5】 => MQTT断开连接成功，客户端ID：{}", hivemqProperties.getClientId()),\n                            e -> log.error("【Hivemq-V5】 => MQTT断开连接失败，错误信息：{}", e.getMessage(), e));\n        }\n    }\n\n    public void subscribe() {\n        String[] topics = getTopics();\n        subscribe(topics, getQosArray(topics));\n    }\n\n    public String[] getTopics() {\n        return hivemqProperties.getTopics().toArray(String[]::new);\n    }\n\n    public int[] getQosArray(String[] topics) {\n        return Stream.of(topics).mapToInt(item -> hivemqProperties.getSubscribeQos()).toArray();\n    }\n\n    public void subscribe(String[] topics, int[] qosArray) {\n        checkTopicAndQos(topics, qosArray);\n        if (!Objects.isNull(client)) {\n            List<Mqtt5Subscription> subscriptions = new ArrayList<>(topics.length);\n            for (int i = 0; i < topics.length; i++) {\n                subscriptions.add(Mqtt5Subscription.builder()\n                        .topicFilter(topics[i])\n                        .qos(getMqttQos(qosArray[i]))\n                        .retainAsPublished(hivemqProperties.isRetain())\n                        .noLocal(hivemqProperties.isNoLocal())\n                        .build());\n            }\n            subscribeDisposable = client.subscribeWith()\n                    .addSubscriptions(subscriptions)\n                    .applySubscribe()\n                    .subscribeOn(Schedulers.io())\n                    .retryWhen(errors -> errors.scan(1, (retryCount, error) -> retryCount > 5 ? -1 : retryCount + 1)\n                            .takeWhile(retryCount -> retryCount != -1)\n                            .flatMap(retryCount -> Flowable.timer((long) Math.pow(2, retryCount) * 100, TimeUnit.MILLISECONDS)))\n                    .subscribe(ack -> log.info("【Hivemq-V5】 => MQTT订阅成功，主题: {}", String.join("、", topics)), e -> log\n                            .error("【Hivemq-V5】 => MQTT订阅失败，主题：{}，错误信息：{}", String.join("、", topics), e.getMessage(), e));\n        }\n    }\n\n    public void unSubscribe() {\n        String[] topics = hivemqProperties.getTopics().toArray(String[]::new);\n        unSubscribe(topics);\n    }\n\n    public void unSubscribe(String[] topics) {\n        checkTopic(topics);\n        if (!Objects.isNull(client)) {\n            List<MqttTopicFilter> matchedTopics = new ArrayList<>(topics.length);\n            for (String topic : topics) {\n                matchedTopics.add(MqttTopicFilter.of(topic));\n            }\n            unSubscribeDisposable = client.unsubscribeWith()\n                    .addTopicFilters(matchedTopics)\n                    .applyUnsubscribe()\n                    .subscribeOn(Schedulers.io())\n                    .retryWhen(errors -> errors.scan(1, (retryCount, error) -> retryCount > 5 ? -1 : retryCount + 1)\n                            .takeWhile(retryCount -> retryCount != -1)\n                            .flatMap(retryCount -> Flowable.timer((long) Math.pow(2, retryCount) * 100, TimeUnit.MILLISECONDS)))\n                    .subscribe(ack -> log.info("【Hivemq-V5】 => MQTT取消订阅成功，主题：{}", String.join("、", topics)), e -> log\n                            .error("【Hivemq-V5】 => MQTT取消订阅失败，主题：{}，错误信息：{}", String.join("、", topics), e.getMessage(), e));\n        }\n    }\n\n    public void publish(String topic, byte[] payload, int qos) {\n        if (!Objects.isNull(client)) {\n            publishDisposable = client\n                    .publish(Flowable.just(Mqtt5Publish.builder()\n                            .topic(topic)\n                            .qos(getMqttQos(qos))\n                            .payload(payload)\n                            .noMessageExpiry()\n                            .retain(hivemqProperties.isRetain())\n                            .messageExpiryInterval(hivemqProperties.getMessageExpiryInterval())\n                            .correlationData(CORRELATION_DATA)\n                            .payloadFormatIndicator(Mqtt5PayloadFormatIndicator.UTF_8)\n                            .contentType("text/plain")\n                            .responseTopic(RESPONSE_TOPIC)\n                            .build()))\n                    .subscribeOn(Schedulers.io())\n                    .retryWhen(errors -> errors.scan(1, (retryCount, error) -> retryCount > 5 ? -1 : retryCount + 1)\n                            .takeWhile(retryCount -> retryCount != -1)\n                            .flatMap(retryCount -> Flowable.timer((long) Math.pow(2, retryCount) * 100, TimeUnit.MILLISECONDS)))\n                    .subscribe(ack -> log.info("【Hivemq-V5】 => MQTT消息发布成功，topic：{}", topic),\n                            e -> log.error("【Hivemq-V5】 => MQTT消息发布失败，topic：{}，错误信息：{}", topic, e.getMessage(), e));\n        }\n    }\n\n    public void publish(String topic, byte[] payload) {\n        publish(topic, payload, hivemqProperties.getPublishQos());\n    }\n\n    public void dispose(Disposable disposable) {\n        if (!Objects.isNull(disposable) && !disposable.isDisposed()) {\n            // 显式取消订阅\n            disposable.dispose();\n        }\n    }\n\n    public void dispose() {\n        dispose(connectDisposable);\n        dispose(subscribeDisposable);\n        dispose(unSubscribeDisposable);\n        dispose(publishDisposable);\n        dispose(consumeDisposable);\n        dispose(disconnectDisposable);\n    }\n\n    public void reSubscribe() {\n        log.info("【Hivemq-V5】 => MQTT重新订阅开始");\n        dispose(subscribeDisposable);\n        subscribe();\n        log.info("【Hivemq-V5】 => MQTT重新订阅结束");\n    }\n\n    private MqttQos getMqttQos(int qos) {\n        return MqttQos.fromCode(qos);\n    }\n\n    private void connect() {\n        connectDisposable = client.connectWith()\n                .keepAlive(hivemqProperties.getKeepAliveInterval())\n                .cleanStart(hivemqProperties.isClearStart())\n                .sessionExpiryInterval(hivemqProperties.getSessionExpiryInterval())\n                .willPublish()\n                .topic("will/topic")\n                .payload(WILL_PAYLOAD)\n                .qos(getMqttQos(hivemqProperties.getWillQos()))\n                .retain(true)\n                .messageExpiryInterval(100)\n                .delayInterval(10)\n                .payloadFormatIndicator(Mqtt5PayloadFormatIndicator.UTF_8)\n                .contentType("text/plain")\n                .responseTopic(RESPONSE_TOPIC)\n                .correlationData(CORRELATION_DATA)\n                .applyWillPublish()\n                .restrictions()\n                .receiveMaximum(hivemqProperties.getReceiveMaximum())\n                .sendMaximum(hivemqProperties.getSendMaximum())\n                .maximumPacketSize(hivemqProperties.getMaximumPacketSize())\n                .sendMaximumPacketSize(hivemqProperties.getSendMaximumPacketSize())\n                .topicAliasMaximum(hivemqProperties.getTopicAliasMaximum())\n                .sendTopicAliasMaximum(hivemqProperties.getSendTopicAliasMaximum())\n                .requestProblemInformation(hivemqProperties.isRequestProblemInformation())\n                .requestResponseInformation(hivemqProperties.isRequestResponseInformation())\n                .applyRestrictions()\n                .applyConnect()\n                .toFlowable()\n                .firstElement()\n                .subscribeOn(Schedulers.io())\n                .retryWhen(errors -> errors.scan(1, (retryCount, error) -> retryCount > 5 ? -1 : retryCount + 1)\n                        .takeWhile(retryCount -> retryCount != -1)\n                        .flatMap(retryCount -> Flowable.timer((long) Math.pow(2, retryCount) * 100, TimeUnit.MILLISECONDS)))\n                .subscribe(\n                        ack -> log.info("【Hivemq-V5】 => MQTT连接成功，主机：{}，端口：{}，客户端ID：{}", hivemqProperties.getHost(),\n                                hivemqProperties.getPort(), hivemqProperties.getClientId()),\n                        e -> log.error("【Hivemq-V5】 => MQTT连接失败，错误信息：{}", e.getMessage(), e));\n    }\n\n    private void consume() {\n        if (!Objects.isNull(client)) {\n            consumeDisposable = client.publishes(MqttGlobalPublishFilter.ALL)\n                    .onBackpressureBuffer(8192)\n                    .observeOn(Schedulers.computation(), false, 8192)\n                    .doOnSubscribe(subscribe -> {\n                        log.info("【Hivemq-V5】 => MQTT开始订阅消息，请稍候。。。。。。");\n                        reSubscribe();\n                    })\n                    .subscribeOn(Schedulers.io())\n                    .retryWhen(errors -> errors.scan(1, (retryCount, error) -> retryCount > 5 ? -1 : retryCount + 1)\n                            .takeWhile(retryCount -> retryCount != -1)\n                            .flatMap(retryCount -> Flowable.timer((long) Math.pow(2, retryCount) * 100, TimeUnit.MILLISECONDS)))\n                    .subscribe(publish -> {\n                                for (MessageHandler messageHandler : messageHandlers) {\n                                    if (messageHandler.isSubscribe(publish.getTopic().toString())) {\n                                        log.info("【Hivemq-V5】 => MQTT接收到消息，Topic：{}", publish.getTopic());\n                                        messageHandler\n                                                .handle(new MqttMessage(publish.getPayloadAsBytes(), publish.getTopic().toString()));\n                                    }\n                                }\n                            }, e -> log.error("【Hivemq-V5】 => MQTT消息处理失败，错误信息：{}", e.getMessage(), e),\n                            () -> log.info("【Hivemq-V5】 => MQTT订阅消息结束，请稍候。。。。。。"));\n        }\n    }\n\n    private Mqtt5ClientBuilder getMqtt5ClientBuilder() {\n        Mqtt5ClientBuilder builder = Mqtt5Client.builder().addConnectedListener(listener -> {\n                    Optional<? extends MqttClientConnectionConfig> config = Optional\n                            .of(listener.getClientConfig().getConnectionConfig())\n                            .get();\n                    config.ifPresent(mqttClientConnectionConfig -> log.info("【Hivemq-V5】 => MQTT连接保持时间：{}ms",\n                            mqttClientConnectionConfig.getKeepAlive()));\n                    log.info("【Hivemq-V5】 => MQTT已连接，客户端ID：{}", hivemqProperties.getClientId());\n                })\n                .addDisconnectedListener(\n                        listener -> log.error("【Hivemq-V5】 => MQTT已断开连接，客户端ID：{}", hivemqProperties.getClientId()))\n                .identifier(hivemqProperties.getClientId())\n                .serverHost(hivemqProperties.getHost())\n                .serverPort(hivemqProperties.getPort())\n                .executorConfig(MqttClientExecutorConfig.builder()\n                        .nettyExecutor(ThreadUtils.newVirtualTaskExecutor())\n                        .nettyThreads(hivemqProperties.getNettyThreads())\n                        .applicationScheduler(Schedulers.from(ThreadUtils.newVirtualTaskExecutor()))\n                        .build());\n        // 开启重连\n        if (hivemqProperties.isAutomaticReconnect()) {\n            builder.automaticReconnect()\n                    .initialDelay(hivemqProperties.getAutomaticReconnectInitialDelay(), TimeUnit.SECONDS)\n                    .maxDelay(hivemqProperties.getAutomaticReconnectMaxDelay(), TimeUnit.SECONDS)\n                    .applyAutomaticReconnect();\n        }\n        if (hivemqProperties.isAuth()) {\n            builder.simpleAuth()\n                    .username(hivemqProperties.getUsername())\n                    .password(hivemqProperties.getPassword().getBytes())\n                    .applySimpleAuth();\n        }\n        return builder;\n    }\n\n    private void checkTopicAndQos(String[] topics, int[] qosArray) {\n        if (topics == null || qosArray == null) {\n            throw new IllegalArgumentException("【" + "Hivemq-V5" + "】 => Topics and QoS arrays cannot be null");\n        }\n        if (topics.length != qosArray.length) {\n            throw new IllegalArgumentException("【" + "Hivemq-V5" + "】 => Topics and QoS arrays must have the same length");\n        }\n        if (topics.length == 0) {\n            throw new IllegalArgumentException("【" + "Hivemq-V5" + "】 => Topics array cannot be empty");\n        }\n    }\n\n    private void checkTopic(String[] topics) {\n        if (topics.length == 0) {\n            throw new IllegalArgumentException("【" + "Hivemq-V5" + "】 => Topics array cannot be empty");\n        }\n    }\n\n}\n\n\nHivemqV5MqttClientTest\n\n/**\n * @author laokou\n */\n@SpringBootTest\n@RequiredArgsConstructor\n@TestConstructor(autowireMode = TestConstructor.AutowireMode.ALL)\nclass HivemqV5MqttClientTest {\n\n    private final List<MessageHandler> messageHandlers;\n\n    @Test\n    void testMqttClient() throws InterruptedException {\n        HivemqProperties hivemqProperties = new HivemqProperties();\n        hivemqProperties.setClientId("test-client-1");\n        hivemqProperties.setTopics(Set.of("/test-topic-1/#"));\n        HivemqClientV5 hivemqClientV5 = new HivemqClientV5(hivemqProperties, messageHandlers);\n        hivemqClientV5.open();\n        hivemqClientV5.publish("/test-topic-1/123", "Hello World123".getBytes());\n    }\n\n}\n\n\nHivemqClientV3\n\n/**\n * @author laokou\n */\n@Slf4j\npublic class HivemqClientV3 {\n\n    /**\n     * 服务下线数据.\n     */\n    private final byte[] WILL_PAYLOAD = "offline".getBytes(UTF_8);\n\n    private final HivemqProperties hivemqProperties;\n\n    private final List<MessageHandler> messageHandlers;\n\n    private volatile Mqtt3RxClient client;\n\n    private final Object lock = new Object();\n\n    private volatile Disposable connectDisposable;\n\n    private volatile Disposable subscribeDisposable;\n\n    private volatile Disposable unSubscribeDisposable;\n\n    private volatile Disposable publishDisposable;\n\n    private volatile Disposable disconnectDisposable;\n\n    private volatile Disposable consumeDisposable;\n\n    public HivemqClientV3(HivemqProperties hivemqProperties, List<MessageHandler> messageHandlers) {\n        this.hivemqProperties = hivemqProperties;\n        this.messageHandlers = messageHandlers;\n    }\n\n    public void open() {\n        if (Objects.isNull(client)) {\n            synchronized (lock) {\n                if (Objects.isNull(client)) {\n                    client = getMqtt3ClientBuilder().buildRx();\n                }\n            }\n        }\n        connect();\n        consume();\n    }\n\n    public void close() {\n        if (!Objects.isNull(client)) {\n            disconnectDisposable = client.disconnect()\n                    .subscribeOn(Schedulers.io())\n                    .retryWhen(errors -> errors.scan(1, (retryCount, error) -> retryCount > 5 ? -1 : retryCount + 1)\n                            .takeWhile(retryCount -> retryCount != -1)\n                            .flatMap(retryCount -> Flowable.timer((long) Math.pow(2, retryCount) * 100, TimeUnit.MILLISECONDS)))\n                    .subscribe(() -> log.info("【Hivemq-V3】 => MQTT断开连接成功，客户端ID：{}", hivemqProperties.getClientId()),\n                            e -> log.error("【Hivemq-V3】 => MQTT断开连接失败，错误信息：{}", e.getMessage(), e));\n        }\n    }\n\n    public void subscribe() {\n        String[] topics = getTopics();\n        subscribe(topics, getQosArray(topics));\n    }\n\n    public String[] getTopics() {\n        return hivemqProperties.getTopics().toArray(String[]::new);\n    }\n\n    public int[] getQosArray(String[] topics) {\n        return Stream.of(topics).mapToInt(item -> hivemqProperties.getSubscribeQos()).toArray();\n    }\n\n    public void subscribe(String[] topics, int[] qosArray) {\n        checkTopicAndQos(topics, qosArray);\n        if (!Objects.isNull(client)) {\n            List<Mqtt3Subscription> subscriptions = new ArrayList<>(topics.length);\n            for (int i = 0; i < topics.length; i++) {\n                subscriptions.add(Mqtt3Subscription.builder()\n                        .topicFilter(topics[i])\n                        .qos(getMqttQos(qosArray[i]))\n                        .build());\n            }\n            subscribeDisposable = client.subscribeWith()\n                    .addSubscriptions(subscriptions)\n                    .applySubscribe()\n                    .subscribeOn(Schedulers.io())\n                    .retryWhen(errors -> errors.scan(1, (retryCount, error) -> retryCount > 5 ? -1 : retryCount + 1)\n                            .takeWhile(retryCount -> retryCount != -1)\n                            .flatMap(retryCount -> Flowable.timer((long) Math.pow(2, retryCount) * 100, TimeUnit.MILLISECONDS)))\n                    .subscribe(ack -> log.info("【Hivemq-V3】 => MQTT订阅成功，主题: {}", String.join("、", topics)), e -> log\n                            .error("【Hivemq-V3】 => MQTT订阅失败，主题：{}，错误信息：{}", String.join("、", topics), e.getMessage(), e));\n        }\n    }\n\n    public void unSubscribe() {\n        String[] topics = hivemqProperties.getTopics().toArray(String[]::new);\n        unSubscribe(topics);\n    }\n\n    public void unSubscribe(String[] topics) {\n        checkTopic(topics);\n        if (!Objects.isNull(client)) {\n            List<MqttTopicFilter> matchedTopics = new ArrayList<>(topics.length);\n            for (String topic : topics) {\n                matchedTopics.add(MqttTopicFilter.of(topic));\n            }\n            unSubscribeDisposable = client.unsubscribeWith()\n                    .addTopicFilters(matchedTopics)\n                    .applyUnsubscribe()\n                    .subscribeOn(Schedulers.io())\n                    .retryWhen(errors -> errors.scan(1, (retryCount, error) -> retryCount > 5 ? -1 : retryCount + 1)\n                            .takeWhile(retryCount -> retryCount != -1)\n                            .flatMap(retryCount -> Flowable.timer((long) Math.pow(2, retryCount) * 100, TimeUnit.MILLISECONDS)))\n                    .subscribe(() -> log.info("【Hivemq-V3】 => MQTT取消订阅成功，主题：{}", String.join("、", topics)), e -> log\n                            .error("【Hivemq-V3】 => MQTT取消订阅失败，主题：{}，错误信息：{}", String.join("、", topics), e.getMessage(), e));\n        }\n    }\n\n    public void publish(String topic, byte[] payload, int qos) {\n        if (!Objects.isNull(client)) {\n            publishDisposable = client\n                    .publish(Flowable.just(Mqtt3Publish.builder()\n                            .topic(topic)\n                            .qos(getMqttQos(qos))\n                            .payload(payload)\n                            .retain(hivemqProperties.isRetain())\n                            .build()))\n                    .subscribeOn(Schedulers.io())\n                    .retryWhen(errors -> errors.scan(1, (retryCount, error) -> retryCount > 5 ? -1 : retryCount + 1)\n                            .takeWhile(retryCount -> retryCount != -1)\n                            .flatMap(retryCount -> Flowable.timer((long) Math.pow(2, retryCount) * 100, TimeUnit.MILLISECONDS)))\n                    .subscribe(ack -> log.info("【Hivemq-V3】 => MQTT消息发布成功，topic：{}", topic),\n                            e -> log.error("【Hivemq-V3】 => MQTT消息发布失败，topic：{}，错误信息：{}", topic, e.getMessage(), e));\n        }\n    }\n\n    public void publish(String topic, byte[] payload) {\n        publish(topic, payload, hivemqProperties.getPublishQos());\n    }\n\n    public void dispose(Disposable disposable) {\n        if (!Objects.isNull(disposable) && !disposable.isDisposed()) {\n            // 显式取消订阅\n            disposable.dispose();\n        }\n    }\n\n    public void dispose() {\n        dispose(connectDisposable);\n        dispose(subscribeDisposable);\n        dispose(unSubscribeDisposable);\n        dispose(publishDisposable);\n        dispose(consumeDisposable);\n        dispose(disconnectDisposable);\n    }\n\n    public void reSubscribe() {\n        log.info("【Hivemq-V3】 => MQTT重新订阅开始");\n        dispose(subscribeDisposable);\n        subscribe();\n        log.info("【Hivemq-V3】 => MQTT重新订阅结束");\n    }\n\n    private MqttQos getMqttQos(int qos) {\n        return MqttQos.fromCode(qos);\n    }\n\n    private void connect() {\n        connectDisposable = client.connectWith()\n                .keepAlive(hivemqProperties.getKeepAliveInterval())\n                .willPublish()\n                .topic("will/topic")\n                .payload(WILL_PAYLOAD)\n                .qos(getMqttQos(hivemqProperties.getWillQos()))\n                .retain(true)\n                .applyWillPublish()\n                .restrictions()\n                .sendMaximum(hivemqProperties.getSendMaximum())\n                .sendMaximumPacketSize(hivemqProperties.getSendMaximumPacketSize())\n                .applyRestrictions()\n                .applyConnect()\n                .toFlowable()\n                .firstElement()\n                .subscribeOn(Schedulers.io())\n                .retryWhen(errors -> errors.scan(1, (retryCount, error) -> retryCount > 5 ? -1 : retryCount + 1)\n                        .takeWhile(retryCount -> retryCount != -1)\n                        .flatMap(retryCount -> Flowable.timer((long) Math.pow(2, retryCount) * 100, TimeUnit.MILLISECONDS)))\n                .subscribe(\n                        ack -> log.info("【Hivemq-V3】 => MQTT连接成功，主机：{}，端口：{}，客户端ID：{}", hivemqProperties.getHost(),\n                                hivemqProperties.getPort(), hivemqProperties.getClientId()),\n                        e -> log.error("【Hivemq-V3】 => MQTT连接失败，错误信息：{}", e.getMessage(), e));\n    }\n\n    private void consume() {\n        if (!Objects.isNull(client)) {\n            consumeDisposable = client.publishes(MqttGlobalPublishFilter.ALL)\n                    .onBackpressureBuffer(8192)\n                    .observeOn(Schedulers.computation(), false, 8192)\n                    .doOnSubscribe(subscribe -> {\n                        log.info("【Hivemq-V3】 => MQTT开始订阅消息，请稍候。。。。。。");\n                        reSubscribe();\n                    })\n                    .subscribeOn(Schedulers.io())\n                    .retryWhen(errors -> errors.scan(1, (retryCount, error) -> retryCount > 5 ? -1 : retryCount + 1)\n                            .takeWhile(retryCount -> retryCount != -1)\n                            .flatMap(retryCount -> Flowable.timer((long) Math.pow(2, retryCount) * 100, TimeUnit.MILLISECONDS)))\n                    .subscribe(publish -> {\n                                for (MessageHandler messageHandler : messageHandlers) {\n                                    if (messageHandler.isSubscribe(publish.getTopic().toString())) {\n                                        log.info("【Hivemq-V3】 => MQTT接收到消息，Topic：{}", publish.getTopic());\n                                        messageHandler\n                                                .handle(new MqttMessage(publish.getPayloadAsBytes(), publish.getTopic().toString()));\n                                    }\n                                }\n                            }, e -> log.error("【Hivemq-V3】 => MQTT消息处理失败，错误信息：{}", e.getMessage(), e),\n                            () -> log.info("【Hivemq-V3】 => MQTT订阅消息结束，请稍候。。。。。。"));\n        }\n    }\n\n    private Mqtt3ClientBuilder getMqtt3ClientBuilder() {\n        Mqtt3ClientBuilder builder = Mqtt3Client.builder().addConnectedListener(listener -> {\n                    Optional<? extends MqttClientConnectionConfig> config = Optional\n                            .of(listener.getClientConfig().getConnectionConfig())\n                            .get();\n                    config.ifPresent(mqttClientConnectionConfig -> log.info("【Hivemq-V5】 => MQTT连接保持时间：{}ms",\n                            mqttClientConnectionConfig.getKeepAlive()));\n                    log.info("【Hivemq-V3】 => MQTT已连接，客户端ID：{}", hivemqProperties.getClientId());\n                })\n                .addDisconnectedListener(\n                        listener -> log.error("【Hivemq-V3】 => MQTT已断开连接，客户端ID：{}", hivemqProperties.getClientId()))\n                .identifier(hivemqProperties.getClientId())\n                .serverHost(hivemqProperties.getHost())\n                .serverPort(hivemqProperties.getPort())\n                .executorConfig(MqttClientExecutorConfig.builder()\n                        .nettyExecutor(ThreadUtils.newVirtualTaskExecutor())\n                        .nettyThreads(hivemqProperties.getNettyThreads())\n                        .applicationScheduler(Schedulers.from(ThreadUtils.newVirtualTaskExecutor()))\n                        .build());\n        // 开启重连\n        if (hivemqProperties.isAutomaticReconnect()) {\n            builder.automaticReconnect()\n                    .initialDelay(hivemqProperties.getAutomaticReconnectInitialDelay(), TimeUnit.SECONDS)\n                    .maxDelay(hivemqProperties.getAutomaticReconnectMaxDelay(), TimeUnit.SECONDS)\n                    .applyAutomaticReconnect();\n        }\n        if (hivemqProperties.isAuth()) {\n            builder.simpleAuth()\n                    .username(hivemqProperties.getUsername())\n                    .password(hivemqProperties.getPassword().getBytes())\n                    .applySimpleAuth();\n        }\n        return builder;\n    }\n\n    private void checkTopicAndQos(String[] topics, int[] qosArray) {\n        if (topics == null || qosArray == null) {\n            throw new IllegalArgumentException("【" + "Hivemq-V3" + "】 => Topics and QoS arrays cannot be null");\n        }\n        if (topics.length != qosArray.length) {\n            throw new IllegalArgumentException("【" + "Hivemq-V3" + "】 => Topics and QoS arrays must have the same length");\n        }\n        if (topics.length == 0) {\n            throw new IllegalArgumentException("【" + "Hivemq-V3" + "】 => Topics array cannot be empty");\n        }\n    }\n\n    private void checkTopic(String[] topics) {\n        if (topics.length == 0) {\n            throw new IllegalArgumentException("【" + "Hivemq-V3" + "】 => Topics array cannot be empty");\n        }\n    }\n\n}\n\n\nHivemqV3MqttClientTest\n\n/**\n * @author laokou\n */\n@SpringBootTest\n@RequiredArgsConstructor\n@TestConstructor(autowireMode = TestConstructor.AutowireMode.ALL)\nclass HivemqV3MqttClientTest {\n\n    private final List<MessageHandler> messageHandlers;\n\n    @Test\n    void testMqttClient() throws InterruptedException {\n        HivemqProperties hivemqProperties2 = new HivemqProperties();\n        hivemqProperties2.setClientId("test-client-2");\n        hivemqProperties2.setTopics(Set.of("/test-topic-2/#"));\n        HivemqClientV3 hivemqClientV3 = new HivemqClientV3(hivemqProperties2, messageHandlers);\n        hivemqClientV3.open();\n        hivemqClientV3.publish("/test-topic-2/456", "Hello World456".getBytes());\n    }\n\n}\n\n\n\n# Vert.x MQTT Client【推荐，只兼容mqtt3.1.1】\n\n# Vert.x MQTT文档\n\n# 引入依赖\n\n<dependencies>\n    <dependency>\n      <groupId>io.vertx</groupId>\n      <artifactId>vertx-mqtt</artifactId>\n      <version>4.5.14</version>\n    </dependency>\n    <dependency>\n      <groupId>io.projectreactor</groupId>\n      <artifactId>reactor-core</artifactId>\n      <version>3.7.5</version>\n    </dependency>\n</dependencies>\n\n\n# 项目集成\n\nMqttClientProperties\n\n/**\n * @author laokou\n */\n@Data\npublic class MqttClientProperties {\n\n    private boolean auth = true;\n\n    private String username = "emqx";\n\n    private String password = "laokou123";\n\n    private String host = "127.0.0.1";\n\n    private int port = 1883;\n\n    private String clientId = UUIDGenerator.generateUUID();\n\n    // @formatter:off\n    /**\n     * 控制是否创建新会话（true=新建，false=复用历史会话）. clearStart=true => Broker 会在连接断开后立即清除所有会话信息.\n     * clearStart=false => Broker 会在连接断开后保存会话信息，并在重新连接后复用会话信息.\n     */\n    // @formatter:on\n    private boolean clearSession = false;\n\n    private int receiveBufferSize = Integer.MAX_VALUE;\n\n    private int maxMessageSize = -1;\n\n    /**\n     * 心跳包每隔60秒发一次.\n     */\n    private int keepAliveInterval = 60;\n\n    private boolean autoKeepAlive = true;\n\n    private long reconnectInterval = 1000;\n\n    private int reconnectAttempts = Integer.MAX_VALUE;\n\n    private Map<String, Integer> topics = new HashMap<>(0);\n\n    private int willQos = 1;\n\n    private boolean willRetain = false;\n\n    private int ackTimeout = -1;\n\n    private boolean autoAck = true;\n\n    /**\n     * 服务下线主题.\n     */\n    private String willTopic = "/will";\n\n    /**\n     * 服务下线数据.\n     */\n    private String willPayload = "offline";\n\n}\n\n\nVertxConfig\n\n/**\n * @author laokou\n */\n@Configuration\npublic class VertxConfig {\n\n    @Bean\n    public Vertx vertx() {\n       VertxOptions vertxOptions = new VertxOptions();\n       vertxOptions.setMaxEventLoopExecuteTime(60);\n       vertxOptions.setMaxWorkerExecuteTime(60);\n       vertxOptions.setMaxEventLoopExecuteTimeUnit(TimeUnit.SECONDS);\n       vertxOptions.setMaxWorkerExecuteTimeUnit(TimeUnit.SECONDS);\n       vertxOptions.setPreferNativeTransport(true);\n       return Vertx.vertx(vertxOptions);\n    }\n\n}\n\n\nVertxMqttClient\n\n注意：vertx-mqtt不支持客户端自动断线重连，网络不通畅或连接关闭，需要自己手动调用连接！！！实现这个重连的功能\n\n/**\n * @author laokou\n */\n@Slf4j\npublic class VertxMqttClient {\n\n    private final Sinks.Many<MqttPublishMessage> messageSink = Sinks.many()\n       .multicast()\n       .onBackpressureBuffer(Integer.MAX_VALUE, false);\n\n    private final MqttClient mqttClient;\n\n    private final Vertx vertx;\n\n    private final MqttClientProperties mqttClientProperties;\n\n    private final List<MessageHandler> messageHandlers;\n\n    private final List<Disposable> disposables;\n\n    private final AtomicBoolean isConnected = new AtomicBoolean(false);\n\n    private final AtomicBoolean isLoaded = new AtomicBoolean(false);\n\n    private final AtomicBoolean isReconnected = new AtomicBoolean(true);\n\n    public VertxMqttClient(final Vertx vertx, final MqttClientProperties mqttClientProperties,\n          final List<MessageHandler> messageHandlers) {\n       this.vertx = vertx;\n       this.mqttClientProperties = mqttClientProperties;\n       this.mqttClient = MqttClient.create(vertx, getOptions());\n       this.messageHandlers = messageHandlers;\n       this.disposables = Collections.synchronizedList(new ArrayList<>());\n    }\n\n    public void open() {\n       mqttClient.closeHandler(v -> {\n          isConnected.set(false);\n          log.error("【Vertx-MQTT-Client】 => MQTT连接断开，客户端ID：{}", mqttClientProperties.getClientId());\n          reconnect();\n       })\n          .publishHandler(messageSink::tryEmitNext)\n          // 仅接收QoS1和QoS2的消息\n          .publishCompletionHandler(id -> {\n             // log.info("【Vertx-MQTT-Client】 => 接收MQTT的PUBACK或PUBCOMP数据包，数据包ID：{}", id);\n          })\n          .subscribeCompletionHandler(ack -> {\n             // log.info("【Vertx-MQTT-Client】 => 接收MQTT的SUBACK数据包，数据包ID：{}", ack.messageId());\n          })\n          .unsubscribeCompletionHandler(id -> {\n             // log.info("【Vertx-MQTT-Client】 => 接收MQTT的UNSUBACK数据包，数据包ID：{}", id);\n          })\n          .pingResponseHandler(s -> {\n             // log.info("【Vertx-MQTT-Client】 => 接收MQTT的PINGRESP数据包");\n          })\n          .connect(mqttClientProperties.getPort(), mqttClientProperties.getHost(), connectResult -> {\n             if (connectResult.succeeded()) {\n                isConnected.set(true);\n                log.info("【Vertx-MQTT-Client】 => MQTT连接成功，主机：{}，端口：{}，客户端ID：{}", mqttClientProperties.getHost(),\n                      mqttClientProperties.getPort(), mqttClientProperties.getClientId());\n                resubscribe();\n             }\n             else {\n                isConnected.set(false);\n                Throwable ex = connectResult.cause();\n                log.error("【Vertx-MQTT-Client】 => MQTT连接失败，原因：{}，客户端ID：{}", ex.getMessage(),\n                      mqttClientProperties.getClientId(), ex);\n                reconnect();\n             }\n          });\n    }\n\n    public void close() {\n       disconnect();\n    }\n\n    /**\n     * Sends the PUBLISH message to the remote MQTT server.\n     * @param topic topic on which the message is published\n     * @param payload message payload\n     * @param qos QoS level\n     * @param isDup if the message is a duplicate\n     * @param isRetain if the message needs to be retained\n     */\n    public void publish(String topic, int qos, String payload, boolean isDup, boolean isRetain) {\n       mqttClient.publish(topic, Buffer.buffer(payload), convertQos(qos), isDup, isRetain);\n    }\n\n    private void reconnect() {\n       if (isReconnected.get()) {\n          log.info("【Vertx-MQTT-Client】 => MQTT尝试重连");\n          vertx.setTimer(mqttClientProperties.getReconnectInterval(),\n                handler -> ThreadUtils.newVirtualTaskExecutor().execute(this::open));\n       }\n    }\n\n    private void subscribe() {\n       Map<String, Integer> topics = mqttClientProperties.getTopics();\n       checkTopicAndQos(topics);\n       mqttClient.subscribe(topics, subscribeResult -> {\n          if (subscribeResult.succeeded()) {\n             log.info("【Vertx-MQTT-Client】 => MQTT订阅成功，主题: {}", String.join("、", topics.keySet()));\n          }\n          else {\n             Throwable ex = subscribeResult.cause();\n             log.error("【Vertx-MQTT-Client】 => MQTT订阅失败，主题：{}，错误信息：{}", String.join("、", topics.keySet()), ex.getMessage(),\n                   ex);\n          }\n       });\n    }\n\n    private void resubscribe() {\n       if (isConnected.get() || mqttClient.isConnected()) {\n          ThreadUtils.newVirtualTaskExecutor().execute(this::subscribe);\n       }\n       if (isLoaded.compareAndSet(false, true)) {\n          ThreadUtils.newVirtualTaskExecutor().execute(this::consume);\n       }\n    }\n\n    private void consume() {\n       Disposable disposable = messageSink.asFlux().doOnNext(mqttPublishMessage -> {\n          String topic = mqttPublishMessage.topicName();\n          log.info("【Vertx-MQTT-Client】 => MQTT接收到消息，Topic：{}", topic);\n          for (MessageHandler messageHandler : messageHandlers) {\n             if (messageHandler.isSubscribe(topic)) {\n                messageHandler.handle(new MqttMessage(mqttPublishMessage.payload(), topic));\n             }\n          }\n       }).subscribeOn(Schedulers.boundedElastic()).subscribe();\n       disposables.add(disposable);\n    }\n\n    private void disposable() {\n       for (Disposable disposable : disposables) {\n          if (ObjectUtils.isNotNull(disposable) && !disposable.isDisposed()) {\n             disposable.dispose();\n          }\n       }\n    }\n\n    private void disconnect() {\n       isReconnected.set(false);\n       mqttClient.disconnect(disconnectResult -> {\n          if (disconnectResult.succeeded()) {\n             disposable();\n             log.info("【Vertx-MQTT-Client】 => MQTT断开连接成功");\n             disposables.clear();\n          }\n          else {\n             Throwable ex = disconnectResult.cause();\n             log.error("【Vertx-MQTT-Client】 => MQTT断开连接失败，错误信息：{}", ex.getMessage(), ex);\n          }\n       });\n    }\n\n    private void unsubscribe(List<String> topics) {\n       checkTopic(topics);\n       mqttClient.unsubscribe(topics, unsubscribeResult -> {\n          if (unsubscribeResult.succeeded()) {\n             log.info("【Vertx-MQTT-Client】 => MQTT取消订阅成功，主题：{}", String.join("、", topics));\n          }\n          else {\n             Throwable ex = unsubscribeResult.cause();\n             log.error("【Vertx-MQTT-Client】 => MQTT取消订阅失败，主题：{}，错误信息：{}", String.join("、", topics), ex.getMessage(), ex);\n          }\n       });\n    }\n\n    private MqttClientOptions getOptions() {\n       MqttClientOptions options = new MqttClientOptions();\n       options.setClientId(mqttClientProperties.getClientId());\n       options.setCleanSession(mqttClientProperties.isClearSession());\n       options.setAutoKeepAlive(mqttClientProperties.isAutoKeepAlive());\n       options.setKeepAliveInterval(mqttClientProperties.getKeepAliveInterval());\n       options.setReconnectAttempts(mqttClientProperties.getReconnectAttempts());\n       options.setReconnectInterval(mqttClientProperties.getReconnectInterval());\n       options.setWillQoS(mqttClientProperties.getWillQos());\n       options.setWillTopic(mqttClientProperties.getWillTopic());\n       options.setAutoAck(mqttClientProperties.isAutoAck());\n       options.setAckTimeout(mqttClientProperties.getAckTimeout());\n       options.setWillRetain(mqttClientProperties.isWillRetain());\n       options.setWillMessageBytes(Buffer.buffer(mqttClientProperties.getWillPayload()));\n       options.setReceiveBufferSize(mqttClientProperties.getReceiveBufferSize());\n       options.setMaxMessageSize(mqttClientProperties.getMaxMessageSize());\n       if (mqttClientProperties.isAuth()) {\n          options.setPassword(mqttClientProperties.getPassword());\n          options.setUsername(mqttClientProperties.getUsername());\n       }\n       return options;\n    }\n\n    private void checkTopicAndQos(Map<String, Integer> topics) {\n       topics.forEach((topic, qos) -> {\n          if (StringUtils.isEmpty(topic) || ObjectUtils.isNull(qos)) {\n             throw new IllegalArgumentException("【Vertx-MQTT-Client】 => Topic and QoS cannot be null");\n          }\n       });\n    }\n\n    private void checkTopic(List<String> topics) {\n       if (CollectionUtils.isEmpty(topics)) {\n          throw new IllegalArgumentException("【Vertx-MQTT-Client】 => Topics list cannot be empty");\n       }\n    }\n\n    private MqttQoS convertQos(int qos) {\n       return MqttQoS.valueOf(qos);\n    }\n\n}\n\n\nVertxMqttClientTest\n\n/**\n * @author laokou\n */\n@SpringBootTest\n@RequiredArgsConstructor\n@ContextConfiguration(classes = { DefaultMessageHandler.class, VertxConfig.class })\n@TestConstructor(autowireMode = TestConstructor.AutowireMode.ALL)\nclass VertxMqttClientTest {\n\n    private final List<MessageHandler> messageHandlers;\n\n    private final Vertx vertx;\n\n    @Test\n    void testMqttClient() throws InterruptedException {\n       MqttClientProperties properties = new MqttClientProperties();\n       properties.setHost("127.0.0.1");\n       properties.setPort(1883);\n       properties.setUsername("emqx");\n       properties.setPassword("laokou123");\n       properties.setClientId("test-client-1");\n       properties.setTopics(Map.of("/test-topic-1/#", 1));\n       VertxMqttClient vertxMqttClient = new VertxMqttClient(vertx, properties, messageHandlers);\n       assertThatNoException().isThrownBy(vertxMqttClient::open);\n       Thread.sleep(500);\n       (() -> vertxMqttClient.publish("/test-topic-1/test", 1, "test", false, false));\n       Thread.sleep(500);\n       (vertxMqttClient::close);\n       Thread.sleep(500);\n    }\n\n}\n\n\n详细代码请点击\n\n非常推荐使用vertx-mqtt，项目平稳运行好用！！！\n\n但是，需要时注意的是，项目部署到Linux系统，需要最少分配 -Xmx2100m -Xms2100m 内存，不然连接会关闭！\n\n我是老寇，我们下次再见啦~',normalizedContent:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n跟我一起学习对接mqtt\n\n\n# 安装emqx\n\n采用docker-compose一键式启动！！！\n\n还没有安装docker朋友，参考文章下面两篇文章\n\n# ubuntu20.04安装docker\n\n# centos7安装docker 23.0.6\n\n# 使用 emqx 5.4.1，按照老夫的教程来，请不要改版本号！！！\n\n# 使用 emqx 5.4.1，按照老夫的教程来，请不要改版本号！！！\n\n# 使用 emqx 5.4.1，按照老夫的教程来，请不要改版本号！！！\n\nservices:\n    emqx:\n      image: emqx/emqx:5.4.1\n      container_name: emqx\n      # 保持容器在没有守护程序的情况下运行\n      tty: true\n      restart: always\n      privileged: true\n      ports:\n        - "1883:1883"\n        - "8083:8083"\n        - "8883:8883"\n        - "18083:18083"\n      environment:\n        - tz=asia/shanghai\n      volumes:\n        # 挂载数据存储\n        - ./emqx/data:/opt/emqx/data\n        # 挂载日志文件\n        - ./emqx/log:/opt/emqx/log\n      networks:\n        - iot_network\nnetworks:\n  iot_network:\n    driver: bridge\n\n\n访问 http://127.0.0.1:18083 设置密码\n\n\n\n\n# emqx mqtt【摘抄自官方文档】\n\nemqx官方文档\n\nmqtt 是物联网 (iot) 的 oasis 标准消息传递协议。它被设计为一种极轻量的发布/订阅消息传输协议，非常适合以较小的代码占用空间和极低的网络带宽连接远程设备。mqtt 目前广泛应用于汽车、制造、电信、石油和天然气等众多行业。\n\nemqx 完全兼容 mqtt 5.0 和 3.x，本节将介绍 mqtt 相关功能的基本配置项，包括基本 mqtt 设置、订阅设置、会话设置、强制关闭设置和强制垃圾回收设置等\n\n\n# 客户端对接\n\n本文章采用三种客户端对接\n\n维度      paho                  hivemq-mqtt-client   vert.x mqtt client\n协议支持    mqtt 3.1.1（5.0 实验性）   mqtt 5.0 完整支持        mqtt 5.0（较新版本）\n性能      中（同步模式）               高（异步非阻塞）             极高（响应式架构）\n依赖复杂度   低                     中（仅 netty）           高（需 vert.x 生态）\n社区资源    丰富                    较少                   中等\n适用场景    传统 iot、跨语言项目          企业级 mqtt 5.0、高吞吐     响应式系统、高并发微服务\n\n\n# paho【不推荐，连接不稳定】\n\npaho代码地址\n\n# 引入依赖\n\n<dependencies>\n    <dependency>\n        <groupid>org.eclipse.paho</groupid>\n        <artifactid>org.eclipse.paho.mqttv5.client</artifactid>\n        <version>1.2.5</version>\n    </dependency>\n    <dependency>\n        <groupid>org.eclipse.paho</groupid>\n        <artifactid>org.eclipse.paho.client.mqttv3</artifactid>\n        <version>1.2.5</version>\n    </dependency>\n</dependencies>\n\n\n# 项目集成\n\npahoproperties\n\n/**\n * @author laokou\n */\n@data\npublic class pahoproperties {\n\n    private boolean auth = true;\n\n    private string username = "emqx";\n\n    private string password = "laokou123";\n\n    private string host = "127.0.0.1";\n\n    private int port = 1883;\n\n    private string clientid;\n\n    private int subscribeqos = 1;\n\n    private int publishqos = 0;\n\n    private int willqos = 1;\n\n    private int connectiontimeout = 60;\n\n    private boolean manualacks = false;\n\n    // @formatter:off\n    /**\n     * 控制是否创建新会话（true=新建，false=复用历史会话）. clearstart=true => broker 会在连接断开后立即清除所有会话信息.\n     * clearstart=false => broker 会在连接断开后保存会话信息，并在重新连接后复用会话信息.\n     * <a href="https://github.com/hivemq/hivemq-mqtt-client/issues/627">...</a>\n     */\n    // @formatter:on\n    private boolean clearstart = false;\n\n    private int receivemaximum = 10000;\n\n    private int maximumpacketsize = 10000;\n\n    // @formatter:off\n    /**\n     * 默认会话保留一天.\n     * 最大值，4294967295l，会话过期时间【永不过期，单位秒】.\n     * 定义客户端断开后会话保留的时间（仅在 clean session = false 时生效）.\n     */\n    private long sessionexpiryinterval = 86400l;\n    // @formatter:on\n\n    /**\n     * 心跳包每隔60秒发一次.\n     */\n    private int keepaliveinterval = 60;\n\n    private boolean automaticreconnect = true;\n\n    private set<string> topics = new hashset<>(0);\n\n}\n\n\npahomqttclientmessagecallbackv5\n\n/**\n * @author laokou\n */\n@slf4j\n@requiredargsconstructor\npublic class pahomqttclientmessagecallbackv5 implements mqttcallback {\n\n    private final list<messagehandler> messagehandlers;\n\n    @override\n    public void disconnected(mqttdisconnectresponse disconnectresponse) {\n       log.error("【paho-v5】 => mqtt关闭连接");\n    }\n\n    @override\n    public void mqtterroroccurred(mqttexception ex) {\n       log.error("【paho-v5】 => mqtt报错，错误信息：{}", ex.getmessage());\n    }\n\n    @override\n    public void messagearrived(string topic, mqttmessage message) {\n       for (messagehandler messagehandler : messagehandlers) {\n          if (messagehandler.issubscribe(topic)) {\n             log.info("【paho-v5】 => mqtt接收到消息，topic：{}", topic);\n             messagehandler.handle(new org.laokou.sample.mqtt.handler.mqttmessage(message.getpayload(), topic));\n          }\n       }\n    }\n\n    @override\n    public void deliverycomplete(imqtttoken token) {\n       log.info("【paho-v5】 => mqtt消息发送成功，消息id：{}", token.getmessageid());\n    }\n\n    @override\n    public void connectcomplete(boolean reconnect, string uri) {\n       if (reconnect) {\n          log.info("【paho-v5】 => mqtt重连成功，uri：{}", uri);\n       }\n       else {\n          log.info("【paho-v5】 => mqtt建立连接，uri：{}", uri);\n       }\n    }\n\n    @override\n    public void authpacketarrived(int reasoncode, mqttproperties properties) {\n       log.info("【paho-v5】 => 接收到身份验证数据包：{}", reasoncode);\n    }\n\n}\n\n\npahov5mqttclienttest\n\n/**\n * @author laokou\n */\n@springboottest\n@requiredargsconstructor\n@testconstructor(autowiremode = testconstructor.autowiremode.all)\nclass pahov5mqttclienttest {\n\n    private final list<messagehandler> messagehandlers;\n\n    @test\n    void testmqttclient() throws interruptedexception {\n        scheduledexecutorservice scheduledexecutorservice = executors.newscheduledthreadpool(16);\n\n        pahoproperties pahoproperties = new pahoproperties();\n        pahoproperties.setclientid("test-client-3");\n        pahoproperties.settopics(set.of("/test-topic-3/#"));\n        pahomqttclientv5 pahomqttclientv5 = new pahomqttclientv5(pahoproperties, messagehandlers, scheduledexecutorservice);\n        pahomqttclientv5.open();\n        thread.sleep(1000);\n        pahomqttclientv5.publish("/test-topic-3/789", "hello world789".getbytes());\n    }\n\n}\n\n\npahomqttclientmessagecallbackv3\n\n/**\n * @author laokou\n */\n@slf4j\n@requiredargsconstructor\npublic class pahomqttclientmessagecallbackv3 implements mqttcallback {\n\n    private final list<messagehandler> messagehandlers;\n\n    @override\n    public void deliverycomplete(imqttdeliverytoken imqttdeliverytoken) {\n       log.info("【paho-v3】 => mqtt消息发送成功，消息id：{}", imqttdeliverytoken.getmessageid());\n    }\n\n    @override\n    public void connectionlost(throwable throwable) {\n       log.error("【paho-v3】 => mqtt关闭连接");\n    }\n\n    @override\n    public void messagearrived(string topic, mqttmessage message) throws exception {\n       for (messagehandler messagehandler : messagehandlers) {\n          if (messagehandler.issubscribe(topic)) {\n             log.info("【paho-v3】 => mqtt接收到消息，topic：{}", topic);\n             messagehandler.handle(new org.laokou.sample.mqtt.handler.mqttmessage(message.getpayload(), topic));\n          }\n       }\n    }\n}\n\n\npahov3mqttclienttest\n\n/**\n * @author laokou\n */\n@springboottest\n@requiredargsconstructor\n@testconstructor(autowiremode = testconstructor.autowiremode.all)\nclass pahov3mqttclienttest {\n\n    private final list<messagehandler> messagehandlers;\n\n    @test\n    void testmqttclient() throws interruptedexception {\n        scheduledexecutorservice scheduledexecutorservice = executors.newscheduledthreadpool(16);\n\n        pahoproperties pahoproperties2 = new pahoproperties();\n        pahoproperties2.setclientid("test-client-4");\n        pahoproperties2.settopics(set.of("/test-topic-4/#"));\n        pahomqttclientv3 pahomqttclientv3 = new pahomqttclientv3(pahoproperties2, messagehandlers, scheduledexecutorservice);\n        pahomqttclientv3.open();\n        thread.sleep(1000);\n        pahomqttclientv3.publish("/test-topic-4/000", "hello world000".getbytes());\n    }\n\n}\n\n\n\n# hivemq-mqtt-client【不推荐】\n\n注意：订阅一段时间收不到数据，标准mqtt5.0协议，不兼容emqx broker mqtt5.0\n\nhivemq代码地址\n\n# 引入依赖\n\n<dependencies>\n    <dependency>\n        <groupid>com.hivemq</groupid>\n        <artifactid>hivemq-mqtt-client-reactor</artifactid>\n        <version>1.3.5</version>\n    </dependency>\n    <dependency>\n        <groupid>com.hivemq</groupid>\n        <artifactid>hivemq-mqtt-client-epoll</artifactid>\n        <version>1.3.5</version>\n        <type>pom</type>\n    </dependency>\n<dependencies>\n\n\n# 项目集成\n\nhivemqproperties\n\n/**\n * @author laokou\n */\n@data\npublic class hivemqproperties {\n\n    private boolean auth = true;\n\n    private string username = "emqx";\n\n    private string password = "laokou123";\n\n    private string host = "127.0.0.1";\n\n    private int port = 1883;\n\n    private string clientid;\n\n    private int subscribeqos = 1;\n\n    private int publishqos = 0;\n\n    private int willqos = 1;\n\n    // @formatter:off\n    /**\n     * 控制是否创建新会话（true=新建，false=复用历史会话）. clearstart=true => broker 会在连接断开后立即清除所有会话信息.\n     * clearstart=false => broker 会在连接断开后保存会话信息，并在重新连接后复用会话信息.\n     * <a href="https://github.com/hivemq/hivemq-mqtt-client/issues/627">...</a>\n     */\n    // @formatter:on\n    private boolean clearstart = false;\n\n    private int receivemaximum = 10000;\n\n    private int sendmaximum = 10000;\n\n    private int maximumpacketsize = 10000;\n\n    private int sendmaximumpacketsize = 10000;\n\n    private int topicaliasmaximum = 1024;\n\n    private int sendtopicaliasmaximum = 2048;\n\n    private long messageexpiryinterval = 86400l;\n\n    private boolean requestprobleminformation = true;\n\n    private boolean requestresponseinformation = true;\n\n    // @formatter:off\n    /**\n     * 默认会话保留一天.\n     * 最大值，4294967295l，会话过期时间【永不过期，单位秒】.\n     * 定义客户端断开后会话保留的时间（仅在 clean session = false 时生效）.\n     */\n    private long sessionexpiryinterval = 86400l;\n    // @formatter:on\n\n    /**\n     * 心跳包每隔60秒发一次.\n     */\n    private int keepaliveinterval = 60;\n\n    private boolean automaticreconnect = true;\n\n    private long automaticreconnectmaxdelay = 5;\n\n    private long automaticreconnectinitialdelay = 1;\n\n    private set<string> topics = new hashset<>(0);\n\n    private int nettythreads = 32;\n\n    private boolean retain = false;\n\n    private boolean nolocal = false;\n\n}\n\n\nhivemqclientv5\n\n/**\n * @author laokou\n */\n@slf4j\npublic class hivemqclientv5 {\n\n    /**\n     * 响应主题.\n     */\n    private final string response_topic = "response/topic";\n\n    /**\n     * 服务下线数据.\n     */\n    private final byte[] will_payload = "offline".getbytes(utf_8);\n\n    /**\n     * 相关数据.\n     */\n    private final byte[] correlation_data = "correlationdata".getbytes(utf_8);\n\n    private final hivemqproperties hivemqproperties;\n\n    private final list<messagehandler> messagehandlers;\n\n    private volatile mqtt5rxclient client;\n\n    private final object lock = new object();\n\n    private volatile disposable connectdisposable;\n\n    private volatile disposable subscribedisposable;\n\n    private volatile disposable unsubscribedisposable;\n\n    private volatile disposable publishdisposable;\n\n    private volatile disposable disconnectdisposable;\n\n    private volatile disposable consumedisposable;\n\n    public hivemqclientv5(hivemqproperties hivemqproperties, list<messagehandler> messagehandlers) {\n        this.hivemqproperties = hivemqproperties;\n        this.messagehandlers = messagehandlers;\n    }\n\n    public void open() {\n        if (objects.isnull(client)) {\n            synchronized (lock) {\n                if (objects.isnull(client)) {\n                    client = getmqtt5clientbuilder().buildrx();\n                }\n            }\n        }\n        connect();\n        consume();\n    }\n\n    public void close() {\n        if (!objects.isnull(client)) {\n            disconnectdisposable = client.disconnectwith()\n                    .sessionexpiryinterval(hivemqproperties.getsessionexpiryinterval())\n                    .applydisconnect()\n                    .subscribeon(schedulers.io())\n                    .retrywhen(errors -> errors.scan(1, (retrycount, error) -> retrycount > 5 ? -1 : retrycount + 1)\n                            .takewhile(retrycount -> retrycount != -1)\n                            .flatmap(retrycount -> flowable.timer((long) math.pow(2, retrycount) * 100, timeunit.milliseconds)))\n                    .subscribe(() -> log.info("【hivemq-v5】 => mqtt断开连接成功，客户端id：{}", hivemqproperties.getclientid()),\n                            e -> log.error("【hivemq-v5】 => mqtt断开连接失败，错误信息：{}", e.getmessage(), e));\n        }\n    }\n\n    public void subscribe() {\n        string[] topics = gettopics();\n        subscribe(topics, getqosarray(topics));\n    }\n\n    public string[] gettopics() {\n        return hivemqproperties.gettopics().toarray(string[]::new);\n    }\n\n    public int[] getqosarray(string[] topics) {\n        return stream.of(topics).maptoint(item -> hivemqproperties.getsubscribeqos()).toarray();\n    }\n\n    public void subscribe(string[] topics, int[] qosarray) {\n        checktopicandqos(topics, qosarray);\n        if (!objects.isnull(client)) {\n            list<mqtt5subscription> subscriptions = new arraylist<>(topics.length);\n            for (int i = 0; i < topics.length; i++) {\n                subscriptions.add(mqtt5subscription.builder()\n                        .topicfilter(topics[i])\n                        .qos(getmqttqos(qosarray[i]))\n                        .retainaspublished(hivemqproperties.isretain())\n                        .nolocal(hivemqproperties.isnolocal())\n                        .build());\n            }\n            subscribedisposable = client.subscribewith()\n                    .addsubscriptions(subscriptions)\n                    .applysubscribe()\n                    .subscribeon(schedulers.io())\n                    .retrywhen(errors -> errors.scan(1, (retrycount, error) -> retrycount > 5 ? -1 : retrycount + 1)\n                            .takewhile(retrycount -> retrycount != -1)\n                            .flatmap(retrycount -> flowable.timer((long) math.pow(2, retrycount) * 100, timeunit.milliseconds)))\n                    .subscribe(ack -> log.info("【hivemq-v5】 => mqtt订阅成功，主题: {}", string.join("、", topics)), e -> log\n                            .error("【hivemq-v5】 => mqtt订阅失败，主题：{}，错误信息：{}", string.join("、", topics), e.getmessage(), e));\n        }\n    }\n\n    public void unsubscribe() {\n        string[] topics = hivemqproperties.gettopics().toarray(string[]::new);\n        unsubscribe(topics);\n    }\n\n    public void unsubscribe(string[] topics) {\n        checktopic(topics);\n        if (!objects.isnull(client)) {\n            list<mqtttopicfilter> matchedtopics = new arraylist<>(topics.length);\n            for (string topic : topics) {\n                matchedtopics.add(mqtttopicfilter.of(topic));\n            }\n            unsubscribedisposable = client.unsubscribewith()\n                    .addtopicfilters(matchedtopics)\n                    .applyunsubscribe()\n                    .subscribeon(schedulers.io())\n                    .retrywhen(errors -> errors.scan(1, (retrycount, error) -> retrycount > 5 ? -1 : retrycount + 1)\n                            .takewhile(retrycount -> retrycount != -1)\n                            .flatmap(retrycount -> flowable.timer((long) math.pow(2, retrycount) * 100, timeunit.milliseconds)))\n                    .subscribe(ack -> log.info("【hivemq-v5】 => mqtt取消订阅成功，主题：{}", string.join("、", topics)), e -> log\n                            .error("【hivemq-v5】 => mqtt取消订阅失败，主题：{}，错误信息：{}", string.join("、", topics), e.getmessage(), e));\n        }\n    }\n\n    public void publish(string topic, byte[] payload, int qos) {\n        if (!objects.isnull(client)) {\n            publishdisposable = client\n                    .publish(flowable.just(mqtt5publish.builder()\n                            .topic(topic)\n                            .qos(getmqttqos(qos))\n                            .payload(payload)\n                            .nomessageexpiry()\n                            .retain(hivemqproperties.isretain())\n                            .messageexpiryinterval(hivemqproperties.getmessageexpiryinterval())\n                            .correlationdata(correlation_data)\n                            .payloadformatindicator(mqtt5payloadformatindicator.utf_8)\n                            .contenttype("text/plain")\n                            .responsetopic(response_topic)\n                            .build()))\n                    .subscribeon(schedulers.io())\n                    .retrywhen(errors -> errors.scan(1, (retrycount, error) -> retrycount > 5 ? -1 : retrycount + 1)\n                            .takewhile(retrycount -> retrycount != -1)\n                            .flatmap(retrycount -> flowable.timer((long) math.pow(2, retrycount) * 100, timeunit.milliseconds)))\n                    .subscribe(ack -> log.info("【hivemq-v5】 => mqtt消息发布成功，topic：{}", topic),\n                            e -> log.error("【hivemq-v5】 => mqtt消息发布失败，topic：{}，错误信息：{}", topic, e.getmessage(), e));\n        }\n    }\n\n    public void publish(string topic, byte[] payload) {\n        publish(topic, payload, hivemqproperties.getpublishqos());\n    }\n\n    public void dispose(disposable disposable) {\n        if (!objects.isnull(disposable) && !disposable.isdisposed()) {\n            // 显式取消订阅\n            disposable.dispose();\n        }\n    }\n\n    public void dispose() {\n        dispose(connectdisposable);\n        dispose(subscribedisposable);\n        dispose(unsubscribedisposable);\n        dispose(publishdisposable);\n        dispose(consumedisposable);\n        dispose(disconnectdisposable);\n    }\n\n    public void resubscribe() {\n        log.info("【hivemq-v5】 => mqtt重新订阅开始");\n        dispose(subscribedisposable);\n        subscribe();\n        log.info("【hivemq-v5】 => mqtt重新订阅结束");\n    }\n\n    private mqttqos getmqttqos(int qos) {\n        return mqttqos.fromcode(qos);\n    }\n\n    private void connect() {\n        connectdisposable = client.connectwith()\n                .keepalive(hivemqproperties.getkeepaliveinterval())\n                .cleanstart(hivemqproperties.isclearstart())\n                .sessionexpiryinterval(hivemqproperties.getsessionexpiryinterval())\n                .willpublish()\n                .topic("will/topic")\n                .payload(will_payload)\n                .qos(getmqttqos(hivemqproperties.getwillqos()))\n                .retain(true)\n                .messageexpiryinterval(100)\n                .delayinterval(10)\n                .payloadformatindicator(mqtt5payloadformatindicator.utf_8)\n                .contenttype("text/plain")\n                .responsetopic(response_topic)\n                .correlationdata(correlation_data)\n                .applywillpublish()\n                .restrictions()\n                .receivemaximum(hivemqproperties.getreceivemaximum())\n                .sendmaximum(hivemqproperties.getsendmaximum())\n                .maximumpacketsize(hivemqproperties.getmaximumpacketsize())\n                .sendmaximumpacketsize(hivemqproperties.getsendmaximumpacketsize())\n                .topicaliasmaximum(hivemqproperties.gettopicaliasmaximum())\n                .sendtopicaliasmaximum(hivemqproperties.getsendtopicaliasmaximum())\n                .requestprobleminformation(hivemqproperties.isrequestprobleminformation())\n                .requestresponseinformation(hivemqproperties.isrequestresponseinformation())\n                .applyrestrictions()\n                .applyconnect()\n                .toflowable()\n                .firstelement()\n                .subscribeon(schedulers.io())\n                .retrywhen(errors -> errors.scan(1, (retrycount, error) -> retrycount > 5 ? -1 : retrycount + 1)\n                        .takewhile(retrycount -> retrycount != -1)\n                        .flatmap(retrycount -> flowable.timer((long) math.pow(2, retrycount) * 100, timeunit.milliseconds)))\n                .subscribe(\n                        ack -> log.info("【hivemq-v5】 => mqtt连接成功，主机：{}，端口：{}，客户端id：{}", hivemqproperties.gethost(),\n                                hivemqproperties.getport(), hivemqproperties.getclientid()),\n                        e -> log.error("【hivemq-v5】 => mqtt连接失败，错误信息：{}", e.getmessage(), e));\n    }\n\n    private void consume() {\n        if (!objects.isnull(client)) {\n            consumedisposable = client.publishes(mqttglobalpublishfilter.all)\n                    .onbackpressurebuffer(8192)\n                    .observeon(schedulers.computation(), false, 8192)\n                    .doonsubscribe(subscribe -> {\n                        log.info("【hivemq-v5】 => mqtt开始订阅消息，请稍候。。。。。。");\n                        resubscribe();\n                    })\n                    .subscribeon(schedulers.io())\n                    .retrywhen(errors -> errors.scan(1, (retrycount, error) -> retrycount > 5 ? -1 : retrycount + 1)\n                            .takewhile(retrycount -> retrycount != -1)\n                            .flatmap(retrycount -> flowable.timer((long) math.pow(2, retrycount) * 100, timeunit.milliseconds)))\n                    .subscribe(publish -> {\n                                for (messagehandler messagehandler : messagehandlers) {\n                                    if (messagehandler.issubscribe(publish.gettopic().tostring())) {\n                                        log.info("【hivemq-v5】 => mqtt接收到消息，topic：{}", publish.gettopic());\n                                        messagehandler\n                                                .handle(new mqttmessage(publish.getpayloadasbytes(), publish.gettopic().tostring()));\n                                    }\n                                }\n                            }, e -> log.error("【hivemq-v5】 => mqtt消息处理失败，错误信息：{}", e.getmessage(), e),\n                            () -> log.info("【hivemq-v5】 => mqtt订阅消息结束，请稍候。。。。。。"));\n        }\n    }\n\n    private mqtt5clientbuilder getmqtt5clientbuilder() {\n        mqtt5clientbuilder builder = mqtt5client.builder().addconnectedlistener(listener -> {\n                    optional<? extends mqttclientconnectionconfig> config = optional\n                            .of(listener.getclientconfig().getconnectionconfig())\n                            .get();\n                    config.ifpresent(mqttclientconnectionconfig -> log.info("【hivemq-v5】 => mqtt连接保持时间：{}ms",\n                            mqttclientconnectionconfig.getkeepalive()));\n                    log.info("【hivemq-v5】 => mqtt已连接，客户端id：{}", hivemqproperties.getclientid());\n                })\n                .adddisconnectedlistener(\n                        listener -> log.error("【hivemq-v5】 => mqtt已断开连接，客户端id：{}", hivemqproperties.getclientid()))\n                .identifier(hivemqproperties.getclientid())\n                .serverhost(hivemqproperties.gethost())\n                .serverport(hivemqproperties.getport())\n                .executorconfig(mqttclientexecutorconfig.builder()\n                        .nettyexecutor(threadutils.newvirtualtaskexecutor())\n                        .nettythreads(hivemqproperties.getnettythreads())\n                        .applicationscheduler(schedulers.from(threadutils.newvirtualtaskexecutor()))\n                        .build());\n        // 开启重连\n        if (hivemqproperties.isautomaticreconnect()) {\n            builder.automaticreconnect()\n                    .initialdelay(hivemqproperties.getautomaticreconnectinitialdelay(), timeunit.seconds)\n                    .maxdelay(hivemqproperties.getautomaticreconnectmaxdelay(), timeunit.seconds)\n                    .applyautomaticreconnect();\n        }\n        if (hivemqproperties.isauth()) {\n            builder.simpleauth()\n                    .username(hivemqproperties.getusername())\n                    .password(hivemqproperties.getpassword().getbytes())\n                    .applysimpleauth();\n        }\n        return builder;\n    }\n\n    private void checktopicandqos(string[] topics, int[] qosarray) {\n        if (topics == null || qosarray == null) {\n            throw new illegalargumentexception("【" + "hivemq-v5" + "】 => topics and qos arrays cannot be null");\n        }\n        if (topics.length != qosarray.length) {\n            throw new illegalargumentexception("【" + "hivemq-v5" + "】 => topics and qos arrays must have the same length");\n        }\n        if (topics.length == 0) {\n            throw new illegalargumentexception("【" + "hivemq-v5" + "】 => topics array cannot be empty");\n        }\n    }\n\n    private void checktopic(string[] topics) {\n        if (topics.length == 0) {\n            throw new illegalargumentexception("【" + "hivemq-v5" + "】 => topics array cannot be empty");\n        }\n    }\n\n}\n\n\nhivemqv5mqttclienttest\n\n/**\n * @author laokou\n */\n@springboottest\n@requiredargsconstructor\n@testconstructor(autowiremode = testconstructor.autowiremode.all)\nclass hivemqv5mqttclienttest {\n\n    private final list<messagehandler> messagehandlers;\n\n    @test\n    void testmqttclient() throws interruptedexception {\n        hivemqproperties hivemqproperties = new hivemqproperties();\n        hivemqproperties.setclientid("test-client-1");\n        hivemqproperties.settopics(set.of("/test-topic-1/#"));\n        hivemqclientv5 hivemqclientv5 = new hivemqclientv5(hivemqproperties, messagehandlers);\n        hivemqclientv5.open();\n        hivemqclientv5.publish("/test-topic-1/123", "hello world123".getbytes());\n    }\n\n}\n\n\nhivemqclientv3\n\n/**\n * @author laokou\n */\n@slf4j\npublic class hivemqclientv3 {\n\n    /**\n     * 服务下线数据.\n     */\n    private final byte[] will_payload = "offline".getbytes(utf_8);\n\n    private final hivemqproperties hivemqproperties;\n\n    private final list<messagehandler> messagehandlers;\n\n    private volatile mqtt3rxclient client;\n\n    private final object lock = new object();\n\n    private volatile disposable connectdisposable;\n\n    private volatile disposable subscribedisposable;\n\n    private volatile disposable unsubscribedisposable;\n\n    private volatile disposable publishdisposable;\n\n    private volatile disposable disconnectdisposable;\n\n    private volatile disposable consumedisposable;\n\n    public hivemqclientv3(hivemqproperties hivemqproperties, list<messagehandler> messagehandlers) {\n        this.hivemqproperties = hivemqproperties;\n        this.messagehandlers = messagehandlers;\n    }\n\n    public void open() {\n        if (objects.isnull(client)) {\n            synchronized (lock) {\n                if (objects.isnull(client)) {\n                    client = getmqtt3clientbuilder().buildrx();\n                }\n            }\n        }\n        connect();\n        consume();\n    }\n\n    public void close() {\n        if (!objects.isnull(client)) {\n            disconnectdisposable = client.disconnect()\n                    .subscribeon(schedulers.io())\n                    .retrywhen(errors -> errors.scan(1, (retrycount, error) -> retrycount > 5 ? -1 : retrycount + 1)\n                            .takewhile(retrycount -> retrycount != -1)\n                            .flatmap(retrycount -> flowable.timer((long) math.pow(2, retrycount) * 100, timeunit.milliseconds)))\n                    .subscribe(() -> log.info("【hivemq-v3】 => mqtt断开连接成功，客户端id：{}", hivemqproperties.getclientid()),\n                            e -> log.error("【hivemq-v3】 => mqtt断开连接失败，错误信息：{}", e.getmessage(), e));\n        }\n    }\n\n    public void subscribe() {\n        string[] topics = gettopics();\n        subscribe(topics, getqosarray(topics));\n    }\n\n    public string[] gettopics() {\n        return hivemqproperties.gettopics().toarray(string[]::new);\n    }\n\n    public int[] getqosarray(string[] topics) {\n        return stream.of(topics).maptoint(item -> hivemqproperties.getsubscribeqos()).toarray();\n    }\n\n    public void subscribe(string[] topics, int[] qosarray) {\n        checktopicandqos(topics, qosarray);\n        if (!objects.isnull(client)) {\n            list<mqtt3subscription> subscriptions = new arraylist<>(topics.length);\n            for (int i = 0; i < topics.length; i++) {\n                subscriptions.add(mqtt3subscription.builder()\n                        .topicfilter(topics[i])\n                        .qos(getmqttqos(qosarray[i]))\n                        .build());\n            }\n            subscribedisposable = client.subscribewith()\n                    .addsubscriptions(subscriptions)\n                    .applysubscribe()\n                    .subscribeon(schedulers.io())\n                    .retrywhen(errors -> errors.scan(1, (retrycount, error) -> retrycount > 5 ? -1 : retrycount + 1)\n                            .takewhile(retrycount -> retrycount != -1)\n                            .flatmap(retrycount -> flowable.timer((long) math.pow(2, retrycount) * 100, timeunit.milliseconds)))\n                    .subscribe(ack -> log.info("【hivemq-v3】 => mqtt订阅成功，主题: {}", string.join("、", topics)), e -> log\n                            .error("【hivemq-v3】 => mqtt订阅失败，主题：{}，错误信息：{}", string.join("、", topics), e.getmessage(), e));\n        }\n    }\n\n    public void unsubscribe() {\n        string[] topics = hivemqproperties.gettopics().toarray(string[]::new);\n        unsubscribe(topics);\n    }\n\n    public void unsubscribe(string[] topics) {\n        checktopic(topics);\n        if (!objects.isnull(client)) {\n            list<mqtttopicfilter> matchedtopics = new arraylist<>(topics.length);\n            for (string topic : topics) {\n                matchedtopics.add(mqtttopicfilter.of(topic));\n            }\n            unsubscribedisposable = client.unsubscribewith()\n                    .addtopicfilters(matchedtopics)\n                    .applyunsubscribe()\n                    .subscribeon(schedulers.io())\n                    .retrywhen(errors -> errors.scan(1, (retrycount, error) -> retrycount > 5 ? -1 : retrycount + 1)\n                            .takewhile(retrycount -> retrycount != -1)\n                            .flatmap(retrycount -> flowable.timer((long) math.pow(2, retrycount) * 100, timeunit.milliseconds)))\n                    .subscribe(() -> log.info("【hivemq-v3】 => mqtt取消订阅成功，主题：{}", string.join("、", topics)), e -> log\n                            .error("【hivemq-v3】 => mqtt取消订阅失败，主题：{}，错误信息：{}", string.join("、", topics), e.getmessage(), e));\n        }\n    }\n\n    public void publish(string topic, byte[] payload, int qos) {\n        if (!objects.isnull(client)) {\n            publishdisposable = client\n                    .publish(flowable.just(mqtt3publish.builder()\n                            .topic(topic)\n                            .qos(getmqttqos(qos))\n                            .payload(payload)\n                            .retain(hivemqproperties.isretain())\n                            .build()))\n                    .subscribeon(schedulers.io())\n                    .retrywhen(errors -> errors.scan(1, (retrycount, error) -> retrycount > 5 ? -1 : retrycount + 1)\n                            .takewhile(retrycount -> retrycount != -1)\n                            .flatmap(retrycount -> flowable.timer((long) math.pow(2, retrycount) * 100, timeunit.milliseconds)))\n                    .subscribe(ack -> log.info("【hivemq-v3】 => mqtt消息发布成功，topic：{}", topic),\n                            e -> log.error("【hivemq-v3】 => mqtt消息发布失败，topic：{}，错误信息：{}", topic, e.getmessage(), e));\n        }\n    }\n\n    public void publish(string topic, byte[] payload) {\n        publish(topic, payload, hivemqproperties.getpublishqos());\n    }\n\n    public void dispose(disposable disposable) {\n        if (!objects.isnull(disposable) && !disposable.isdisposed()) {\n            // 显式取消订阅\n            disposable.dispose();\n        }\n    }\n\n    public void dispose() {\n        dispose(connectdisposable);\n        dispose(subscribedisposable);\n        dispose(unsubscribedisposable);\n        dispose(publishdisposable);\n        dispose(consumedisposable);\n        dispose(disconnectdisposable);\n    }\n\n    public void resubscribe() {\n        log.info("【hivemq-v3】 => mqtt重新订阅开始");\n        dispose(subscribedisposable);\n        subscribe();\n        log.info("【hivemq-v3】 => mqtt重新订阅结束");\n    }\n\n    private mqttqos getmqttqos(int qos) {\n        return mqttqos.fromcode(qos);\n    }\n\n    private void connect() {\n        connectdisposable = client.connectwith()\n                .keepalive(hivemqproperties.getkeepaliveinterval())\n                .willpublish()\n                .topic("will/topic")\n                .payload(will_payload)\n                .qos(getmqttqos(hivemqproperties.getwillqos()))\n                .retain(true)\n                .applywillpublish()\n                .restrictions()\n                .sendmaximum(hivemqproperties.getsendmaximum())\n                .sendmaximumpacketsize(hivemqproperties.getsendmaximumpacketsize())\n                .applyrestrictions()\n                .applyconnect()\n                .toflowable()\n                .firstelement()\n                .subscribeon(schedulers.io())\n                .retrywhen(errors -> errors.scan(1, (retrycount, error) -> retrycount > 5 ? -1 : retrycount + 1)\n                        .takewhile(retrycount -> retrycount != -1)\n                        .flatmap(retrycount -> flowable.timer((long) math.pow(2, retrycount) * 100, timeunit.milliseconds)))\n                .subscribe(\n                        ack -> log.info("【hivemq-v3】 => mqtt连接成功，主机：{}，端口：{}，客户端id：{}", hivemqproperties.gethost(),\n                                hivemqproperties.getport(), hivemqproperties.getclientid()),\n                        e -> log.error("【hivemq-v3】 => mqtt连接失败，错误信息：{}", e.getmessage(), e));\n    }\n\n    private void consume() {\n        if (!objects.isnull(client)) {\n            consumedisposable = client.publishes(mqttglobalpublishfilter.all)\n                    .onbackpressurebuffer(8192)\n                    .observeon(schedulers.computation(), false, 8192)\n                    .doonsubscribe(subscribe -> {\n                        log.info("【hivemq-v3】 => mqtt开始订阅消息，请稍候。。。。。。");\n                        resubscribe();\n                    })\n                    .subscribeon(schedulers.io())\n                    .retrywhen(errors -> errors.scan(1, (retrycount, error) -> retrycount > 5 ? -1 : retrycount + 1)\n                            .takewhile(retrycount -> retrycount != -1)\n                            .flatmap(retrycount -> flowable.timer((long) math.pow(2, retrycount) * 100, timeunit.milliseconds)))\n                    .subscribe(publish -> {\n                                for (messagehandler messagehandler : messagehandlers) {\n                                    if (messagehandler.issubscribe(publish.gettopic().tostring())) {\n                                        log.info("【hivemq-v3】 => mqtt接收到消息，topic：{}", publish.gettopic());\n                                        messagehandler\n                                                .handle(new mqttmessage(publish.getpayloadasbytes(), publish.gettopic().tostring()));\n                                    }\n                                }\n                            }, e -> log.error("【hivemq-v3】 => mqtt消息处理失败，错误信息：{}", e.getmessage(), e),\n                            () -> log.info("【hivemq-v3】 => mqtt订阅消息结束，请稍候。。。。。。"));\n        }\n    }\n\n    private mqtt3clientbuilder getmqtt3clientbuilder() {\n        mqtt3clientbuilder builder = mqtt3client.builder().addconnectedlistener(listener -> {\n                    optional<? extends mqttclientconnectionconfig> config = optional\n                            .of(listener.getclientconfig().getconnectionconfig())\n                            .get();\n                    config.ifpresent(mqttclientconnectionconfig -> log.info("【hivemq-v5】 => mqtt连接保持时间：{}ms",\n                            mqttclientconnectionconfig.getkeepalive()));\n                    log.info("【hivemq-v3】 => mqtt已连接，客户端id：{}", hivemqproperties.getclientid());\n                })\n                .adddisconnectedlistener(\n                        listener -> log.error("【hivemq-v3】 => mqtt已断开连接，客户端id：{}", hivemqproperties.getclientid()))\n                .identifier(hivemqproperties.getclientid())\n                .serverhost(hivemqproperties.gethost())\n                .serverport(hivemqproperties.getport())\n                .executorconfig(mqttclientexecutorconfig.builder()\n                        .nettyexecutor(threadutils.newvirtualtaskexecutor())\n                        .nettythreads(hivemqproperties.getnettythreads())\n                        .applicationscheduler(schedulers.from(threadutils.newvirtualtaskexecutor()))\n                        .build());\n        // 开启重连\n        if (hivemqproperties.isautomaticreconnect()) {\n            builder.automaticreconnect()\n                    .initialdelay(hivemqproperties.getautomaticreconnectinitialdelay(), timeunit.seconds)\n                    .maxdelay(hivemqproperties.getautomaticreconnectmaxdelay(), timeunit.seconds)\n                    .applyautomaticreconnect();\n        }\n        if (hivemqproperties.isauth()) {\n            builder.simpleauth()\n                    .username(hivemqproperties.getusername())\n                    .password(hivemqproperties.getpassword().getbytes())\n                    .applysimpleauth();\n        }\n        return builder;\n    }\n\n    private void checktopicandqos(string[] topics, int[] qosarray) {\n        if (topics == null || qosarray == null) {\n            throw new illegalargumentexception("【" + "hivemq-v3" + "】 => topics and qos arrays cannot be null");\n        }\n        if (topics.length != qosarray.length) {\n            throw new illegalargumentexception("【" + "hivemq-v3" + "】 => topics and qos arrays must have the same length");\n        }\n        if (topics.length == 0) {\n            throw new illegalargumentexception("【" + "hivemq-v3" + "】 => topics array cannot be empty");\n        }\n    }\n\n    private void checktopic(string[] topics) {\n        if (topics.length == 0) {\n            throw new illegalargumentexception("【" + "hivemq-v3" + "】 => topics array cannot be empty");\n        }\n    }\n\n}\n\n\nhivemqv3mqttclienttest\n\n/**\n * @author laokou\n */\n@springboottest\n@requiredargsconstructor\n@testconstructor(autowiremode = testconstructor.autowiremode.all)\nclass hivemqv3mqttclienttest {\n\n    private final list<messagehandler> messagehandlers;\n\n    @test\n    void testmqttclient() throws interruptedexception {\n        hivemqproperties hivemqproperties2 = new hivemqproperties();\n        hivemqproperties2.setclientid("test-client-2");\n        hivemqproperties2.settopics(set.of("/test-topic-2/#"));\n        hivemqclientv3 hivemqclientv3 = new hivemqclientv3(hivemqproperties2, messagehandlers);\n        hivemqclientv3.open();\n        hivemqclientv3.publish("/test-topic-2/456", "hello world456".getbytes());\n    }\n\n}\n\n\n\n# vert.x mqtt client【推荐，只兼容mqtt3.1.1】\n\n# vert.x mqtt文档\n\n# 引入依赖\n\n<dependencies>\n    <dependency>\n      <groupid>io.vertx</groupid>\n      <artifactid>vertx-mqtt</artifactid>\n      <version>4.5.14</version>\n    </dependency>\n    <dependency>\n      <groupid>io.projectreactor</groupid>\n      <artifactid>reactor-core</artifactid>\n      <version>3.7.5</version>\n    </dependency>\n</dependencies>\n\n\n# 项目集成\n\nmqttclientproperties\n\n/**\n * @author laokou\n */\n@data\npublic class mqttclientproperties {\n\n    private boolean auth = true;\n\n    private string username = "emqx";\n\n    private string password = "laokou123";\n\n    private string host = "127.0.0.1";\n\n    private int port = 1883;\n\n    private string clientid = uuidgenerator.generateuuid();\n\n    // @formatter:off\n    /**\n     * 控制是否创建新会话（true=新建，false=复用历史会话）. clearstart=true => broker 会在连接断开后立即清除所有会话信息.\n     * clearstart=false => broker 会在连接断开后保存会话信息，并在重新连接后复用会话信息.\n     */\n    // @formatter:on\n    private boolean clearsession = false;\n\n    private int receivebuffersize = integer.max_value;\n\n    private int maxmessagesize = -1;\n\n    /**\n     * 心跳包每隔60秒发一次.\n     */\n    private int keepaliveinterval = 60;\n\n    private boolean autokeepalive = true;\n\n    private long reconnectinterval = 1000;\n\n    private int reconnectattempts = integer.max_value;\n\n    private map<string, integer> topics = new hashmap<>(0);\n\n    private int willqos = 1;\n\n    private boolean willretain = false;\n\n    private int acktimeout = -1;\n\n    private boolean autoack = true;\n\n    /**\n     * 服务下线主题.\n     */\n    private string willtopic = "/will";\n\n    /**\n     * 服务下线数据.\n     */\n    private string willpayload = "offline";\n\n}\n\n\nvertxconfig\n\n/**\n * @author laokou\n */\n@configuration\npublic class vertxconfig {\n\n    @bean\n    public vertx vertx() {\n       vertxoptions vertxoptions = new vertxoptions();\n       vertxoptions.setmaxeventloopexecutetime(60);\n       vertxoptions.setmaxworkerexecutetime(60);\n       vertxoptions.setmaxeventloopexecutetimeunit(timeunit.seconds);\n       vertxoptions.setmaxworkerexecutetimeunit(timeunit.seconds);\n       vertxoptions.setprefernativetransport(true);\n       return vertx.vertx(vertxoptions);\n    }\n\n}\n\n\nvertxmqttclient\n\n注意：vertx-mqtt不支持客户端自动断线重连，网络不通畅或连接关闭，需要自己手动调用连接！！！实现这个重连的功能\n\n/**\n * @author laokou\n */\n@slf4j\npublic class vertxmqttclient {\n\n    private final sinks.many<mqttpublishmessage> messagesink = sinks.many()\n       .multicast()\n       .onbackpressurebuffer(integer.max_value, false);\n\n    private final mqttclient mqttclient;\n\n    private final vertx vertx;\n\n    private final mqttclientproperties mqttclientproperties;\n\n    private final list<messagehandler> messagehandlers;\n\n    private final list<disposable> disposables;\n\n    private final atomicboolean isconnected = new atomicboolean(false);\n\n    private final atomicboolean isloaded = new atomicboolean(false);\n\n    private final atomicboolean isreconnected = new atomicboolean(true);\n\n    public vertxmqttclient(final vertx vertx, final mqttclientproperties mqttclientproperties,\n          final list<messagehandler> messagehandlers) {\n       this.vertx = vertx;\n       this.mqttclientproperties = mqttclientproperties;\n       this.mqttclient = mqttclient.create(vertx, getoptions());\n       this.messagehandlers = messagehandlers;\n       this.disposables = collections.synchronizedlist(new arraylist<>());\n    }\n\n    public void open() {\n       mqttclient.closehandler(v -> {\n          isconnected.set(false);\n          log.error("【vertx-mqtt-client】 => mqtt连接断开，客户端id：{}", mqttclientproperties.getclientid());\n          reconnect();\n       })\n          .publishhandler(messagesink::tryemitnext)\n          // 仅接收qos1和qos2的消息\n          .publishcompletionhandler(id -> {\n             // log.info("【vertx-mqtt-client】 => 接收mqtt的puback或pubcomp数据包，数据包id：{}", id);\n          })\n          .subscribecompletionhandler(ack -> {\n             // log.info("【vertx-mqtt-client】 => 接收mqtt的suback数据包，数据包id：{}", ack.messageid());\n          })\n          .unsubscribecompletionhandler(id -> {\n             // log.info("【vertx-mqtt-client】 => 接收mqtt的unsuback数据包，数据包id：{}", id);\n          })\n          .pingresponsehandler(s -> {\n             // log.info("【vertx-mqtt-client】 => 接收mqtt的pingresp数据包");\n          })\n          .connect(mqttclientproperties.getport(), mqttclientproperties.gethost(), connectresult -> {\n             if (connectresult.succeeded()) {\n                isconnected.set(true);\n                log.info("【vertx-mqtt-client】 => mqtt连接成功，主机：{}，端口：{}，客户端id：{}", mqttclientproperties.gethost(),\n                      mqttclientproperties.getport(), mqttclientproperties.getclientid());\n                resubscribe();\n             }\n             else {\n                isconnected.set(false);\n                throwable ex = connectresult.cause();\n                log.error("【vertx-mqtt-client】 => mqtt连接失败，原因：{}，客户端id：{}", ex.getmessage(),\n                      mqttclientproperties.getclientid(), ex);\n                reconnect();\n             }\n          });\n    }\n\n    public void close() {\n       disconnect();\n    }\n\n    /**\n     * sends the publish message to the remote mqtt server.\n     * @param topic topic on which the message is published\n     * @param payload message payload\n     * @param qos qos level\n     * @param isdup if the message is a duplicate\n     * @param isretain if the message needs to be retained\n     */\n    public void publish(string topic, int qos, string payload, boolean isdup, boolean isretain) {\n       mqttclient.publish(topic, buffer.buffer(payload), convertqos(qos), isdup, isretain);\n    }\n\n    private void reconnect() {\n       if (isreconnected.get()) {\n          log.info("【vertx-mqtt-client】 => mqtt尝试重连");\n          vertx.settimer(mqttclientproperties.getreconnectinterval(),\n                handler -> threadutils.newvirtualtaskexecutor().execute(this::open));\n       }\n    }\n\n    private void subscribe() {\n       map<string, integer> topics = mqttclientproperties.gettopics();\n       checktopicandqos(topics);\n       mqttclient.subscribe(topics, subscriberesult -> {\n          if (subscriberesult.succeeded()) {\n             log.info("【vertx-mqtt-client】 => mqtt订阅成功，主题: {}", string.join("、", topics.keyset()));\n          }\n          else {\n             throwable ex = subscriberesult.cause();\n             log.error("【vertx-mqtt-client】 => mqtt订阅失败，主题：{}，错误信息：{}", string.join("、", topics.keyset()), ex.getmessage(),\n                   ex);\n          }\n       });\n    }\n\n    private void resubscribe() {\n       if (isconnected.get() || mqttclient.isconnected()) {\n          threadutils.newvirtualtaskexecutor().execute(this::subscribe);\n       }\n       if (isloaded.compareandset(false, true)) {\n          threadutils.newvirtualtaskexecutor().execute(this::consume);\n       }\n    }\n\n    private void consume() {\n       disposable disposable = messagesink.asflux().doonnext(mqttpublishmessage -> {\n          string topic = mqttpublishmessage.topicname();\n          log.info("【vertx-mqtt-client】 => mqtt接收到消息，topic：{}", topic);\n          for (messagehandler messagehandler : messagehandlers) {\n             if (messagehandler.issubscribe(topic)) {\n                messagehandler.handle(new mqttmessage(mqttpublishmessage.payload(), topic));\n             }\n          }\n       }).subscribeon(schedulers.boundedelastic()).subscribe();\n       disposables.add(disposable);\n    }\n\n    private void disposable() {\n       for (disposable disposable : disposables) {\n          if (objectutils.isnotnull(disposable) && !disposable.isdisposed()) {\n             disposable.dispose();\n          }\n       }\n    }\n\n    private void disconnect() {\n       isreconnected.set(false);\n       mqttclient.disconnect(disconnectresult -> {\n          if (disconnectresult.succeeded()) {\n             disposable();\n             log.info("【vertx-mqtt-client】 => mqtt断开连接成功");\n             disposables.clear();\n          }\n          else {\n             throwable ex = disconnectresult.cause();\n             log.error("【vertx-mqtt-client】 => mqtt断开连接失败，错误信息：{}", ex.getmessage(), ex);\n          }\n       });\n    }\n\n    private void unsubscribe(list<string> topics) {\n       checktopic(topics);\n       mqttclient.unsubscribe(topics, unsubscriberesult -> {\n          if (unsubscriberesult.succeeded()) {\n             log.info("【vertx-mqtt-client】 => mqtt取消订阅成功，主题：{}", string.join("、", topics));\n          }\n          else {\n             throwable ex = unsubscriberesult.cause();\n             log.error("【vertx-mqtt-client】 => mqtt取消订阅失败，主题：{}，错误信息：{}", string.join("、", topics), ex.getmessage(), ex);\n          }\n       });\n    }\n\n    private mqttclientoptions getoptions() {\n       mqttclientoptions options = new mqttclientoptions();\n       options.setclientid(mqttclientproperties.getclientid());\n       options.setcleansession(mqttclientproperties.isclearsession());\n       options.setautokeepalive(mqttclientproperties.isautokeepalive());\n       options.setkeepaliveinterval(mqttclientproperties.getkeepaliveinterval());\n       options.setreconnectattempts(mqttclientproperties.getreconnectattempts());\n       options.setreconnectinterval(mqttclientproperties.getreconnectinterval());\n       options.setwillqos(mqttclientproperties.getwillqos());\n       options.setwilltopic(mqttclientproperties.getwilltopic());\n       options.setautoack(mqttclientproperties.isautoack());\n       options.setacktimeout(mqttclientproperties.getacktimeout());\n       options.setwillretain(mqttclientproperties.iswillretain());\n       options.setwillmessagebytes(buffer.buffer(mqttclientproperties.getwillpayload()));\n       options.setreceivebuffersize(mqttclientproperties.getreceivebuffersize());\n       options.setmaxmessagesize(mqttclientproperties.getmaxmessagesize());\n       if (mqttclientproperties.isauth()) {\n          options.setpassword(mqttclientproperties.getpassword());\n          options.setusername(mqttclientproperties.getusername());\n       }\n       return options;\n    }\n\n    private void checktopicandqos(map<string, integer> topics) {\n       topics.foreach((topic, qos) -> {\n          if (stringutils.isempty(topic) || objectutils.isnull(qos)) {\n             throw new illegalargumentexception("【vertx-mqtt-client】 => topic and qos cannot be null");\n          }\n       });\n    }\n\n    private void checktopic(list<string> topics) {\n       if (collectionutils.isempty(topics)) {\n          throw new illegalargumentexception("【vertx-mqtt-client】 => topics list cannot be empty");\n       }\n    }\n\n    private mqttqos convertqos(int qos) {\n       return mqttqos.valueof(qos);\n    }\n\n}\n\n\nvertxmqttclienttest\n\n/**\n * @author laokou\n */\n@springboottest\n@requiredargsconstructor\n@contextconfiguration(classes = { defaultmessagehandler.class, vertxconfig.class })\n@testconstructor(autowiremode = testconstructor.autowiremode.all)\nclass vertxmqttclienttest {\n\n    private final list<messagehandler> messagehandlers;\n\n    private final vertx vertx;\n\n    @test\n    void testmqttclient() throws interruptedexception {\n       mqttclientproperties properties = new mqttclientproperties();\n       properties.sethost("127.0.0.1");\n       properties.setport(1883);\n       properties.setusername("emqx");\n       properties.setpassword("laokou123");\n       properties.setclientid("test-client-1");\n       properties.settopics(map.of("/test-topic-1/#", 1));\n       vertxmqttclient vertxmqttclient = new vertxmqttclient(vertx, properties, messagehandlers);\n       assertthatnoexception().isthrownby(vertxmqttclient::open);\n       thread.sleep(500);\n       (() -> vertxmqttclient.publish("/test-topic-1/test", 1, "test", false, false));\n       thread.sleep(500);\n       (vertxmqttclient::close);\n       thread.sleep(500);\n    }\n\n}\n\n\n详细代码请点击\n\n非常推荐使用vertx-mqtt，项目平稳运行好用！！！\n\n但是，需要时注意的是，项目部署到linux系统，需要最少分配 -xmx2100m -xms2100m 内存，不然连接会关闭！\n\n我是老寇，我们下次再见啦~',charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"Go快速开发API",frontmatter:{title:"Go快速开发API",date:"2025-03-26T21:28:03.000Z",permalink:"/pages/b4322a/"},regularPath:"/01.%E6%8C%87%E5%8D%97/07.%E5%85%B6%E4%BB%96/01.Go%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91API.html",relativePath:"01.指南/07.其他/01.Go快速开发API.md",key:"v-6f30d314",path:"/pages/b4322a/",headers:[{level:3,title:"JSON互转",slug:"json互转",normalizedTitle:"json互转",charIndex:30},{level:3,title:"时间互转",slug:"时间互转",normalizedTitle:"时间互转",charIndex:518},{level:3,title:"字符串",slug:"字符串",normalizedTitle:"字符串",charIndex:1017}],headersStr:"JSON互转 时间互转 字符串",content:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n\n# JSON互转\n\ntype Test struct {\n\tName string `json:"name"`\n\tAge  int    `json:"age"`\n}\n\nfunc TestJson(t *testing.T) {\n\ttest := Test{\n\t\tName: "张三",\n\t\tAge:  18,\n\t}\n\tbuf, _ := json.Marshal(test)\n\t// 输出 => [123 34 110 97 109 101 34 58 34 229 188 160 228 184 137 34 44 34 97 103 101 34 58 49 56 125]\n\tfmt.Println("对象转换成字节：", buf)\n\n\tvar tes Test\n\terr := json.Unmarshal(buf, &tes)\n\tif err != nil {\n\t\tfmt.Println("json unmarshal error：", err)\n\t}\n\t// 输出 => {张三 18}\n\tfmt.Println("字节转换成对象：", tes)\n}\n\n\n\n# 时间互转\n\nfunc TestTimestamp(t *testing.T) {\n\tnow := time.Now()\n\n\t// =======================格式化=======================\n\n\t// 类似输出 => 1743003091\n\ttimestamp := now.Unix()\n\tfmt.Println("当前时间【秒级】：", timestamp)\n\n\t// 类似输出 => 1743003091022\n\ttimestamp = now.UnixMilli()\n\tfmt.Println("当前时间【毫秒级】：", timestamp)\n\n\t// 类似输出 => 1743003091022934300\n\ttimestamp = now.UnixNano()\n\tfmt.Println("当前时间【纳秒级】：", timestamp)\n\n\t// 类似输出 => 2025-03-26 23:31:31\n\tdateTimeStr := now.Format("2006-01-02 15:04:05")\n\tfmt.Println("当前时间【格式化字符串】：", dateTimeStr)\n\n\t// 类似输出 => 2025-03-26\n\tdateStr := now.Format("2006-01-02")\n\tfmt.Println("当前日期【格式化字符串】：", dateStr)\n\n\t// 类似输出 => 23:31:31\n\ttimeStr := now.Format("15:04:05")\n\tfmt.Println("当前时间【格式化字符串】：", timeStr)\n\n\t// 输出 => 2025-03-26 23:29:45 +0800 CST\n\ttimestamp = int64(1743002985)\n\tdateTime := time.Unix(timestamp, 0)\n\tfmt.Println("时间：", dateTime)\n\n\t// 类似输出 => 2025年03月26日 23:39\n\tdateTimeStr = now.Format("2006年01月02日 15:04")\n\tfmt.Println("当前时间【格式化字符串】：", dateTimeStr)\n\n\t// 类似输出 => 2025-03-26T23:40:08+08:00\n\tfmt.Println("时间【格式化字符串】：", now.Format(time.RFC3339))\n\n\t// 输出 => 2025-03-26 23:47:31 +0000 UTC\n\tdateTimeStr = "2025-03-26 23:47:31"\n\tdateTime, _ = time.Parse("2006-01-02 15:04:05", dateTimeStr)\n\tfmt.Println("时间：", dateTime)\n\n\t// =======================格式化=======================\n\n\t// =======================时区=======================\n\n\t// 输出 => Local\n\tfmt.Println("时区：", now.Location())\n\n\t// 输出 => 2025-03-26 23:58:31 +0800 CST\n\t// 设置时区\n\tloc, _ := time.LoadLocation("Asia/Shanghai")\n\tdateTime = time.Date(2025, 3, 26, 23, 58, 31, 0, loc)\n\tfmt.Println("时间：", dateTime)\n\n\t// 转换时区\n\tutc := now.UTC()\n\t// 类似输出 => 2025-03-26 16:01:47.8120287 +0000 UTC\n\tfmt.Println("UTC时间：", utc)\n\tdateTime = now.In(time.FixedZone("CST", 8*3600))\n\t// 类似输出 => 2025-03-27 00:01:47.8120287 +0800 CST\n\tfmt.Println("CST时间：", dateTime)\n\n\t// =======================时区=======================\n\n\t// =======================时间加减=======================\n\n\t// 类似输出 => 2025-03-28 00:03:32.952297 +0800 CST m=+86400.008917201\n\tadd := now.Add(time.Hour * 24)\n\tfmt.Println("时间加1天：", add)\n\n\t// 类似输出 => 2025-03-26 00:04:09.7702908 +0800 CST m=-86399.992051199\n\tsub := now.Add(-time.Hour * 24)\n\tfmt.Println("时间减1天：", sub)\n\n\t// 类似输出 => 24h0m0s\n\tfmt.Println("时间差：", now.Sub(sub))\n\n\t// 类似输出 => 24\n\tfmt.Println("时间差：", now.Sub(sub).Hours())\n\n\t// 类似输出 => 2025-04-28 00:06:14.4762206 +0800 CST\n\tadd = now.AddDate(0, 1, 1)\n\tfmt.Println("时间加1月1天：", add)\n\n\tt1 := now\n\tt2 := now.Add(time.Hour * 1)\n\t// 输出 => true\n\tfmt.Println("比较：", t2.After(t1))\n\t// 输出 => true\n\tfmt.Println("比较：", t1.Before(t2))\n\n\t// =======================时间加减=======================\n\n\t// =======================其他=======================\n\n\t// 类似输出 => 2025\n\tyear := now.Year()\n\tfmt.Println("年：", year)\n\n\t// 类似输出 => 3\n\tmonth := now.Month()\n\tfmt.Println("月：", month)\n\n\t// 类似输出 => 27\n\tday := now.Day()\n\tfmt.Println("日：", day)\n\n\t// 类似输出 => 0\n\thour := now.Hour()\n\tfmt.Println("时：", hour)\n\n\t// 类似输出 => 15\n\tminute := now.Minute()\n\tfmt.Println("分：", minute)\n\n\t// 类似输出 => 54\n\tsecond := now.Second()\n\tfmt.Println("秒：", second)\n\n\t// 类似输出 => Thursday\n\tweekday := now.Weekday()\n\tfmt.Println("星期：", weekday)\n\n\t// 类似输出 => 2025-03-26 08:00:00 +0800 CST\n\ttruncate := now.Truncate(24 * time.Hour)\n\tfmt.Println("时间截断：", truncate)\n\n\t// 类似输出 => 2025-03-27 00:00:00 +0800 CST\n\tround := now.Round(time.Hour)\n\tfmt.Println("时间四舍五入：", round)\n\n\t// =======================其他=======================\n\n\t// =======================周期任务=======================\n\n\t// 等待2秒【定时器】\n\ttimer := time.NewTimer(2 * time.Second)\n\t<-timer.C\n\n\t// 每秒执行一次【周期任务】\n\tticker := time.NewTicker(1 * time.Second)\n\tdefer ticker.Stop()\n\tfor range ticker.C {\n\tfmt.Println("每秒执行一次")\n\t}\n\n\t// =======================周期任务=======================\n\n}\n\n\n\n# 字符串\n\nfunc TestString(t *testing.T) {\n\t// =======================基础操作=======================\n\ts := "hello"\n\t// 输出 => hello world\n\tfmt.Printf("%s %s", s, "world")\n\tfmt.Println()\n\ts += " world"\n\t// 输出 => hello world\n\tfmt.Println(s)\n\t// 输出 => 11\n\tfmt.Println(len(s))\n\t// 输出 => h\n\tfmt.Println(string(s[0]))\n\t// 输出 => ello world\n\tfmt.Println(s[1:])\n\t// =======================基础操作=======================\n\n\t// =======================字符串遍历=======================\n\tfor index, v := range s {\n\t\tfmt.Printf("%d：%s", index, string(v))\n\t\tfmt.Println()\n\t}\n\tfor i := 0; i < len(s); i++ {\n\t\tfmt.Printf("%d：%s", i, string(s[i]))\n\t\tfmt.Println()\n\t}\n\t// =======================字符串遍历=======================\n\n\t// =======================strings操作=======================\n\t// 输出 => true\n\tfmt.Println(strings.Contains("test", "es"))\n\t// 输出 => 2\n\tfmt.Println(strings.Count("test", "t"))\n\t// 输出 => 1\n\tfmt.Println(strings.Index("test", "e"))\n\t// 输出 => 1\n\tfmt.Println(strings.LastIndex("test", "e"))\n\t// 输出 => a-b\n\tfmt.Println(strings.Join([]string{"a", "b"}, "-"))\n\t// 输出 => tstt\n\t// -1表示替换所有\n\t// 1表示替换第一个\n\t// 0表示不替换\n\tfmt.Println(strings.Replace("test", "es", "st", -1))\n\t// 输出 => test\n\tfmt.Println(strings.Replace("test", "es", "st", 0))\n\t// 输出 => tstt\n\tfmt.Println(strings.Replace("test", "es", "st", 1))\n\t// 输出 => true\n\tfmt.Println(strings.HasSuffix("test", "st"))\n\t// 输出 => true\n\tfmt.Println(strings.HasPrefix("test", "te"))\n\t// 输出 => A B C\n\tfmt.Println(strings.Trim(" !!! A B C !!! ", " !!! "))\n\t// 输出 =>  !!! A B C\n\tfmt.Println(strings.TrimSuffix(" !!! A B C !!! ", " !!! "))\n\t// 输出 => A B C !!!\n\tfmt.Println(strings.TrimPrefix(" !!! A B C !!! ", " !!! "))\n\t// 输出 => !!! A B C !!!\n\tfmt.Println(strings.TrimSpace(" !!! A B C !!! "))\n\t// 输出 => A B C !!!\n\tfmt.Println(strings.TrimLeft(" !!! A B C !!! ", " !!! "))\n\t// 输出 =>  !!! A B C\n\tfmt.Println(strings.TrimRight(" !!! A B C !!! ", " !!! "))\n\t// 输出 => A B C !!!\n\tfmt.Println(strings.TrimLeftFunc(" !!! A B C !!! ", func(r rune) bool {\n\t\treturn r == \' \' || r == \'!\'\n\t}))\n\t// 输出 =>  !!! A B C\n\tfmt.Println(strings.TrimRightFunc(" !!! A B C !!! ", func(r rune) bool {\n\t\treturn r == \' \' || r == \'!\'\n\t}))\n\t// 输出 => [a b c]\n\tfmt.Println(strings.Split("a,b,c", ","))\n\t// 输出 => [a b,c]\n\tfmt.Println(strings.SplitN("a,b,c", ",", 2))\n\t// 输出 => [a, b, c]\n\tfmt.Println(strings.SplitAfter("a,b,c", ","))\n\t// 输出 => [a, b,c]\n\tfmt.Println(strings.SplitAfterN("a,b,c", ",", 2))\n\t// 输出 => [a b c d]\n\tfmt.Println(strings.Fields(" a b c\\td"))\n\t// 输出 => [a b c d]\n\tfmt.Println(strings.FieldsFunc(" a b c\\td", func(r rune) bool {\n\t\treturn r == \' \' || r == \'\\t\'\n\t}))\n\t// 输出 => AAb\n\tfmt.Println(strings.Map(func(r rune) rune {\n\t\tif r == \'a\' {\n\t\t\treturn \'A\'\n\t\t}\n\t\treturn r\n\t}, "aab"))\n\t// 输出 => AAb\n\tfmt.Println(strings.ToUpper("aab"))\n\t// 输出 => aab\n\tfmt.Println(strings.ToLower("AAB"))\n\t// 输出 => AAB\n\tfmt.Println(strings.ToTitle("AAB"))\n\t// 输出 => aab\n\tfmt.Println(strings.ToValidUTF8("aab", "b"))\n\t// =======================strings操作=======================\n\n\t// =======================字符串转换=======================\n\t// 输出 => abc\n\tfmt.Println(string([]byte{97, 98, 99}))\n\t// 输出 => abc\n\tfmt.Println(string([]rune{97, 98, 99}))\n\t// 输出 => abc\n\tfmt.Println(string([]rune{0x61, 0x62, 0x63}))\n\t// 输出 => 1\n\tnumStr := "123"\n\tnum, _ := fmt.Sscan(numStr, &numStr)\n\tfmt.Println(num)\n\t// 输出 => 123\n\tnum, _ = strconv.Atoi(numStr)\n\tfmt.Println(num)\n\t// 输出 => 123\n\tnumStr = strconv.Itoa(num)\n\tfmt.Println(numStr)\n\t// =======================字符串转换=======================\n\n\t// =======================字符串构建=======================\n\t// 输出 => hello world!\n\tbuilder := strings.Builder{}\n\tbuilder.WriteString("hello")\n\tbuilder.WriteRune(\' \')\n\tbuilder.WriteString("world")\n\tbuilder.WriteString("!")\n\tfmt.Println(builder.String())\n\t// 输出 => hello\n\tbuilder.Reset()\n\tbuilder.WriteString("hello")\n\tfmt.Println(builder.String())\n\t// 输出 => hello world!\n\tvar buf bytes.Buffer\n\tbuf.WriteString("hello")\n\tbuf.WriteRune(\' \')\n\tbuf.WriteString("world")\n\tbuf.WriteString("!")\n\tfmt.Println(buf.String())\n\t// =======================字符串构建=======================\n}\n\n\n我是老寇，我们下次再见啦！',normalizedContent:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n\n# json互转\n\ntype test struct {\n\tname string `json:"name"`\n\tage  int    `json:"age"`\n}\n\nfunc testjson(t *testing.t) {\n\ttest := test{\n\t\tname: "张三",\n\t\tage:  18,\n\t}\n\tbuf, _ := json.marshal(test)\n\t// 输出 => [123 34 110 97 109 101 34 58 34 229 188 160 228 184 137 34 44 34 97 103 101 34 58 49 56 125]\n\tfmt.println("对象转换成字节：", buf)\n\n\tvar tes test\n\terr := json.unmarshal(buf, &tes)\n\tif err != nil {\n\t\tfmt.println("json unmarshal error：", err)\n\t}\n\t// 输出 => {张三 18}\n\tfmt.println("字节转换成对象：", tes)\n}\n\n\n\n# 时间互转\n\nfunc testtimestamp(t *testing.t) {\n\tnow := time.now()\n\n\t// =======================格式化=======================\n\n\t// 类似输出 => 1743003091\n\ttimestamp := now.unix()\n\tfmt.println("当前时间【秒级】：", timestamp)\n\n\t// 类似输出 => 1743003091022\n\ttimestamp = now.unixmilli()\n\tfmt.println("当前时间【毫秒级】：", timestamp)\n\n\t// 类似输出 => 1743003091022934300\n\ttimestamp = now.unixnano()\n\tfmt.println("当前时间【纳秒级】：", timestamp)\n\n\t// 类似输出 => 2025-03-26 23:31:31\n\tdatetimestr := now.format("2006-01-02 15:04:05")\n\tfmt.println("当前时间【格式化字符串】：", datetimestr)\n\n\t// 类似输出 => 2025-03-26\n\tdatestr := now.format("2006-01-02")\n\tfmt.println("当前日期【格式化字符串】：", datestr)\n\n\t// 类似输出 => 23:31:31\n\ttimestr := now.format("15:04:05")\n\tfmt.println("当前时间【格式化字符串】：", timestr)\n\n\t// 输出 => 2025-03-26 23:29:45 +0800 cst\n\ttimestamp = int64(1743002985)\n\tdatetime := time.unix(timestamp, 0)\n\tfmt.println("时间：", datetime)\n\n\t// 类似输出 => 2025年03月26日 23:39\n\tdatetimestr = now.format("2006年01月02日 15:04")\n\tfmt.println("当前时间【格式化字符串】：", datetimestr)\n\n\t// 类似输出 => 2025-03-26t23:40:08+08:00\n\tfmt.println("时间【格式化字符串】：", now.format(time.rfc3339))\n\n\t// 输出 => 2025-03-26 23:47:31 +0000 utc\n\tdatetimestr = "2025-03-26 23:47:31"\n\tdatetime, _ = time.parse("2006-01-02 15:04:05", datetimestr)\n\tfmt.println("时间：", datetime)\n\n\t// =======================格式化=======================\n\n\t// =======================时区=======================\n\n\t// 输出 => local\n\tfmt.println("时区：", now.location())\n\n\t// 输出 => 2025-03-26 23:58:31 +0800 cst\n\t// 设置时区\n\tloc, _ := time.loadlocation("asia/shanghai")\n\tdatetime = time.date(2025, 3, 26, 23, 58, 31, 0, loc)\n\tfmt.println("时间：", datetime)\n\n\t// 转换时区\n\tutc := now.utc()\n\t// 类似输出 => 2025-03-26 16:01:47.8120287 +0000 utc\n\tfmt.println("utc时间：", utc)\n\tdatetime = now.in(time.fixedzone("cst", 8*3600))\n\t// 类似输出 => 2025-03-27 00:01:47.8120287 +0800 cst\n\tfmt.println("cst时间：", datetime)\n\n\t// =======================时区=======================\n\n\t// =======================时间加减=======================\n\n\t// 类似输出 => 2025-03-28 00:03:32.952297 +0800 cst m=+86400.008917201\n\tadd := now.add(time.hour * 24)\n\tfmt.println("时间加1天：", add)\n\n\t// 类似输出 => 2025-03-26 00:04:09.7702908 +0800 cst m=-86399.992051199\n\tsub := now.add(-time.hour * 24)\n\tfmt.println("时间减1天：", sub)\n\n\t// 类似输出 => 24h0m0s\n\tfmt.println("时间差：", now.sub(sub))\n\n\t// 类似输出 => 24\n\tfmt.println("时间差：", now.sub(sub).hours())\n\n\t// 类似输出 => 2025-04-28 00:06:14.4762206 +0800 cst\n\tadd = now.adddate(0, 1, 1)\n\tfmt.println("时间加1月1天：", add)\n\n\tt1 := now\n\tt2 := now.add(time.hour * 1)\n\t// 输出 => true\n\tfmt.println("比较：", t2.after(t1))\n\t// 输出 => true\n\tfmt.println("比较：", t1.before(t2))\n\n\t// =======================时间加减=======================\n\n\t// =======================其他=======================\n\n\t// 类似输出 => 2025\n\tyear := now.year()\n\tfmt.println("年：", year)\n\n\t// 类似输出 => 3\n\tmonth := now.month()\n\tfmt.println("月：", month)\n\n\t// 类似输出 => 27\n\tday := now.day()\n\tfmt.println("日：", day)\n\n\t// 类似输出 => 0\n\thour := now.hour()\n\tfmt.println("时：", hour)\n\n\t// 类似输出 => 15\n\tminute := now.minute()\n\tfmt.println("分：", minute)\n\n\t// 类似输出 => 54\n\tsecond := now.second()\n\tfmt.println("秒：", second)\n\n\t// 类似输出 => thursday\n\tweekday := now.weekday()\n\tfmt.println("星期：", weekday)\n\n\t// 类似输出 => 2025-03-26 08:00:00 +0800 cst\n\ttruncate := now.truncate(24 * time.hour)\n\tfmt.println("时间截断：", truncate)\n\n\t// 类似输出 => 2025-03-27 00:00:00 +0800 cst\n\tround := now.round(time.hour)\n\tfmt.println("时间四舍五入：", round)\n\n\t// =======================其他=======================\n\n\t// =======================周期任务=======================\n\n\t// 等待2秒【定时器】\n\ttimer := time.newtimer(2 * time.second)\n\t<-timer.c\n\n\t// 每秒执行一次【周期任务】\n\tticker := time.newticker(1 * time.second)\n\tdefer ticker.stop()\n\tfor range ticker.c {\n\tfmt.println("每秒执行一次")\n\t}\n\n\t// =======================周期任务=======================\n\n}\n\n\n\n# 字符串\n\nfunc teststring(t *testing.t) {\n\t// =======================基础操作=======================\n\ts := "hello"\n\t// 输出 => hello world\n\tfmt.printf("%s %s", s, "world")\n\tfmt.println()\n\ts += " world"\n\t// 输出 => hello world\n\tfmt.println(s)\n\t// 输出 => 11\n\tfmt.println(len(s))\n\t// 输出 => h\n\tfmt.println(string(s[0]))\n\t// 输出 => ello world\n\tfmt.println(s[1:])\n\t// =======================基础操作=======================\n\n\t// =======================字符串遍历=======================\n\tfor index, v := range s {\n\t\tfmt.printf("%d：%s", index, string(v))\n\t\tfmt.println()\n\t}\n\tfor i := 0; i < len(s); i++ {\n\t\tfmt.printf("%d：%s", i, string(s[i]))\n\t\tfmt.println()\n\t}\n\t// =======================字符串遍历=======================\n\n\t// =======================strings操作=======================\n\t// 输出 => true\n\tfmt.println(strings.contains("test", "es"))\n\t// 输出 => 2\n\tfmt.println(strings.count("test", "t"))\n\t// 输出 => 1\n\tfmt.println(strings.index("test", "e"))\n\t// 输出 => 1\n\tfmt.println(strings.lastindex("test", "e"))\n\t// 输出 => a-b\n\tfmt.println(strings.join([]string{"a", "b"}, "-"))\n\t// 输出 => tstt\n\t// -1表示替换所有\n\t// 1表示替换第一个\n\t// 0表示不替换\n\tfmt.println(strings.replace("test", "es", "st", -1))\n\t// 输出 => test\n\tfmt.println(strings.replace("test", "es", "st", 0))\n\t// 输出 => tstt\n\tfmt.println(strings.replace("test", "es", "st", 1))\n\t// 输出 => true\n\tfmt.println(strings.hassuffix("test", "st"))\n\t// 输出 => true\n\tfmt.println(strings.hasprefix("test", "te"))\n\t// 输出 => a b c\n\tfmt.println(strings.trim(" !!! a b c !!! ", " !!! "))\n\t// 输出 =>  !!! a b c\n\tfmt.println(strings.trimsuffix(" !!! a b c !!! ", " !!! "))\n\t// 输出 => a b c !!!\n\tfmt.println(strings.trimprefix(" !!! a b c !!! ", " !!! "))\n\t// 输出 => !!! a b c !!!\n\tfmt.println(strings.trimspace(" !!! a b c !!! "))\n\t// 输出 => a b c !!!\n\tfmt.println(strings.trimleft(" !!! a b c !!! ", " !!! "))\n\t// 输出 =>  !!! a b c\n\tfmt.println(strings.trimright(" !!! a b c !!! ", " !!! "))\n\t// 输出 => a b c !!!\n\tfmt.println(strings.trimleftfunc(" !!! a b c !!! ", func(r rune) bool {\n\t\treturn r == \' \' || r == \'!\'\n\t}))\n\t// 输出 =>  !!! a b c\n\tfmt.println(strings.trimrightfunc(" !!! a b c !!! ", func(r rune) bool {\n\t\treturn r == \' \' || r == \'!\'\n\t}))\n\t// 输出 => [a b c]\n\tfmt.println(strings.split("a,b,c", ","))\n\t// 输出 => [a b,c]\n\tfmt.println(strings.splitn("a,b,c", ",", 2))\n\t// 输出 => [a, b, c]\n\tfmt.println(strings.splitafter("a,b,c", ","))\n\t// 输出 => [a, b,c]\n\tfmt.println(strings.splitaftern("a,b,c", ",", 2))\n\t// 输出 => [a b c d]\n\tfmt.println(strings.fields(" a b c\\td"))\n\t// 输出 => [a b c d]\n\tfmt.println(strings.fieldsfunc(" a b c\\td", func(r rune) bool {\n\t\treturn r == \' \' || r == \'\\t\'\n\t}))\n\t// 输出 => aab\n\tfmt.println(strings.map(func(r rune) rune {\n\t\tif r == \'a\' {\n\t\t\treturn \'a\'\n\t\t}\n\t\treturn r\n\t}, "aab"))\n\t// 输出 => aab\n\tfmt.println(strings.toupper("aab"))\n\t// 输出 => aab\n\tfmt.println(strings.tolower("aab"))\n\t// 输出 => aab\n\tfmt.println(strings.totitle("aab"))\n\t// 输出 => aab\n\tfmt.println(strings.tovalidutf8("aab", "b"))\n\t// =======================strings操作=======================\n\n\t// =======================字符串转换=======================\n\t// 输出 => abc\n\tfmt.println(string([]byte{97, 98, 99}))\n\t// 输出 => abc\n\tfmt.println(string([]rune{97, 98, 99}))\n\t// 输出 => abc\n\tfmt.println(string([]rune{0x61, 0x62, 0x63}))\n\t// 输出 => 1\n\tnumstr := "123"\n\tnum, _ := fmt.sscan(numstr, &numstr)\n\tfmt.println(num)\n\t// 输出 => 123\n\tnum, _ = strconv.atoi(numstr)\n\tfmt.println(num)\n\t// 输出 => 123\n\tnumstr = strconv.itoa(num)\n\tfmt.println(numstr)\n\t// =======================字符串转换=======================\n\n\t// =======================字符串构建=======================\n\t// 输出 => hello world!\n\tbuilder := strings.builder{}\n\tbuilder.writestring("hello")\n\tbuilder.writerune(\' \')\n\tbuilder.writestring("world")\n\tbuilder.writestring("!")\n\tfmt.println(builder.string())\n\t// 输出 => hello\n\tbuilder.reset()\n\tbuilder.writestring("hello")\n\tfmt.println(builder.string())\n\t// 输出 => hello world!\n\tvar buf bytes.buffer\n\tbuf.writestring("hello")\n\tbuf.writerune(\' \')\n\tbuf.writestring("world")\n\tbuf.writestring("!")\n\tfmt.println(buf.string())\n\t// =======================字符串构建=======================\n}\n\n\n我是老寇，我们下次再见啦！',charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"物联网之使用Vertx实现TCP最佳实践【响应式】",frontmatter:{title:"物联网之使用Vertx实现TCP最佳实践【响应式】",date:"2025-05-19T07:52:07.000Z",permalink:"/pages/6da49d/"},regularPath:"/01.%E6%8C%87%E5%8D%97/08.%E6%96%87%E7%AB%A0/03.%E7%89%A9%E8%81%94%E7%BD%91%E4%B9%8B%E4%BD%BF%E7%94%A8Vertx%E5%AE%9E%E7%8E%B0TCP%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E3%80%90%E5%93%8D%E5%BA%94%E5%BC%8F%E3%80%91.html",relativePath:"01.指南/08.文章/03.物联网之使用Vertx实现TCP最佳实践【响应式】.md",key:"v-6d691196",path:"/pages/6da49d/",headers:[{level:3,title:"实现TCP-Server【响应式】",slug:"实现tcp-server【响应式】",normalizedTitle:"实现tcp-server【响应式】",charIndex:57},{level:3,title:"实现过程",slug:"实现过程",normalizedTitle:"实现过程",charIndex:93},{level:6,title:"代码比较简单，懒得讲解啦",slug:"代码比较简单-懒得讲解啦",normalizedTitle:"代码比较简单，懒得讲解啦",charIndex:107},{level:6,title:"代码比较简单，懒得讲解啦",slug:"代码比较简单-懒得讲解啦-2",normalizedTitle:"代码比较简单，懒得讲解啦",charIndex:107},{level:6,title:"代码比较简单，懒得讲解啦",slug:"代码比较简单-懒得讲解啦-3",normalizedTitle:"代码比较简单，懒得讲解啦",charIndex:107},{level:6,title:"tcp-server【响应式】",slug:"tcp-server【响应式】",normalizedTitle:"tcp-server【响应式】",charIndex:155}],headersStr:"实现TCP-Server【响应式】 实现过程 代码比较简单，懒得讲解啦 代码比较简单，懒得讲解啦 代码比较简单，懒得讲解啦 tcp-server【响应式】",content:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n跟我一起学习使用Vertx实现TCP-Server\n\n\n# 实现TCP-Server【响应式】\n\nVertx-Core地址\n\n\n# 实现过程\n\n查看源码\n\n# 代码比较简单，懒得讲解啦\n\n# 代码比较简单，懒得讲解啦\n\n# 代码比较简单，懒得讲解啦\n\n# tcp-server【响应式】\n\n<dependency>\n  <groupId>io.vertx</groupId>\n  <artifactId>vertx-core</artifactId>\n  <version>5.0.0</version>\n</dependency>\n\n\nVertxConfig\n\n/**\n * @author laokou\n */\n@Configuration\npublic class VertxConfig {\n\n    @Bean(destroyMethod = "close")\n    public Vertx vertx() {\n       VertxOptions vertxOptions = new VertxOptions();\n       vertxOptions.setMaxEventLoopExecuteTime(30);\n       vertxOptions.setWorkerPoolSize(40);\n       vertxOptions.setMaxWorkerExecuteTime(30);\n       vertxOptions.setMaxEventLoopExecuteTimeUnit(TimeUnit.SECONDS);\n       vertxOptions.setMaxWorkerExecuteTimeUnit(TimeUnit.SECONDS);\n       vertxOptions.setPreferNativeTransport(true);\n       vertxOptions.setInternalBlockingPoolSize(40);\n       vertxOptions.setEventLoopPoolSize(Math.max(32, 2 * CpuCoreSensor.availableProcessors()));\n       return Vertx.vertx(vertxOptions);\n    }\n\n}\n\n\nTcpServerProperties\n\n/**\n * @author laokou\n */\n@Data\n@Component\n@ConfigurationProperties(prefix = "spring.tcp-server")\npublic class TcpServerProperties {\n\n    private String host = "0.0.0.0";\n\n    private Set<Integer> ports = new HashSet<>(0);\n\n    private int acceptBacklog = -1;\n\n    private ClientAuth clientAuth = ClientAuth.NONE;\n\n    private boolean sni = false;\n\n    private boolean useProxyProtocol = false;\n\n    private long proxyProtocolTimeout = 30L;\n\n    private TimeUnit proxyProtocolTimeoutUnit = TimeUnit.SECONDS;\n\n    private boolean registerWriteHandler = false;\n\n}\n\n\nVertxTcpServer\n\n/**\n * @author laokou\n */\n@Slf4j\nfinal class VertxTcpServer extends AbstractVerticle {\n\n    private final TcpServerProperties properties;\n\n    private final Vertx vertx;\n\n    private volatile Flux<NetServer> netServer;\n\n    private boolean isClosed = false;\n\n    VertxTcpServer(Vertx vertx, TcpServerProperties properties) {\n       this.vertx = vertx;\n       this.properties = properties;\n    }\n\n    @Override\n    public synchronized void start() {\n       netServer = getTcpServerOptions().map(vertx::createNetServer)\n          .doOnNext(server -> server.connectHandler(socket -> {\n             socket.handler(buffer -> log.info("【Vertx-TCP-Server】 => 接收数据：{}", buffer.toString()))\n                .closeHandler(close -> log.info("【Vertx-TCP-Server】 => 连接关闭"));\n          }).listen().onComplete(result -> {\n             if (isClosed) {\n                return;\n             }\n             if (result.succeeded()) {\n                log.info("【Vertx-TCP-Server】 => TCP服务启动成功，端口：{}", result.result().actualPort());\n             }\n             else {\n                Throwable ex = result.cause();\n                log.error("【Vertx-TCP-Server】 => TCP服务启动失败，错误信息：{}", ex.getMessage(), ex);\n             }\n          }));\n       netServer.subscribeOn(Schedulers.boundedElastic()).subscribe();\n    }\n\n    @Override\n    public synchronized void stop() {\n       isClosed = true;\n       netServer.doOnNext(server -> server.close().onComplete(result -> {\n          if (result.succeeded()) {\n             log.info("【Vertx-TCP-Server】 => HTTP服务停止成功，端口：{}", server.actualPort());\n          }\n          else {\n             Throwable ex = result.cause();\n             log.error("【Vertx-TCP-Server】 => HTTP服务停止失败，错误信息：{}", ex.getMessage(), ex);\n          }\n       })).subscribeOn(Schedulers.boundedElastic()).subscribe();\n    }\n\n    public void deploy() {\n       // 部署服务\n       vertx.deployVerticle(this);\n       // 停止服务\n       Runtime.getRuntime().addShutdownHook(new Thread(this::stop));\n    }\n\n    private Flux<NetServerOptions> getTcpServerOptions() {\n       return Flux.fromIterable(properties.getPorts()).map(this::getTcpServerOption);\n    }\n\n    private NetServerOptions getTcpServerOption(int port) {\n       NetServerOptions options = new NetServerOptions();\n       options.setHost(properties.getHost());\n       options.setPort(port);\n       options.setClientAuth(properties.getClientAuth());\n       options.setSni(properties.isSni());\n       options.setUseProxyProtocol(properties.isUseProxyProtocol());\n       options.setProxyProtocolTimeout(properties.getProxyProtocolTimeout());\n       options.setProxyProtocolTimeoutUnit(properties.getProxyProtocolTimeoutUnit());\n       options.setRegisterWriteHandler(properties.isRegisterWriteHandler());\n       options.setAcceptBacklog(properties.getAcceptBacklog());\n       return options;\n    }\n\n}\n\n\n这个只是一个demo，实际生产中，比较复杂，会出现粘包和拆包，需要自定义相关规则\n\n我是老寇，我们下次再见啦！',normalizedContent:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n跟我一起学习使用vertx实现tcp-server\n\n\n# 实现tcp-server【响应式】\n\nvertx-core地址\n\n\n# 实现过程\n\n查看源码\n\n# 代码比较简单，懒得讲解啦\n\n# 代码比较简单，懒得讲解啦\n\n# 代码比较简单，懒得讲解啦\n\n# tcp-server【响应式】\n\n<dependency>\n  <groupid>io.vertx</groupid>\n  <artifactid>vertx-core</artifactid>\n  <version>5.0.0</version>\n</dependency>\n\n\nvertxconfig\n\n/**\n * @author laokou\n */\n@configuration\npublic class vertxconfig {\n\n    @bean(destroymethod = "close")\n    public vertx vertx() {\n       vertxoptions vertxoptions = new vertxoptions();\n       vertxoptions.setmaxeventloopexecutetime(30);\n       vertxoptions.setworkerpoolsize(40);\n       vertxoptions.setmaxworkerexecutetime(30);\n       vertxoptions.setmaxeventloopexecutetimeunit(timeunit.seconds);\n       vertxoptions.setmaxworkerexecutetimeunit(timeunit.seconds);\n       vertxoptions.setprefernativetransport(true);\n       vertxoptions.setinternalblockingpoolsize(40);\n       vertxoptions.seteventlooppoolsize(math.max(32, 2 * cpucoresensor.availableprocessors()));\n       return vertx.vertx(vertxoptions);\n    }\n\n}\n\n\ntcpserverproperties\n\n/**\n * @author laokou\n */\n@data\n@component\n@configurationproperties(prefix = "spring.tcp-server")\npublic class tcpserverproperties {\n\n    private string host = "0.0.0.0";\n\n    private set<integer> ports = new hashset<>(0);\n\n    private int acceptbacklog = -1;\n\n    private clientauth clientauth = clientauth.none;\n\n    private boolean sni = false;\n\n    private boolean useproxyprotocol = false;\n\n    private long proxyprotocoltimeout = 30l;\n\n    private timeunit proxyprotocoltimeoutunit = timeunit.seconds;\n\n    private boolean registerwritehandler = false;\n\n}\n\n\nvertxtcpserver\n\n/**\n * @author laokou\n */\n@slf4j\nfinal class vertxtcpserver extends abstractverticle {\n\n    private final tcpserverproperties properties;\n\n    private final vertx vertx;\n\n    private volatile flux<netserver> netserver;\n\n    private boolean isclosed = false;\n\n    vertxtcpserver(vertx vertx, tcpserverproperties properties) {\n       this.vertx = vertx;\n       this.properties = properties;\n    }\n\n    @override\n    public synchronized void start() {\n       netserver = gettcpserveroptions().map(vertx::createnetserver)\n          .doonnext(server -> server.connecthandler(socket -> {\n             socket.handler(buffer -> log.info("【vertx-tcp-server】 => 接收数据：{}", buffer.tostring()))\n                .closehandler(close -> log.info("【vertx-tcp-server】 => 连接关闭"));\n          }).listen().oncomplete(result -> {\n             if (isclosed) {\n                return;\n             }\n             if (result.succeeded()) {\n                log.info("【vertx-tcp-server】 => tcp服务启动成功，端口：{}", result.result().actualport());\n             }\n             else {\n                throwable ex = result.cause();\n                log.error("【vertx-tcp-server】 => tcp服务启动失败，错误信息：{}", ex.getmessage(), ex);\n             }\n          }));\n       netserver.subscribeon(schedulers.boundedelastic()).subscribe();\n    }\n\n    @override\n    public synchronized void stop() {\n       isclosed = true;\n       netserver.doonnext(server -> server.close().oncomplete(result -> {\n          if (result.succeeded()) {\n             log.info("【vertx-tcp-server】 => http服务停止成功，端口：{}", server.actualport());\n          }\n          else {\n             throwable ex = result.cause();\n             log.error("【vertx-tcp-server】 => http服务停止失败，错误信息：{}", ex.getmessage(), ex);\n          }\n       })).subscribeon(schedulers.boundedelastic()).subscribe();\n    }\n\n    public void deploy() {\n       // 部署服务\n       vertx.deployverticle(this);\n       // 停止服务\n       runtime.getruntime().addshutdownhook(new thread(this::stop));\n    }\n\n    private flux<netserveroptions> gettcpserveroptions() {\n       return flux.fromiterable(properties.getports()).map(this::gettcpserveroption);\n    }\n\n    private netserveroptions gettcpserveroption(int port) {\n       netserveroptions options = new netserveroptions();\n       options.sethost(properties.gethost());\n       options.setport(port);\n       options.setclientauth(properties.getclientauth());\n       options.setsni(properties.issni());\n       options.setuseproxyprotocol(properties.isuseproxyprotocol());\n       options.setproxyprotocoltimeout(properties.getproxyprotocoltimeout());\n       options.setproxyprotocoltimeoutunit(properties.getproxyprotocoltimeoutunit());\n       options.setregisterwritehandler(properties.isregisterwritehandler());\n       options.setacceptbacklog(properties.getacceptbacklog());\n       return options;\n    }\n\n}\n\n\n这个只是一个demo，实际生产中，比较复杂，会出现粘包和拆包，需要自定义相关规则\n\n我是老寇，我们下次再见啦！',charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"vue3+lime-echart各种图表使用【懒人专用，建议收藏】",frontmatter:{title:"vue3+lime-echart各种图表使用【懒人专用，建议收藏】",date:"2025-05-19T07:47:18.000Z",permalink:"/pages/0aa18d/"},regularPath:"/01.%E6%8C%87%E5%8D%97/08.%E6%96%87%E7%AB%A0/02.vue3+lime-echart%E5%90%84%E7%A7%8D%E5%9B%BE%E8%A1%A8%E4%BD%BF%E7%94%A8%E3%80%90%E6%87%92%E4%BA%BA%E4%B8%93%E7%94%A8%EF%BC%8C%E5%BB%BA%E8%AE%AE%E6%94%B6%E8%97%8F%E3%80%91.html",relativePath:"01.指南/08.文章/02.vue3+lime-echart各种图表使用【懒人专用，建议收藏】.md",key:"v-0006a629",path:"/pages/0aa18d/",headers:[{level:3,title:"安装软件",slug:"安装软件",normalizedTitle:"安装软件",charIndex:61},{level:3,title:"导入Echarts",slug:"导入echarts",normalizedTitle:"导入echarts",charIndex:100},{level:6,title:"安装echarts",slug:"安装echarts",normalizedTitle:"安装echarts",charIndex:136},{level:6,title:"导入lime-echart插件",slug:"导入lime-echart插件",normalizedTitle:"导入lime-echart插件",charIndex:210},{level:3,title:"例子展示",slug:"例子展示",normalizedTitle:"例子展示",charIndex:253},{level:6,title:"创建page/pie.vue【vue3写法】",slug:"创建page-pie-vue【vue3写法】",normalizedTitle:"创建page/pie.vue【vue3写法】",charIndex:261},{level:6,title:"配置page.json",slug:"配置page-json",normalizedTitle:"配置page.json",charIndex:1621},{level:6,title:"运行效果",slug:"运行效果",normalizedTitle:"运行效果",charIndex:1732},{level:3,title:"更多例子",slug:"更多例子",normalizedTitle:"更多例子",charIndex:1743}],headersStr:"安装软件 导入Echarts 安装echarts 导入lime-echart插件 例子展示 创建page/pie.vue【vue3写法】 配置page.json 运行效果 更多例子",content:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n跟我一起学习使用uni-app集成lime-echarts\n\n\n# 安装软件\n\n## HBuilderX地址\n\n## 微信开发者工具地址\n\n\n# 导入Echarts\n\nechart推荐使用lime-echart\n\n# 安装echarts\n\nnpm install echarts --save\nnpm install echarts-stat --save\n\n\n# 导入lime-echart插件\n\n插件地址，自行导入到uni-modules\n\n\n# 例子展示\n\n# 创建page/pie.vue【vue3写法】\n\n<template>\n  <view style=\"height: 750rpx\">\n    <lEchart ref=\"chartRef\"></lEchart>\n  </view>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\nimport * as echarts from 'echarts';\nimport lEchart from '@/uni_modules/lime-echart/components/l-echart/l-echart.vue';\n\nconst chartRef = ref(null);\n\nonMounted(() => {\n  // 确保组件已经挂载后再初始化\n  if (chartRef.value) {\n    chartRef.value.init(echarts, (chart) => {\n      const option = {\n        title: {\n          text: '某站点用户访问来源',\n          subtext: '纯属虚构',\n          left: 'center'\n        },\n        tooltip: {\n          trigger: 'item'\n        },\n        legend: {\n          orient: 'vertical',\n          left: 'left',\n        },\n        series: [\n          {\n            name: '访问来源',\n            type: 'pie',\n            radius: '50%',\n            data: [\n              { value: 1048, name: '搜索引擎' },\n              { value: 735, name: '直接访问' },\n              { value: 580, name: '邮件营销' },\n              { value: 484, name: '联盟广告' },\n              { value: 300, name: '视频广告' }\n            ],\n            emphasis: {\n              itemStyle: {\n                shadowBlur: 10,\n                shadowOffsetX: 0,\n                shadowColor: 'rgba(0, 0, 0, 0.5)'\n              }\n            }\n          }\n        ]\n      };\n      chart.setOption(option);\n    });\n  }\n});\n<\/script>\n\n\n# 配置page.json\n\n{\n    \"path\": \"pages/index/pie\",\n    \"style\": {\n       \"navigationBarTitleText\": \"饼图\"\n    }\n}\n\n\n# 运行效果\n\n\n\n\n# 更多例子\n\n\n\n需要更多地址，请查看Github\n\n我是老寇，我们下次再见啦！",normalizedContent:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n跟我一起学习使用uni-app集成lime-echarts\n\n\n# 安装软件\n\n## hbuilderx地址\n\n## 微信开发者工具地址\n\n\n# 导入echarts\n\nechart推荐使用lime-echart\n\n# 安装echarts\n\nnpm install echarts --save\nnpm install echarts-stat --save\n\n\n# 导入lime-echart插件\n\n插件地址，自行导入到uni-modules\n\n\n# 例子展示\n\n# 创建page/pie.vue【vue3写法】\n\n<template>\n  <view style=\"height: 750rpx\">\n    <lechart ref=\"chartref\"></lechart>\n  </view>\n</template>\n\n<script setup>\nimport { ref, onmounted } from 'vue';\nimport * as echarts from 'echarts';\nimport lechart from '@/uni_modules/lime-echart/components/l-echart/l-echart.vue';\n\nconst chartref = ref(null);\n\nonmounted(() => {\n  // 确保组件已经挂载后再初始化\n  if (chartref.value) {\n    chartref.value.init(echarts, (chart) => {\n      const option = {\n        title: {\n          text: '某站点用户访问来源',\n          subtext: '纯属虚构',\n          left: 'center'\n        },\n        tooltip: {\n          trigger: 'item'\n        },\n        legend: {\n          orient: 'vertical',\n          left: 'left',\n        },\n        series: [\n          {\n            name: '访问来源',\n            type: 'pie',\n            radius: '50%',\n            data: [\n              { value: 1048, name: '搜索引擎' },\n              { value: 735, name: '直接访问' },\n              { value: 580, name: '邮件营销' },\n              { value: 484, name: '联盟广告' },\n              { value: 300, name: '视频广告' }\n            ],\n            emphasis: {\n              itemstyle: {\n                shadowblur: 10,\n                shadowoffsetx: 0,\n                shadowcolor: 'rgba(0, 0, 0, 0.5)'\n              }\n            }\n          }\n        ]\n      };\n      chart.setoption(option);\n    });\n  }\n});\n<\/script>\n\n\n# 配置page.json\n\n{\n    \"path\": \"pages/index/pie\",\n    \"style\": {\n       \"navigationbartitletext\": \"饼图\"\n    }\n}\n\n\n# 运行效果\n\n\n\n\n# 更多例子\n\n\n\n需要更多地址，请查看github\n\n我是老寇，我们下次再见啦！",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"物联网之使用Vertx实现UDP最佳实践【响应式】",frontmatter:{title:"物联网之使用Vertx实现UDP最佳实践【响应式】",date:"2025-05-21T07:24:35.000Z",permalink:"/pages/3e4283/"},regularPath:"/01.%E6%8C%87%E5%8D%97/08.%E6%96%87%E7%AB%A0/05.%E7%89%A9%E8%81%94%E7%BD%91%E4%B9%8B%E4%BD%BF%E7%94%A8Vertx%E5%AE%9E%E7%8E%B0UDP%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E3%80%90%E5%93%8D%E5%BA%94%E5%BC%8F%E3%80%91.html",relativePath:"01.指南/08.文章/05.物联网之使用Vertx实现UDP最佳实践【响应式】.md",key:"v-37a6751e",path:"/pages/3e4283/",headers:[{level:3,title:"实现UDP【响应式】",slug:"实现udp【响应式】",normalizedTitle:"实现udp【响应式】",charIndex:57},{level:6,title:"注意",slug:"注意",normalizedTitle:"注意",charIndex:85},{level:3,title:"实现过程",slug:"实现过程",normalizedTitle:"实现过程",charIndex:274},{level:6,title:"代码比较简单，懒得讲解啦",slug:"代码比较简单-懒得讲解啦",normalizedTitle:"代码比较简单，懒得讲解啦",charIndex:288},{level:6,title:"代码比较简单，懒得讲解啦",slug:"代码比较简单-懒得讲解啦-2",normalizedTitle:"代码比较简单，懒得讲解啦",charIndex:288},{level:6,title:"代码比较简单，懒得讲解啦",slug:"代码比较简单-懒得讲解啦-3",normalizedTitle:"代码比较简单，懒得讲解啦",charIndex:288},{level:6,title:"服务端",slug:"服务端",normalizedTitle:"服务端",charIndex:336},{level:6,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:343},{level:5,title:"客户端【测试】",slug:"客户端【测试】",normalizedTitle:"客户端【测试】",charIndex:3770}],headersStr:"实现UDP【响应式】 注意 实现过程 代码比较简单，懒得讲解啦 代码比较简单，懒得讲解啦 代码比较简单，懒得讲解啦 服务端 引入依赖 客户端【测试】",content:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n跟我一起学习使用Vertx实现UDP-Server\n\n\n# 实现UDP【响应式】\n\nVertx-Core地址\n\n# 注意\n\nUDP是无连接的传输，这意味着您与远程客户端没有建立持续的连接。\n\n所以，您发送和接收的数据包都要包含有远程的地址。\n\n除此之外，UDP不像TCP的使用那样安全， 这也就意味着不能保证发送的数据包一定会被对应的接收端（Endpoint）接收。【传输数据时不建立连接，因此可能导致数据包丢失】\n\nUDP最适合一些允许丢弃数据包的应用（如监视应用程序，视频直播）。\n\n\n# 实现过程\n\n查看源码\n\n# 代码比较简单，懒得讲解啦\n\n# 代码比较简单，懒得讲解啦\n\n# 代码比较简单，懒得讲解啦\n\n# 服务端\n\n# 引入依赖\n\n<dependency>\n  <groupId>io.vertx</groupId>\n  <artifactId>vertx-core</artifactId>\n  <version>5.0.0</version>\n</dependency>\n\n\nUdpServerProperties\n\n/**\n * @author laokou\n */\n@Data\n@Component\n@ConfigurationProperties(prefix = "spring.udp-server")\npublic class UdpServerProperties {\n\n    private String host = "0.0.0.0";\n\n    private Set<Integer> ports = new HashSet<>(0);\n\n    private boolean broadcast = false;\n\n    private boolean loopbackModeDisabled = true;\n\n    private String multicastNetworkInterface = null;\n\n    private boolean ipV6 = false;\n\n}\n\n\nVertxUdpServer\n\n/**\n * @author laokou\n */\n@Slf4j\npublic final class VertxUdpServer extends AbstractVerticle {\n\n    private volatile Flux<DatagramSocket> datagramSocket;\n\n    private final UdpServerProperties udpServerProperties;\n\n    private boolean isClosed = false;\n\n    VertxUdpServer(Vertx vertx, UdpServerProperties udpServerProperties) {\n       this.udpServerProperties = udpServerProperties;\n       this.vertx = vertx;\n    }\n\n    @Override\n    public synchronized void start() {\n       datagramSocket = Flux.fromIterable(udpServerProperties.getPorts()).map(port -> {\n          DatagramSocket datagramSocket = vertx.createDatagramSocket(getDatagramSocketOption())\n             .handler(packet -> log.info("【Vertx-UDP-Server】 => 收到数据包：{}", packet.data()));\n          datagramSocket.listen(port, udpServerProperties.getHost()).onComplete(result -> {\n             if (isClosed) {\n                return;\n             }\n             if (result.succeeded()) {\n                log.info("【Vertx-UDP-Server】 => UDP服务启动成功，端口：{}", port);\n             }\n             else {\n                Throwable ex = result.cause();\n                log.error("【Vertx-UDP-Server】 => UDP服务启动失败，错误信息：{}", ex.getMessage(), ex);\n             }\n          });\n          return datagramSocket;\n       });\n       datagramSocket.subscribeOn(Schedulers.boundedElastic()).subscribe();\n    }\n\n    @Override\n    public synchronized void stop() {\n       isClosed = true;\n       datagramSocket.doOnNext(socket -> socket.close().onComplete(result -> {\n          if (result.succeeded()) {\n             log.info("【Vertx-UDP-Server】 => UDP服务停止成功");\n          }\n          else {\n             Throwable ex = result.cause();\n             log.error("【Vertx-UDP-Server】 => UDP服务停止失败，错误信息：{}", ex.getMessage(), ex);\n          }\n       })).subscribeOn(Schedulers.boundedElastic()).subscribe();\n    }\n\n    public void deploy() {\n       // 部署服务\n       vertx.deployVerticle(this);\n       // 停止服务\n       Runtime.getRuntime().addShutdownHook(new Thread(this::stop));\n    }\n\n    private DatagramSocketOptions getDatagramSocketOption() {\n       DatagramSocketOptions datagramSocketOptions = new DatagramSocketOptions();\n       datagramSocketOptions.setBroadcast(udpServerProperties.isBroadcast());\n       datagramSocketOptions.setLoopbackModeDisabled(udpServerProperties.isLoopbackModeDisabled());\n       datagramSocketOptions.setMulticastNetworkInterface(udpServerProperties.getMulticastNetworkInterface());\n       datagramSocketOptions.setIpV6(udpServerProperties.isIpV6());\n       return datagramSocketOptions;\n    }\n\n}\n\n\nVertxUdpServerManager\n\n/**\n * @author laokou\n */\npublic final class VertxUdpServerManager {\n\n    private VertxUdpServerManager() {\n    }\n\n    public static void deploy(final Vertx vertx, final UdpServerProperties properties) {\n       new VertxUdpServer(vertx, properties).deploy();\n    }\n\n}\n\n\n# 客户端【测试】\n\n/**\n * @author laokou\n */\n@Slf4j\n@SpringBootTest\n@RequiredArgsConstructor\n@TestConstructor(autowireMode = TestConstructor.AutowireMode.ALL)\nclass UdpTest {\n\n    private final Vertx vertx;\n\n    @Test\n    void test() throws InterruptedException {\n       for (int i = 4880; i < 5000; i++) {\n          DatagramSocket datagramSocket = vertx.createDatagramSocket();\n          int finalI = i;\n          datagramSocket.send("Hello Vertx", i, "127.0.0.1").onComplete(result -> {\n             if (result.succeeded()) {\n                log.info("【Vertx-UDP-Client】 => 发送成功，端口：{}", finalI);\n             }\n             else {\n                Throwable ex = result.cause();\n                log.error("【Vertx-UDP-Client】 => 发送失败，端口：{}，错误信息：{}", finalI, ex.getMessage(), ex);\n             }\n          });\n          Thread.sleep(2000);\n          assertThatNoException().isThrownBy(datagramSocket::close);\n       }\n    }\n\n}\n\n\n这可以满足基本的协议开发，自行修改即可！！！\n\n我是老寇，我们下次再见啦！',normalizedContent:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n跟我一起学习使用vertx实现udp-server\n\n\n# 实现udp【响应式】\n\nvertx-core地址\n\n# 注意\n\nudp是无连接的传输，这意味着您与远程客户端没有建立持续的连接。\n\n所以，您发送和接收的数据包都要包含有远程的地址。\n\n除此之外，udp不像tcp的使用那样安全， 这也就意味着不能保证发送的数据包一定会被对应的接收端（endpoint）接收。【传输数据时不建立连接，因此可能导致数据包丢失】\n\nudp最适合一些允许丢弃数据包的应用（如监视应用程序，视频直播）。\n\n\n# 实现过程\n\n查看源码\n\n# 代码比较简单，懒得讲解啦\n\n# 代码比较简单，懒得讲解啦\n\n# 代码比较简单，懒得讲解啦\n\n# 服务端\n\n# 引入依赖\n\n<dependency>\n  <groupid>io.vertx</groupid>\n  <artifactid>vertx-core</artifactid>\n  <version>5.0.0</version>\n</dependency>\n\n\nudpserverproperties\n\n/**\n * @author laokou\n */\n@data\n@component\n@configurationproperties(prefix = "spring.udp-server")\npublic class udpserverproperties {\n\n    private string host = "0.0.0.0";\n\n    private set<integer> ports = new hashset<>(0);\n\n    private boolean broadcast = false;\n\n    private boolean loopbackmodedisabled = true;\n\n    private string multicastnetworkinterface = null;\n\n    private boolean ipv6 = false;\n\n}\n\n\nvertxudpserver\n\n/**\n * @author laokou\n */\n@slf4j\npublic final class vertxudpserver extends abstractverticle {\n\n    private volatile flux<datagramsocket> datagramsocket;\n\n    private final udpserverproperties udpserverproperties;\n\n    private boolean isclosed = false;\n\n    vertxudpserver(vertx vertx, udpserverproperties udpserverproperties) {\n       this.udpserverproperties = udpserverproperties;\n       this.vertx = vertx;\n    }\n\n    @override\n    public synchronized void start() {\n       datagramsocket = flux.fromiterable(udpserverproperties.getports()).map(port -> {\n          datagramsocket datagramsocket = vertx.createdatagramsocket(getdatagramsocketoption())\n             .handler(packet -> log.info("【vertx-udp-server】 => 收到数据包：{}", packet.data()));\n          datagramsocket.listen(port, udpserverproperties.gethost()).oncomplete(result -> {\n             if (isclosed) {\n                return;\n             }\n             if (result.succeeded()) {\n                log.info("【vertx-udp-server】 => udp服务启动成功，端口：{}", port);\n             }\n             else {\n                throwable ex = result.cause();\n                log.error("【vertx-udp-server】 => udp服务启动失败，错误信息：{}", ex.getmessage(), ex);\n             }\n          });\n          return datagramsocket;\n       });\n       datagramsocket.subscribeon(schedulers.boundedelastic()).subscribe();\n    }\n\n    @override\n    public synchronized void stop() {\n       isclosed = true;\n       datagramsocket.doonnext(socket -> socket.close().oncomplete(result -> {\n          if (result.succeeded()) {\n             log.info("【vertx-udp-server】 => udp服务停止成功");\n          }\n          else {\n             throwable ex = result.cause();\n             log.error("【vertx-udp-server】 => udp服务停止失败，错误信息：{}", ex.getmessage(), ex);\n          }\n       })).subscribeon(schedulers.boundedelastic()).subscribe();\n    }\n\n    public void deploy() {\n       // 部署服务\n       vertx.deployverticle(this);\n       // 停止服务\n       runtime.getruntime().addshutdownhook(new thread(this::stop));\n    }\n\n    private datagramsocketoptions getdatagramsocketoption() {\n       datagramsocketoptions datagramsocketoptions = new datagramsocketoptions();\n       datagramsocketoptions.setbroadcast(udpserverproperties.isbroadcast());\n       datagramsocketoptions.setloopbackmodedisabled(udpserverproperties.isloopbackmodedisabled());\n       datagramsocketoptions.setmulticastnetworkinterface(udpserverproperties.getmulticastnetworkinterface());\n       datagramsocketoptions.setipv6(udpserverproperties.isipv6());\n       return datagramsocketoptions;\n    }\n\n}\n\n\nvertxudpservermanager\n\n/**\n * @author laokou\n */\npublic final class vertxudpservermanager {\n\n    private vertxudpservermanager() {\n    }\n\n    public static void deploy(final vertx vertx, final udpserverproperties properties) {\n       new vertxudpserver(vertx, properties).deploy();\n    }\n\n}\n\n\n# 客户端【测试】\n\n/**\n * @author laokou\n */\n@slf4j\n@springboottest\n@requiredargsconstructor\n@testconstructor(autowiremode = testconstructor.autowiremode.all)\nclass udptest {\n\n    private final vertx vertx;\n\n    @test\n    void test() throws interruptedexception {\n       for (int i = 4880; i < 5000; i++) {\n          datagramsocket datagramsocket = vertx.createdatagramsocket();\n          int finali = i;\n          datagramsocket.send("hello vertx", i, "127.0.0.1").oncomplete(result -> {\n             if (result.succeeded()) {\n                log.info("【vertx-udp-client】 => 发送成功，端口：{}", finali);\n             }\n             else {\n                throwable ex = result.cause();\n                log.error("【vertx-udp-client】 => 发送失败，端口：{}，错误信息：{}", finali, ex.getmessage(), ex);\n             }\n          });\n          thread.sleep(2000);\n          assertthatnoexception().isthrownby(datagramsocket::close);\n       }\n    }\n\n}\n\n\n这可以满足基本的协议开发，自行修改即可！！！\n\n我是老寇，我们下次再见啦！',charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"物联网之使用Vertx实现MQTT-Server最佳实践【响应式】",frontmatter:{title:"物联网之使用Vertx实现MQTT-Server最佳实践【响应式】",date:"2025-05-10T16:30:15.000Z",permalink:"/pages/ca4ed7/"},regularPath:"/01.%E6%8C%87%E5%8D%97/08.%E6%96%87%E7%AB%A0/01.%E7%89%A9%E8%81%94%E7%BD%91%E4%B9%8B%E4%BD%BF%E7%94%A8Vertx%E5%AE%9E%E7%8E%B0MQTT-Server%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E3%80%90%E5%93%8D%E5%BA%94%E5%BC%8F%E3%80%91.html",relativePath:"01.指南/08.文章/01.物联网之使用Vertx实现MQTT-Server最佳实践【响应式】.md",key:"v-36f5928f",path:"/pages/ca4ed7/",headers:[{level:3,title:"实现MQTT-Server【响应式】",slug:"实现mqtt-server【响应式】",normalizedTitle:"实现mqtt-server【响应式】",charIndex:58},{level:5,title:"实现思路",slug:"实现思路",normalizedTitle:"实现思路",charIndex:94},{level:6,title:"代码比较简单，懒得讲解啦",slug:"代码比较简单-懒得讲解啦",normalizedTitle:"代码比较简单，懒得讲解啦",charIndex:223},{level:6,title:"代码比较简单，懒得讲解啦",slug:"代码比较简单-懒得讲解啦-2",normalizedTitle:"代码比较简单，懒得讲解啦",charIndex:223},{level:6,title:"代码比较简单，懒得讲解啦",slug:"代码比较简单-懒得讲解啦-3",normalizedTitle:"代码比较简单，懒得讲解啦",charIndex:223},{level:5,title:"实现过程",slug:"实现过程",normalizedTitle:"实现过程",charIndex:271},{level:6,title:"kafka安装",slug:"kafka安装",normalizedTitle:"kafka安装",charIndex:285},{level:6,title:"kafka【响应式】",slug:"kafka【响应式】",normalizedTitle:"kafka【响应式】",charIndex:1845},{level:6,title:"mqtt-server【响应式】",slug:"mqtt-server【响应式】",normalizedTitle:"mqtt-server【响应式】",charIndex:6815}],headersStr:"实现MQTT-Server【响应式】 实现思路 代码比较简单，懒得讲解啦 代码比较简单，懒得讲解啦 代码比较简单，懒得讲解啦 实现过程 kafka安装 kafka【响应式】 mqtt-server【响应式】",content:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n跟我一起学习使用Vertx实现MQTT-Server\n\n\n# 实现MQTT-Server【响应式】\n\nvertx-mqtt地址\n\n# 实现思路\n\n1.启动MQTT Server并绑定很多端口记录到缓存，服务注册到Nacos，通过接口的方式获取IP和端口【负载均衡】 2.MQTT Client连接MQTT Server并上报数据 3.MQTT Server接收到数据并通过MQ转发出去\n\n# 代码比较简单，懒得讲解啦\n\n# 代码比较简单，懒得讲解啦\n\n# 代码比较简单，懒得讲解啦\n\n# 实现过程\n\n查看源码\n\n# kafka安装\n\n采用docker-compose一键式启动！！！\n\n还没有安装docker朋友，参考文章下面两篇文章\n\n# Ubuntu20.04安装Docker\n\n# Centos7安装Docker 23.0.6\n\nservices:\n    kafka:\n      image: bitnami/kafka:4.0.0\n      container_name: kafka\n      tty: true\n      ports:\n        - \'9092:9092\'\n        - \'9093:9093\'\n      environment:\n        # 节点ID\n        - KAFKA_BROKER_ID=1\n        # 允许使用kraft，即Kafka替代Zookeeper\n        - KAFKA_ENABLE_KRAFT=yes\n        # kafka角色，做broker，也要做controller\n        - KAFKA_CFG_PROCESS_ROLES=broker,controller\n        # 指定供外部使用的控制类请求信息\n        - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER\n        # 定义安全协议\n        - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT\n        # 定义kafka服务端socket监听端口\n        - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093\n        # 外网访问地址\n        - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092\n        # 允许使用PLAINTEXT监听器，默认false，不建议在生产环境使用\n        - ALLOW_PLAINTEXT_LISTENER=yes\n        # 设置broker最大内存，和初始内存\n        - KAFKA_HEAP_OPTS=-Xmx512M -Xms512M\n        # 集群地址\n        - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093\n        # 节点ID\n        - KAFKA_CFG_NODE_ID=1\n      restart: always\n      privileged: true\n      networks:\n        - iot_network\nnetworks:\n    iot_network:\n        driver: bridge\n\n\n# 创建topic【进入bin目录执行】 => 每个topic 3个分区和一个副本\nkafka-topics.sh --bootstrap-server 127.0.0.1:9092 --create --topic property-report --partitions 3 --replication-factor 1\n\nkafka-topics.sh --bootstrap-server 127.0.0.1:9092 --create --topic property-reply --partitions 3 --replication-factor 1\n\n\n# kafka【响应式】\n\n1.依赖\n\n<dependency>\n  <groupId>org.springframework.kafka</groupId>\n  <artifactId>spring-kafka</artifactId>\n  <version>3.3.5</version>\n</dependency>\n<dependency>\n  <groupId>io.projectreactor.kafka</groupId>\n  <artifactId>reactor-kafka</artifactId>\n  <version>1.3.23</version>\n</dependency>\n\n\n2.代码\n\nKafkaAutoConfig\n\n/**\n * @author laokou\n */\n@Configuration\npublic class KafkaAutoConfig {\n\n    @Bean("defaultKafkaTemplate")\n    @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n    public DefaultKafkaTemplate defaultKafkaTemplate(KafkaTemplate<String, String> kafkaTemplate) {\n       return new DefaultKafkaTemplate(kafkaTemplate);\n    }\n\n    @Bean(value = "reactiveKafkaSender")\n    @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\n    public KafkaSender reactiveKafkaSender(SenderOptions<String, String> senderOptions) {\n       return new ReactiveKafkaSender(\n             new reactor.kafka.sender.internals.DefaultKafkaSender<>(ProducerFactory.INSTANCE, senderOptions));\n    }\n\n    @Bean\n    @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\n    public SenderOptions<String, String> senderOptions(KafkaProperties kafkaProperties) {\n       Map<String, Object> props = new HashMap<>();\n       KafkaProperties.Producer producer = kafkaProperties.getProducer();\n       props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaProperties.getBootstrapServers());\n       props.put(ProducerConfig.ACKS_CONFIG, producer.getAcks());\n       props.put(ProducerConfig.RETRIES_CONFIG, producer.getRetries());\n       props.put(ProducerConfig.BATCH_SIZE_CONFIG, (int) producer.getBatchSize().toBytes());\n       props.put(ProducerConfig.BUFFER_MEMORY_CONFIG, (int) producer.getBufferMemory().toBytes());\n       props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n       props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n       return SenderOptions.create(props);\n    }\n\n    @Bean\n    @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\n    public ReceiverOptions<String, String> receiverOptions(KafkaProperties kafkaProperties) {\n       Map<String, Object> props = new HashMap<>();\n       KafkaProperties.Consumer consumer = kafkaProperties.getConsumer();\n       props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaProperties.getBootstrapServers());\n       props.put(ConsumerConfig.GROUP_ID_CONFIG, consumer.getGroupId());\n       props.put(ConsumerConfig.MAX_POLL_RECORDS_CONFIG, consumer.getMaxPollRecords());\n       props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, consumer.getEnableAutoCommit());\n       props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n       props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n       return ReceiverOptions.create(props);\n    }\n\n}\n\n\nKafkaSender\n\n/**\n * @author laokou\n */\npublic interface KafkaSender {\n\n    Flux<Boolean> send(String topic, String payload);\n\n}\n\n\nReactiveKafkaSender\n\n/**\n * @author laokou\n */\n@Slf4j\n@RequiredArgsConstructor\npublic class ReactiveKafkaSender implements KafkaSender {\n\n    private final DefaultKafkaSender<String, String> defaultKafkaSender;\n\n    @Override\n    public Flux<Boolean> send(String topic, String payload) {\n       return defaultKafkaSender.send(Mono.just(SenderRecord.create(topic, null, null, null, payload, null)))\n          .map(result -> {\n             Exception exception = result.exception();\n             if (ObjectUtils.isNotNull(exception)) {\n                log.error("【Kafka】 => 发送消息失败，错误信息：{}", exception.getMessage(), exception);\n                return false;\n             }\n             else {\n                return true;\n             }\n          });\n    }\n\n}\n\n\n3.yaml配置【自动批量提交】\n\nspring:\n  kafka:\n    bootstrap-servers: kafka:9092\n    consumer:\n      group-id: laokou-mqtt\n      # 禁用自动提交（按周期）已消费offset\n      enable-auto-commit: true\n      # 单次poll()调用返回的记录数\n      max-poll-records: 50\n      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer\n      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer\n    producer:\n      # 发生错误后，消息重发的次数。\n      retries: 5\n      # 当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。\n      batch-size: 16384\n      # 设置生产者内存缓冲区的大小。\n      buffer-memory: 33554432\n      # 键的序列化方式\n      key-serializer: org.apache.kafka.common.serialization.StringSerializer\n      # 值的序列化方式\n      value-serializer: org.apache.kafka.common.serialization.StringSerializer\n      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。\n      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。\n      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。\n      acks: all\n    listener:\n      # 在侦听器容器中运行的线程数。\n      concurrency: 5\n      # 批量提交模式\n      ack-mode: batch\n      # 批量batch类型\n      type: batch\n      # topic不存在报错\n      missing-topics-fatal: true\n    admin:\n      auto-create: true\n\n\n# mqtt-server【响应式】\n\n依赖\n\n<dependency>\n  <groupId>io.vertx</groupId>\n  <artifactId>vertx-mqtt</artifactId>\n  <version>4.5.14</version>\n</dependency>\n\n\nVertxConfig\n\n/**\n * @author laokou\n */\n@Configuration\npublic class VertxConfig {\n\n    @Bean(destroyMethod = "close")\n    public Vertx vertx() {\n       VertxOptions vertxOptions = new VertxOptions();\n       vertxOptions.setMaxEventLoopExecuteTime(30);\n       vertxOptions.setWorkerPoolSize(40);\n       vertxOptions.setMaxWorkerExecuteTime(30);\n       vertxOptions.setMaxEventLoopExecuteTimeUnit(TimeUnit.SECONDS);\n       vertxOptions.setMaxWorkerExecuteTimeUnit(TimeUnit.SECONDS);\n       vertxOptions.setPreferNativeTransport(true);\n       vertxOptions.setInternalBlockingPoolSize(40);\n       vertxOptions.setEventLoopPoolSize(Math.max(32, 2 * CpuCoreSensor.availableProcessors()));\n       return Vertx.vertx(vertxOptions);\n    }\n\n}\n\n\nMqttServerProperties【配置了账号和密码】\n\n/**\n * @author laokou\n */\n@Data\n@Component\n@ConfigurationProperties(prefix = "spring.mqtt-server")\npublic class MqttServerProperties {\n\n    private boolean auth = true;\n\n    private String username = "vertx";\n\n    private String password = "laokou123";\n\n    private String host = "0.0.0.0";\n\n    private int port = 0;\n\n    private int threadSize = 32;\n\n    private int maxMessageSize = 8192;\n\n    private boolean isAutoClientId = true;\n\n    private int maxClientIdLength = 30;\n\n    private int timeoutOnConnect = 90;\n\n    private boolean useWebSocket = false;\n\n    private int webSocketMaxFrameSize = 65536;\n\n    private boolean perFrameWebSocketCompressionSupported = true;\n\n    private boolean perMessageWebSocketCompressionSupported = true;\n\n    private int webSocketCompressionLevel = 6;\n\n    private boolean webSocketAllowServerNoContext = false;\n\n    private boolean webSocketPreferredClientNoContext = false;\n\n    private boolean tcpNoDelay = true;\n\n    private boolean tcpKeepAlive = false;\n\n    private int tcpKeepAliveIdleSeconds = -1;\n\n    private int tcpKeepAliveCount = -1;\n\n    private int tcpKeepAliveIntervalSeconds = -1;\n\n    private int soLinger = -1;\n\n    private int idleTimeout = 0;\n\n    private int readIdleTimeout = 0;\n\n    private int writeIdleTimeout = 0;\n\n    private TimeUnit idleTimeoutUnit = TimeUnit.SECONDS;\n\n    private boolean ssl = false;\n\n    private boolean tcpFastOpen = false;\n\n    private boolean tcpCork = false;\n\n    private boolean tcpQuickAck = false;\n\n    private int tcpUserTimeout = 0;\n\n}\n\n\nVertxMqttServer\n\n/**\n * @author laokou\n */\n@Slf4j\npublic final class VertxMqttServer {\n\n    private final Sinks.Many<MqttPublishMessage> messageSink = Sinks.many()\n       .multicast()\n       .onBackpressureBuffer(Integer.MAX_VALUE, false);\n\n    private volatile Flux<MqttServer> mqttServer;\n\n    private final Vertx vertx;\n\n    private final MqttServerProperties properties;\n\n    private final List<ReactiveMessageHandler> reactiveMessageHandlers;\n\n    private volatile boolean isClosed = false;\n\n    public VertxMqttServer(final Vertx vertx, final MqttServerProperties properties,\n          List<ReactiveMessageHandler> reactiveMessageHandlers) {\n       this.properties = properties;\n       this.vertx = vertx;\n       this.reactiveMessageHandlers = reactiveMessageHandlers;\n    }\n\n    public Flux<MqttServer> start() {\n       return mqttServer = getMqttServerOptions().map(mqttServerOption -> MqttServer.create(vertx, mqttServerOption)\n          .exceptionHandler(\n                error -> log.error("【Vertx-MQTT-Server】 => MQTT服务启动失败，错误信息：{}", error.getMessage(), error))\n          .endpointHandler(endpoint -> Optional.ofNullable(authHandler(endpoint))\n             .ifPresent(e -> e.closeHandler(close -> log.info("【Vertx-MQTT-Server】 => MQTT客户端断开连接"))\n                .subscribeHandler(subscribe -> {\n                   for (MqttTopicSubscription topicSubscription : subscribe.topicSubscriptions()) {\n                      log.info("【Vertx-MQTT-Server】 => MQTT客户端订阅主题：{}", topicSubscription.topicName());\n                   }\n                })\n                .disconnectHandler(disconnect -> log.info("【Vertx-MQTT-Server】 => MQTT客户端主动断开连接"))\n                .pingHandler(ping -> log.info("【Vertx-MQTT-Server】 => MQTT客户端发送心跳"))\n                .publishHandler(messageSink::tryEmitNext)\n                // 不保留会话\n                .accept(false)))\n          .listen(mqttServerOption.getPort(), mqttServerOption.getHost(), asyncResult -> {\n             if (isClosed) {\n                return;\n             }\n             if (asyncResult.succeeded()) {\n                log.info("【Vertx-MQTT-Server】 => MQTT服务启动成功，主机：{}，端口：{}", mqttServerOption.getHost(),\n                      mqttServerOption.getPort());\n                // 写入缓存\n                PortCache.add(mqttServerOption.getPort());\n             }\n             else {\n                log.error("【Vertx-MQTT-Server】 => MQTT服务启动失败，主机：{}，端口：{}，错误信息：{}", mqttServerOption.getHost(),\n                      mqttServerOption.getPort(), asyncResult.cause().getMessage(), asyncResult.cause());\n             }\n          }));\n    }\n\n    public Flux<MqttServer> stop() {\n       isClosed = true;\n       return mqttServer.doOnNext(server -> server.close(completionHandler -> {\n          if (completionHandler.succeeded()) {\n             log.info("【Vertx-MQTT-Server】 => MQTT服务停止成功");\n          }\n          else {\n             log.error("【Vertx-MQTT-Server】 => MQTT服务停止失败，错误信息：{}", completionHandler.cause().getMessage(),\n                   completionHandler.cause());\n          }\n       }));\n    }\n\n    public Flux<Boolean> publish() {\n       return messageSink.asFlux().flatMap(message -> {\n          // @formatter:off\n             // log.info("【Vertx-MQTT-Server】 => MQTT服务接收到消息，主题：{}，内容：{}", message.topicName(), message.payload().toString());\n             // @formatter:on\n          return Flux\n             .fromStream(reactiveMessageHandlers.stream()\n                .filter(reactiveMessageHandler -> reactiveMessageHandler.isSubscribe(message.topicName())))\n             .flatMap(reactiveMessageHandler -> reactiveMessageHandler\n                .handle(new MqttMessage(message.payload(), message.topicName())));\n       });\n    }\n\n    private int detectAvailablePort(String host) {\n       try (ServerSocket socket = SSLServerSocketFactory.getDefault().createServerSocket()) {\n          socket.bind(new InetSocketAddress(host, properties.getPort()));\n          return socket.getLocalPort();\n       }\n       catch (IOException e) {\n          throw new RuntimeException("Port auto-detection failed", e);\n       }\n    }\n\n    private Flux<MqttServerOptions> getMqttServerOptions() {\n       return Flux.range(1, Math.max(properties.getThreadSize(), CpuCoreSensor.availableProcessors()))\n          .map(item -> getMqttServerOption());\n    }\n\n    /**\n     * 认证.\n     */\n    private MqttEndpoint authHandler(MqttEndpoint endpoint) {\n       MqttAuth mqttAuth = endpoint.auth();\n       if (properties.isAuth()) {\n          if (ObjectUtils.isNull(mqttAuth)) {\n             endpoint.reject(MqttConnectReturnCode.CONNECTION_REFUSED_BAD_USERNAME_OR_PASSWORD);\n             return null;\n          }\n          if (!ObjectUtils.equals(mqttAuth.getUsername(), properties.getUsername())\n                || !ObjectUtils.equals(mqttAuth.getPassword(), properties.getPassword())) {\n             endpoint.reject(MqttConnectReturnCode.CONNECTION_REFUSED_BAD_USERNAME_OR_PASSWORD);\n             return null;\n          }\n       }\n       return endpoint;\n    }\n\n    // @formatter:off\n    private MqttServerOptions getMqttServerOption() {\n       MqttServerOptions mqttServerOptions = new MqttServerOptions();\n       mqttServerOptions.setHost(properties.getHost());\n       mqttServerOptions.setPort(detectAvailablePort(properties.getHost()));\n       mqttServerOptions.setMaxMessageSize(properties.getMaxMessageSize());\n       mqttServerOptions.setAutoClientId(properties.isAutoClientId());\n       mqttServerOptions.setMaxClientIdLength(properties.getMaxClientIdLength());\n       mqttServerOptions.setTimeoutOnConnect(properties.getTimeoutOnConnect());\n       mqttServerOptions.setUseWebSocket(properties.isUseWebSocket());\n       mqttServerOptions.setWebSocketMaxFrameSize(properties.getWebSocketMaxFrameSize());\n       mqttServerOptions.setPerFrameWebSocketCompressionSupported(properties.isPerFrameWebSocketCompressionSupported());\n       mqttServerOptions.setPerMessageWebSocketCompressionSupported(properties.isPerMessageWebSocketCompressionSupported());\n       mqttServerOptions.setWebSocketCompressionLevel(properties.getWebSocketCompressionLevel());\n       mqttServerOptions.setWebSocketAllowServerNoContext(properties.isWebSocketAllowServerNoContext());\n       mqttServerOptions.setWebSocketPreferredClientNoContext(properties.isWebSocketPreferredClientNoContext());\n       mqttServerOptions.setTcpNoDelay(properties.isTcpNoDelay());\n       mqttServerOptions.setTcpKeepAlive(properties.isTcpKeepAlive());\n       mqttServerOptions.setTcpKeepAliveIdleSeconds(properties.getTcpKeepAliveIdleSeconds());\n       mqttServerOptions.setTcpKeepAliveIntervalSeconds(properties.getTcpKeepAliveIntervalSeconds());\n       mqttServerOptions.setTcpKeepAliveCount(properties.getTcpKeepAliveCount());\n       mqttServerOptions.setSoLinger(properties.getSoLinger());\n       mqttServerOptions.setIdleTimeout(properties.getIdleTimeout());\n       mqttServerOptions.setReadIdleTimeout(properties.getReadIdleTimeout());\n       mqttServerOptions.setWriteIdleTimeout(properties.getWriteIdleTimeout());\n       mqttServerOptions.setIdleTimeoutUnit(properties.getIdleTimeoutUnit());\n       mqttServerOptions.setSsl(properties.isSsl());\n       mqttServerOptions.setTcpFastOpen(properties.isTcpFastOpen());\n       mqttServerOptions.setTcpCork(properties.isTcpCork());\n       mqttServerOptions.setTcpQuickAck(properties.isTcpQuickAck());\n       mqttServerOptions.setTcpUserTimeout(properties.getTcpUserTimeout());\n       return mqttServerOptions;\n    }\n    // @formatter:on\n\n}\n\n\nPortCache【缓存端口】\n\n/**\n * @author laokou\n */\npublic final class PortCache {\n\n    private PortCache() {\n    }\n\n    public static final List<Integer> PORTS = new CopyOnWriteArrayList<>();\n\n    public static void add(int port) {\n       PORTS.add(port);\n    }\n\n    public static List<Integer> get() {\n       return PORTS;\n    }\n\n    public static void clear() {\n       PORTS.clear();\n    }\n\n}\n\n\nReactiveMessageHandler【消息处理，没啥好说的，就是用来转发消息到MQ】\n\n/**\n * @author laokou\n */\npublic interface ReactiveMessageHandler {\n\n    boolean isSubscribe(String topic);\n\n    Flux<Boolean> handle(MqttMessage mqttMessage);\n\n}\n\n\n/**\n * 属性回复消息处理器.\n *\n * @author laokou\n */\n@Component\n@RequiredArgsConstructor\npublic class ReactivePropertyReplyMessageHandler implements ReactiveMessageHandler {\n\n    private final KafkaSender kafkaSender;\n\n    @Override\n    public boolean isSubscribe(String topic) {\n       return TopicUtils.match("/+/+/property/reply", topic);\n    }\n\n    @Override\n    public Flux<Boolean> handle(MqttMessage mqttMessage) {\n       return kafkaSender.send(MQTT_PROPERTY_REPLY, mqttMessage.getPayload().toString());\n    }\n\n}\n\n\n/**\n * 属性上报消息处理.\n *\n * @author laokou\n */\n@Component\n@RequiredArgsConstructor\npublic class ReactivePropertyReportMessageHandler implements ReactiveMessageHandler {\n\n    private final KafkaSender kafkaSender;\n\n    @Override\n    public boolean isSubscribe(String topic) {\n       return TopicUtils.match("/+/+/property/report", topic);\n    }\n\n    @Override\n    public Flux<Boolean> handle(MqttMessage mqttMessage) {\n       return kafkaSender.send(MQTT_PROPERTY_REPORT, mqttMessage.getPayload().toString());\n    }\n\n}\n\n\n配置yaml\n\nspring:\n  application:\n    name: ${SERVICE_ID:laokou-mqtt}\n  threads:\n    virtual:\n      enabled: true\n  mqtt-server:\n    auth: true\n    username: vertx\n    password: laokou123\n    # 开启8192个端口\n    thread-size: 8192\n\n\n启动MQTT-Server\n\n/**\n * @author laokou\n */\n@Slf4j\n@EnableDiscoveryClient\n@RequiredArgsConstructor\n@EnableConfigurationProperties\n@SpringBootApplication(scanBasePackages = "org.laokou")\npublic class MqttServerApp implements CommandLineRunner {\n\n    private final Vertx vertx;\n\n    private final MqttServerProperties properties;\n\n    private final List<ReactiveMessageHandler> reactiveMessageHandlers;\n\n    private final ExecutorService virtualThreadExecutor;\n\n    @Override\n    public void run(String... args) {\n       virtualThreadExecutor.execute(this::listenMessage);\n    }\n\n    private void listenMessage() {\n       VertxMqttServer vertxMqttServer = new VertxMqttServer(vertx, properties, reactiveMessageHandlers);\n       // 启动服务\n       vertxMqttServer.start().subscribeOn(Schedulers.boundedElastic()).subscribe();\n       // 发布数据\n       vertxMqttServer.publish().subscribeOn(Schedulers.boundedElastic()).subscribe();\n       Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n          // 清除缓存\n          PortCache.clear();\n          // 停止服务\n          vertxMqttServer.stop().subscribeOn(Schedulers.boundedElastic()).subscribe();\n       }));\n    }\n\n}\n\n\n启动好之后，请自行测试，这个东西没啥好说，vertx帮我们都实现了，就是简单调用API，自己玩吧~\n\n我是老寇，我们下次再见啦~',normalizedContent:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n跟我一起学习使用vertx实现mqtt-server\n\n\n# 实现mqtt-server【响应式】\n\nvertx-mqtt地址\n\n# 实现思路\n\n1.启动mqtt server并绑定很多端口记录到缓存，服务注册到nacos，通过接口的方式获取ip和端口【负载均衡】 2.mqtt client连接mqtt server并上报数据 3.mqtt server接收到数据并通过mq转发出去\n\n# 代码比较简单，懒得讲解啦\n\n# 代码比较简单，懒得讲解啦\n\n# 代码比较简单，懒得讲解啦\n\n# 实现过程\n\n查看源码\n\n# kafka安装\n\n采用docker-compose一键式启动！！！\n\n还没有安装docker朋友，参考文章下面两篇文章\n\n# ubuntu20.04安装docker\n\n# centos7安装docker 23.0.6\n\nservices:\n    kafka:\n      image: bitnami/kafka:4.0.0\n      container_name: kafka\n      tty: true\n      ports:\n        - \'9092:9092\'\n        - \'9093:9093\'\n      environment:\n        # 节点id\n        - kafka_broker_id=1\n        # 允许使用kraft，即kafka替代zookeeper\n        - kafka_enable_kraft=yes\n        # kafka角色，做broker，也要做controller\n        - kafka_cfg_process_roles=broker,controller\n        # 指定供外部使用的控制类请求信息\n        - kafka_cfg_controller_listener_names=controller\n        # 定义安全协议\n        - kafka_cfg_listener_security_protocol_map=controller:plaintext,plaintext:plaintext\n        # 定义kafka服务端socket监听端口\n        - kafka_cfg_listeners=plaintext://:9092,controller://:9093\n        # 外网访问地址\n        - kafka_cfg_advertised_listeners=plaintext://kafka:9092\n        # 允许使用plaintext监听器，默认false，不建议在生产环境使用\n        - allow_plaintext_listener=yes\n        # 设置broker最大内存，和初始内存\n        - kafka_heap_opts=-xmx512m -xms512m\n        # 集群地址\n        - kafka_cfg_controller_quorum_voters=1@kafka:9093\n        # 节点id\n        - kafka_cfg_node_id=1\n      restart: always\n      privileged: true\n      networks:\n        - iot_network\nnetworks:\n    iot_network:\n        driver: bridge\n\n\n# 创建topic【进入bin目录执行】 => 每个topic 3个分区和一个副本\nkafka-topics.sh --bootstrap-server 127.0.0.1:9092 --create --topic property-report --partitions 3 --replication-factor 1\n\nkafka-topics.sh --bootstrap-server 127.0.0.1:9092 --create --topic property-reply --partitions 3 --replication-factor 1\n\n\n# kafka【响应式】\n\n1.依赖\n\n<dependency>\n  <groupid>org.springframework.kafka</groupid>\n  <artifactid>spring-kafka</artifactid>\n  <version>3.3.5</version>\n</dependency>\n<dependency>\n  <groupid>io.projectreactor.kafka</groupid>\n  <artifactid>reactor-kafka</artifactid>\n  <version>1.3.23</version>\n</dependency>\n\n\n2.代码\n\nkafkaautoconfig\n\n/**\n * @author laokou\n */\n@configuration\npublic class kafkaautoconfig {\n\n    @bean("defaultkafkatemplate")\n    @conditionalonwebapplication(type = conditionalonwebapplication.type.servlet)\n    public defaultkafkatemplate defaultkafkatemplate(kafkatemplate<string, string> kafkatemplate) {\n       return new defaultkafkatemplate(kafkatemplate);\n    }\n\n    @bean(value = "reactivekafkasender")\n    @conditionalonwebapplication(type = conditionalonwebapplication.type.reactive)\n    public kafkasender reactivekafkasender(senderoptions<string, string> senderoptions) {\n       return new reactivekafkasender(\n             new reactor.kafka.sender.internals.defaultkafkasender<>(producerfactory.instance, senderoptions));\n    }\n\n    @bean\n    @conditionalonwebapplication(type = conditionalonwebapplication.type.reactive)\n    public senderoptions<string, string> senderoptions(kafkaproperties kafkaproperties) {\n       map<string, object> props = new hashmap<>();\n       kafkaproperties.producer producer = kafkaproperties.getproducer();\n       props.put(producerconfig.bootstrap_servers_config, kafkaproperties.getbootstrapservers());\n       props.put(producerconfig.acks_config, producer.getacks());\n       props.put(producerconfig.retries_config, producer.getretries());\n       props.put(producerconfig.batch_size_config, (int) producer.getbatchsize().tobytes());\n       props.put(producerconfig.buffer_memory_config, (int) producer.getbuffermemory().tobytes());\n       props.put(producerconfig.key_serializer_class_config, stringserializer.class);\n       props.put(producerconfig.value_serializer_class_config, stringserializer.class);\n       return senderoptions.create(props);\n    }\n\n    @bean\n    @conditionalonwebapplication(type = conditionalonwebapplication.type.reactive)\n    public receiveroptions<string, string> receiveroptions(kafkaproperties kafkaproperties) {\n       map<string, object> props = new hashmap<>();\n       kafkaproperties.consumer consumer = kafkaproperties.getconsumer();\n       props.put(consumerconfig.bootstrap_servers_config, kafkaproperties.getbootstrapservers());\n       props.put(consumerconfig.group_id_config, consumer.getgroupid());\n       props.put(consumerconfig.max_poll_records_config, consumer.getmaxpollrecords());\n       props.put(consumerconfig.enable_auto_commit_config, consumer.getenableautocommit());\n       props.put(consumerconfig.key_deserializer_class_config, stringdeserializer.class);\n       props.put(consumerconfig.value_deserializer_class_config, stringdeserializer.class);\n       return receiveroptions.create(props);\n    }\n\n}\n\n\nkafkasender\n\n/**\n * @author laokou\n */\npublic interface kafkasender {\n\n    flux<boolean> send(string topic, string payload);\n\n}\n\n\nreactivekafkasender\n\n/**\n * @author laokou\n */\n@slf4j\n@requiredargsconstructor\npublic class reactivekafkasender implements kafkasender {\n\n    private final defaultkafkasender<string, string> defaultkafkasender;\n\n    @override\n    public flux<boolean> send(string topic, string payload) {\n       return defaultkafkasender.send(mono.just(senderrecord.create(topic, null, null, null, payload, null)))\n          .map(result -> {\n             exception exception = result.exception();\n             if (objectutils.isnotnull(exception)) {\n                log.error("【kafka】 => 发送消息失败，错误信息：{}", exception.getmessage(), exception);\n                return false;\n             }\n             else {\n                return true;\n             }\n          });\n    }\n\n}\n\n\n3.yaml配置【自动批量提交】\n\nspring:\n  kafka:\n    bootstrap-servers: kafka:9092\n    consumer:\n      group-id: laokou-mqtt\n      # 禁用自动提交（按周期）已消费offset\n      enable-auto-commit: true\n      # 单次poll()调用返回的记录数\n      max-poll-records: 50\n      key-deserializer: org.apache.kafka.common.serialization.stringdeserializer\n      value-deserializer: org.apache.kafka.common.serialization.stringdeserializer\n    producer:\n      # 发生错误后，消息重发的次数。\n      retries: 5\n      # 当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。\n      batch-size: 16384\n      # 设置生产者内存缓冲区的大小。\n      buffer-memory: 33554432\n      # 键的序列化方式\n      key-serializer: org.apache.kafka.common.serialization.stringserializer\n      # 值的序列化方式\n      value-serializer: org.apache.kafka.common.serialization.stringserializer\n      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。\n      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。\n      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。\n      acks: all\n    listener:\n      # 在侦听器容器中运行的线程数。\n      concurrency: 5\n      # 批量提交模式\n      ack-mode: batch\n      # 批量batch类型\n      type: batch\n      # topic不存在报错\n      missing-topics-fatal: true\n    admin:\n      auto-create: true\n\n\n# mqtt-server【响应式】\n\n依赖\n\n<dependency>\n  <groupid>io.vertx</groupid>\n  <artifactid>vertx-mqtt</artifactid>\n  <version>4.5.14</version>\n</dependency>\n\n\nvertxconfig\n\n/**\n * @author laokou\n */\n@configuration\npublic class vertxconfig {\n\n    @bean(destroymethod = "close")\n    public vertx vertx() {\n       vertxoptions vertxoptions = new vertxoptions();\n       vertxoptions.setmaxeventloopexecutetime(30);\n       vertxoptions.setworkerpoolsize(40);\n       vertxoptions.setmaxworkerexecutetime(30);\n       vertxoptions.setmaxeventloopexecutetimeunit(timeunit.seconds);\n       vertxoptions.setmaxworkerexecutetimeunit(timeunit.seconds);\n       vertxoptions.setprefernativetransport(true);\n       vertxoptions.setinternalblockingpoolsize(40);\n       vertxoptions.seteventlooppoolsize(math.max(32, 2 * cpucoresensor.availableprocessors()));\n       return vertx.vertx(vertxoptions);\n    }\n\n}\n\n\nmqttserverproperties【配置了账号和密码】\n\n/**\n * @author laokou\n */\n@data\n@component\n@configurationproperties(prefix = "spring.mqtt-server")\npublic class mqttserverproperties {\n\n    private boolean auth = true;\n\n    private string username = "vertx";\n\n    private string password = "laokou123";\n\n    private string host = "0.0.0.0";\n\n    private int port = 0;\n\n    private int threadsize = 32;\n\n    private int maxmessagesize = 8192;\n\n    private boolean isautoclientid = true;\n\n    private int maxclientidlength = 30;\n\n    private int timeoutonconnect = 90;\n\n    private boolean usewebsocket = false;\n\n    private int websocketmaxframesize = 65536;\n\n    private boolean perframewebsocketcompressionsupported = true;\n\n    private boolean permessagewebsocketcompressionsupported = true;\n\n    private int websocketcompressionlevel = 6;\n\n    private boolean websocketallowservernocontext = false;\n\n    private boolean websocketpreferredclientnocontext = false;\n\n    private boolean tcpnodelay = true;\n\n    private boolean tcpkeepalive = false;\n\n    private int tcpkeepaliveidleseconds = -1;\n\n    private int tcpkeepalivecount = -1;\n\n    private int tcpkeepaliveintervalseconds = -1;\n\n    private int solinger = -1;\n\n    private int idletimeout = 0;\n\n    private int readidletimeout = 0;\n\n    private int writeidletimeout = 0;\n\n    private timeunit idletimeoutunit = timeunit.seconds;\n\n    private boolean ssl = false;\n\n    private boolean tcpfastopen = false;\n\n    private boolean tcpcork = false;\n\n    private boolean tcpquickack = false;\n\n    private int tcpusertimeout = 0;\n\n}\n\n\nvertxmqttserver\n\n/**\n * @author laokou\n */\n@slf4j\npublic final class vertxmqttserver {\n\n    private final sinks.many<mqttpublishmessage> messagesink = sinks.many()\n       .multicast()\n       .onbackpressurebuffer(integer.max_value, false);\n\n    private volatile flux<mqttserver> mqttserver;\n\n    private final vertx vertx;\n\n    private final mqttserverproperties properties;\n\n    private final list<reactivemessagehandler> reactivemessagehandlers;\n\n    private volatile boolean isclosed = false;\n\n    public vertxmqttserver(final vertx vertx, final mqttserverproperties properties,\n          list<reactivemessagehandler> reactivemessagehandlers) {\n       this.properties = properties;\n       this.vertx = vertx;\n       this.reactivemessagehandlers = reactivemessagehandlers;\n    }\n\n    public flux<mqttserver> start() {\n       return mqttserver = getmqttserveroptions().map(mqttserveroption -> mqttserver.create(vertx, mqttserveroption)\n          .exceptionhandler(\n                error -> log.error("【vertx-mqtt-server】 => mqtt服务启动失败，错误信息：{}", error.getmessage(), error))\n          .endpointhandler(endpoint -> optional.ofnullable(authhandler(endpoint))\n             .ifpresent(e -> e.closehandler(close -> log.info("【vertx-mqtt-server】 => mqtt客户端断开连接"))\n                .subscribehandler(subscribe -> {\n                   for (mqtttopicsubscription topicsubscription : subscribe.topicsubscriptions()) {\n                      log.info("【vertx-mqtt-server】 => mqtt客户端订阅主题：{}", topicsubscription.topicname());\n                   }\n                })\n                .disconnecthandler(disconnect -> log.info("【vertx-mqtt-server】 => mqtt客户端主动断开连接"))\n                .pinghandler(ping -> log.info("【vertx-mqtt-server】 => mqtt客户端发送心跳"))\n                .publishhandler(messagesink::tryemitnext)\n                // 不保留会话\n                .accept(false)))\n          .listen(mqttserveroption.getport(), mqttserveroption.gethost(), asyncresult -> {\n             if (isclosed) {\n                return;\n             }\n             if (asyncresult.succeeded()) {\n                log.info("【vertx-mqtt-server】 => mqtt服务启动成功，主机：{}，端口：{}", mqttserveroption.gethost(),\n                      mqttserveroption.getport());\n                // 写入缓存\n                portcache.add(mqttserveroption.getport());\n             }\n             else {\n                log.error("【vertx-mqtt-server】 => mqtt服务启动失败，主机：{}，端口：{}，错误信息：{}", mqttserveroption.gethost(),\n                      mqttserveroption.getport(), asyncresult.cause().getmessage(), asyncresult.cause());\n             }\n          }));\n    }\n\n    public flux<mqttserver> stop() {\n       isclosed = true;\n       return mqttserver.doonnext(server -> server.close(completionhandler -> {\n          if (completionhandler.succeeded()) {\n             log.info("【vertx-mqtt-server】 => mqtt服务停止成功");\n          }\n          else {\n             log.error("【vertx-mqtt-server】 => mqtt服务停止失败，错误信息：{}", completionhandler.cause().getmessage(),\n                   completionhandler.cause());\n          }\n       }));\n    }\n\n    public flux<boolean> publish() {\n       return messagesink.asflux().flatmap(message -> {\n          // @formatter:off\n             // log.info("【vertx-mqtt-server】 => mqtt服务接收到消息，主题：{}，内容：{}", message.topicname(), message.payload().tostring());\n             // @formatter:on\n          return flux\n             .fromstream(reactivemessagehandlers.stream()\n                .filter(reactivemessagehandler -> reactivemessagehandler.issubscribe(message.topicname())))\n             .flatmap(reactivemessagehandler -> reactivemessagehandler\n                .handle(new mqttmessage(message.payload(), message.topicname())));\n       });\n    }\n\n    private int detectavailableport(string host) {\n       try (serversocket socket = sslserversocketfactory.getdefault().createserversocket()) {\n          socket.bind(new inetsocketaddress(host, properties.getport()));\n          return socket.getlocalport();\n       }\n       catch (ioexception e) {\n          throw new runtimeexception("port auto-detection failed", e);\n       }\n    }\n\n    private flux<mqttserveroptions> getmqttserveroptions() {\n       return flux.range(1, math.max(properties.getthreadsize(), cpucoresensor.availableprocessors()))\n          .map(item -> getmqttserveroption());\n    }\n\n    /**\n     * 认证.\n     */\n    private mqttendpoint authhandler(mqttendpoint endpoint) {\n       mqttauth mqttauth = endpoint.auth();\n       if (properties.isauth()) {\n          if (objectutils.isnull(mqttauth)) {\n             endpoint.reject(mqttconnectreturncode.connection_refused_bad_username_or_password);\n             return null;\n          }\n          if (!objectutils.equals(mqttauth.getusername(), properties.getusername())\n                || !objectutils.equals(mqttauth.getpassword(), properties.getpassword())) {\n             endpoint.reject(mqttconnectreturncode.connection_refused_bad_username_or_password);\n             return null;\n          }\n       }\n       return endpoint;\n    }\n\n    // @formatter:off\n    private mqttserveroptions getmqttserveroption() {\n       mqttserveroptions mqttserveroptions = new mqttserveroptions();\n       mqttserveroptions.sethost(properties.gethost());\n       mqttserveroptions.setport(detectavailableport(properties.gethost()));\n       mqttserveroptions.setmaxmessagesize(properties.getmaxmessagesize());\n       mqttserveroptions.setautoclientid(properties.isautoclientid());\n       mqttserveroptions.setmaxclientidlength(properties.getmaxclientidlength());\n       mqttserveroptions.settimeoutonconnect(properties.gettimeoutonconnect());\n       mqttserveroptions.setusewebsocket(properties.isusewebsocket());\n       mqttserveroptions.setwebsocketmaxframesize(properties.getwebsocketmaxframesize());\n       mqttserveroptions.setperframewebsocketcompressionsupported(properties.isperframewebsocketcompressionsupported());\n       mqttserveroptions.setpermessagewebsocketcompressionsupported(properties.ispermessagewebsocketcompressionsupported());\n       mqttserveroptions.setwebsocketcompressionlevel(properties.getwebsocketcompressionlevel());\n       mqttserveroptions.setwebsocketallowservernocontext(properties.iswebsocketallowservernocontext());\n       mqttserveroptions.setwebsocketpreferredclientnocontext(properties.iswebsocketpreferredclientnocontext());\n       mqttserveroptions.settcpnodelay(properties.istcpnodelay());\n       mqttserveroptions.settcpkeepalive(properties.istcpkeepalive());\n       mqttserveroptions.settcpkeepaliveidleseconds(properties.gettcpkeepaliveidleseconds());\n       mqttserveroptions.settcpkeepaliveintervalseconds(properties.gettcpkeepaliveintervalseconds());\n       mqttserveroptions.settcpkeepalivecount(properties.gettcpkeepalivecount());\n       mqttserveroptions.setsolinger(properties.getsolinger());\n       mqttserveroptions.setidletimeout(properties.getidletimeout());\n       mqttserveroptions.setreadidletimeout(properties.getreadidletimeout());\n       mqttserveroptions.setwriteidletimeout(properties.getwriteidletimeout());\n       mqttserveroptions.setidletimeoutunit(properties.getidletimeoutunit());\n       mqttserveroptions.setssl(properties.isssl());\n       mqttserveroptions.settcpfastopen(properties.istcpfastopen());\n       mqttserveroptions.settcpcork(properties.istcpcork());\n       mqttserveroptions.settcpquickack(properties.istcpquickack());\n       mqttserveroptions.settcpusertimeout(properties.gettcpusertimeout());\n       return mqttserveroptions;\n    }\n    // @formatter:on\n\n}\n\n\nportcache【缓存端口】\n\n/**\n * @author laokou\n */\npublic final class portcache {\n\n    private portcache() {\n    }\n\n    public static final list<integer> ports = new copyonwritearraylist<>();\n\n    public static void add(int port) {\n       ports.add(port);\n    }\n\n    public static list<integer> get() {\n       return ports;\n    }\n\n    public static void clear() {\n       ports.clear();\n    }\n\n}\n\n\nreactivemessagehandler【消息处理，没啥好说的，就是用来转发消息到mq】\n\n/**\n * @author laokou\n */\npublic interface reactivemessagehandler {\n\n    boolean issubscribe(string topic);\n\n    flux<boolean> handle(mqttmessage mqttmessage);\n\n}\n\n\n/**\n * 属性回复消息处理器.\n *\n * @author laokou\n */\n@component\n@requiredargsconstructor\npublic class reactivepropertyreplymessagehandler implements reactivemessagehandler {\n\n    private final kafkasender kafkasender;\n\n    @override\n    public boolean issubscribe(string topic) {\n       return topicutils.match("/+/+/property/reply", topic);\n    }\n\n    @override\n    public flux<boolean> handle(mqttmessage mqttmessage) {\n       return kafkasender.send(mqtt_property_reply, mqttmessage.getpayload().tostring());\n    }\n\n}\n\n\n/**\n * 属性上报消息处理.\n *\n * @author laokou\n */\n@component\n@requiredargsconstructor\npublic class reactivepropertyreportmessagehandler implements reactivemessagehandler {\n\n    private final kafkasender kafkasender;\n\n    @override\n    public boolean issubscribe(string topic) {\n       return topicutils.match("/+/+/property/report", topic);\n    }\n\n    @override\n    public flux<boolean> handle(mqttmessage mqttmessage) {\n       return kafkasender.send(mqtt_property_report, mqttmessage.getpayload().tostring());\n    }\n\n}\n\n\n配置yaml\n\nspring:\n  application:\n    name: ${service_id:laokou-mqtt}\n  threads:\n    virtual:\n      enabled: true\n  mqtt-server:\n    auth: true\n    username: vertx\n    password: laokou123\n    # 开启8192个端口\n    thread-size: 8192\n\n\n启动mqtt-server\n\n/**\n * @author laokou\n */\n@slf4j\n@enablediscoveryclient\n@requiredargsconstructor\n@enableconfigurationproperties\n@springbootapplication(scanbasepackages = "org.laokou")\npublic class mqttserverapp implements commandlinerunner {\n\n    private final vertx vertx;\n\n    private final mqttserverproperties properties;\n\n    private final list<reactivemessagehandler> reactivemessagehandlers;\n\n    private final executorservice virtualthreadexecutor;\n\n    @override\n    public void run(string... args) {\n       virtualthreadexecutor.execute(this::listenmessage);\n    }\n\n    private void listenmessage() {\n       vertxmqttserver vertxmqttserver = new vertxmqttserver(vertx, properties, reactivemessagehandlers);\n       // 启动服务\n       vertxmqttserver.start().subscribeon(schedulers.boundedelastic()).subscribe();\n       // 发布数据\n       vertxmqttserver.publish().subscribeon(schedulers.boundedelastic()).subscribe();\n       runtime.getruntime().addshutdownhook(new thread(() -> {\n          // 清除缓存\n          portcache.clear();\n          // 停止服务\n          vertxmqttserver.stop().subscribeon(schedulers.boundedelastic()).subscribe();\n       }));\n    }\n\n}\n\n\n启动好之后，请自行测试，这个东西没啥好说，vertx帮我们都实现了，就是简单调用api，自己玩吧~\n\n我是老寇，我们下次再见啦~',charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"Spring Cloud Gateway实现分布式限流和熔断降级",frontmatter:{title:"Spring Cloud Gateway实现分布式限流和熔断降级",date:"2025-06-15T15:59:10.000Z",permalink:"/pages/4b37fa/"},regularPath:"/01.%E6%8C%87%E5%8D%97/08.%E6%96%87%E7%AB%A0/06.Spring%20Cloud%20Gateway%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%99%90%E6%B5%81%E5%92%8C%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7.html",relativePath:"01.指南/08.文章/06.Spring Cloud Gateway实现分布式限流和熔断降级.md",key:"v-013a7629",path:"/pages/4b37fa/",headers:[{level:2,title:"1.常见限流算法",slug:"_1-常见限流算法",normalizedTitle:"1.常见限流算法",charIndex:220},{level:3,title:"1.1漏桶算法（不推荐）",slug:"_1-1漏桶算法-不推荐",normalizedTitle:"1.1漏桶算法（不推荐）",charIndex:251},{level:4,title:"1.1.1.原理",slug:"_1-1-1-原理",normalizedTitle:"1.1.1.原理",charIndex:267},{level:4,title:"1.1.2.实现",slug:"_1-1-2-实现",normalizedTitle:"1.1.2.实现",charIndex:313},{level:4,title:"1.1.3.举例",slug:"_1-1-3-举例",normalizedTitle:"1.1.3.举例",charIndex:382},{level:4,title:"1.1.4.缺点",slug:"_1-1-4-缺点",normalizedTitle:"1.1.4.缺点",charIndex:446},{level:3,title:"1.2.令牌桶算法（推荐）",slug:"_1-2-令牌桶算法-推荐",normalizedTitle:"1.2.令牌桶算法（推荐）",charIndex:486},{level:5,title:"1.2.1.原理",slug:"_1-2-1-原理",normalizedTitle:"1.2.1.原理",charIndex:503},{level:5,title:"1.2.2.实现",slug:"_1-2-2-实现",normalizedTitle:"1.2.2.实现",charIndex:541},{level:4,title:"1.2.3.举例",slug:"_1-2-3-举例",normalizedTitle:"1.2.3.举例",charIndex:625},{level:4,title:"1.2.4.缺点",slug:"_1-2-4-缺点",normalizedTitle:"1.2.4.缺点",charIndex:720},{level:2,title:"2.网关限流（Spring Cloud Gateway + Redis实战）",slug:"_2-网关限流-spring-cloud-gateway-redis实战",normalizedTitle:"2.网关限流（spring cloud gateway + redis实战）",charIndex:810},{level:3,title:"2.1.pom.xml配置",slug:"_2-1-pom-xml配置",normalizedTitle:"2.1.pom.xml配置",charIndex:853},{level:3,title:"2.2.yaml配置",slug:"_2-2-yaml配置",normalizedTitle:"2.2.yaml配置",charIndex:1588},{level:3,title:"2.3.创建bean",slug:"_2-3-创建bean",normalizedTitle:"2.3.创建bean",charIndex:2459},{level:2,title:"3.测试限流（编写java并发测试）",slug:"_3-测试限流-编写java并发测试",normalizedTitle:"3.测试限流（编写java并发测试）",charIndex:2914},{level:2,title:"4.源码查看",slug:"_4-源码查看",normalizedTitle:"4.源码查看",charIndex:5595},{level:3,title:"4.1.查看 RequestRateLimiterGatewayFilterFactory",slug:"_4-1-查看-requestratelimitergatewayfilterfactory",normalizedTitle:"4.1.查看 requestratelimitergatewayfilterfactory",charIndex:5784},{level:3,title:"4.2.查看 RedisRateLimiter",slug:"_4-2-查看-redisratelimiter",normalizedTitle:"4.2.查看 redisratelimiter",charIndex:7201},{level:3,title:"4.3.重点来了，令牌桶 /META-INF/scripts/request_rate_limiter.lua 脚本剖析",slug:"_4-3-重点来了-令牌桶-meta-inf-scripts-request-rate-limiter-lua-脚本剖析",normalizedTitle:"4.3.重点来了，令牌桶 /meta-inf/scripts/request_rate_limiter.lua 脚本剖析",charIndex:9124},{level:3,title:"4.4.查看 GatewayRedisAutoConfiguration 脚本初始化",slug:"_4-4-查看-gatewayredisautoconfiguration-脚本初始化",normalizedTitle:"4.4.查看 gatewayredisautoconfiguration 脚本初始化",charIndex:11316},{level:2,title:"5.优化限流响应\\[使用全限定类名直接覆盖类]",slug:"_5-优化限流响应-使用全限定类名直接覆盖类",normalizedTitle:"5.优化限流响应[使用全限定类名直接覆盖类]",charIndex:14167},{level:2,title:"1.技术选型",slug:"_1-技术选型",normalizedTitle:"1.技术选型",charIndex:19186},{level:3,title:"1.1.熔断降级框架选型对比表",slug:"_1-1-熔断降级框架选型对比表",normalizedTitle:"1.1.熔断降级框架选型对比表",charIndex:19197},{level:3,title:"1.2选型决策指南",slug:"_1-2选型决策指南",normalizedTitle:"1.2选型决策指南",charIndex:20164},{level:2,title:"2.Resilience4j使用",slug:"_2-resilience4j使用",normalizedTitle:"2.resilience4j使用",charIndex:20533},{level:3,title:"2.1.网关熔断降级（Spring Cloud Gateway + Resilience4j实战）",slug:"_2-1-网关熔断降级-spring-cloud-gateway-resilience4j实战",normalizedTitle:"2.1.网关熔断降级（spring cloud gateway + resilience4j实战）",charIndex:20802},{level:5,title:"2.1.1.pom依赖",slug:"_2-1-1-pom依赖",normalizedTitle:"2.1.1.pom依赖",charIndex:20855},{level:4,title:"2.1.2.yaml配置",slug:"_2-1-2-yaml配置",normalizedTitle:"2.1.2.yaml配置",charIndex:21030},{level:4,title:"2.1.3.CircuitBreakerConfig配置",slug:"_2-1-3-circuitbreakerconfig配置",normalizedTitle:"2.1.3.circuitbreakerconfig配置",charIndex:21537}],headersStr:"1.常见限流算法 1.1漏桶算法（不推荐） 1.1.1.原理 1.1.2.实现 1.1.3.举例 1.1.4.缺点 1.2.令牌桶算法（推荐） 1.2.1.原理 1.2.2.实现 1.2.3.举例 1.2.4.缺点 2.网关限流（Spring Cloud Gateway + Redis实战） 2.1.pom.xml配置 2.2.yaml配置 2.3.创建bean 3.测试限流（编写java并发测试） 4.源码查看 4.1.查看 RequestRateLimiterGatewayFilterFactory 4.2.查看 RedisRateLimiter 4.3.重点来了，令牌桶 /META-INF/scripts/request_rate_limiter.lua 脚本剖析 4.4.查看 GatewayRedisAutoConfiguration 脚本初始化 5.优化限流响应\\[使用全限定类名直接覆盖类] 1.技术选型 1.1.熔断降级框架选型对比表 1.2选型决策指南 2.Resilience4j使用 2.1.网关熔断降级（Spring Cloud Gateway + Resilience4j实战） 2.1.1.pom依赖 2.1.2.yaml配置 2.1.3.CircuitBreakerConfig配置",content:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n跟我一起学习使用Spring Cloud Gateway实现分布式限流和熔断降级\n\n小伙伴们，你们好呀！我是老寇！一起学习学习gateway限流和熔断降级\n\n\n# 一、限流\n\n思考：为啥需要限流？\n\n在一个流量特别大的业务场景中，如果不进行限流，会造成系统宕机，当大批量的请求到达后端服务时，会造成资源耗尽【CPU、内存、线程、网络带宽、数据库连接等是有限的】，进而拖垮系统。\n\n\n# 1.常见限流算法\n\n * 漏桶算法\n * 令牌桶算法\n\n\n# 1.1漏桶算法（不推荐）\n\n# 1.1.1.原理\n\n将请求缓存到一个队列中，然后以固定的速度处理，从而达到限流的目的\n\n# 1.1.2.实现\n\n将请求装到一个桶中，桶的容量为固定的一个值，当桶装满之后，就会将请求丢弃掉，桶底部有一个洞，以固定的速率流出。\n\n# 1.1.3.举例\n\n桶的容量为1W，有10W并发请求，最多只能将1W请求放入桶中，其余请求全部丢弃，以固定的速度处理请求\n\n# 1.1.4.缺点\n\n处理突发流量效率低（处理请求的速度不变，效率很低）\n\n\n# 1.2.令牌桶算法（推荐）\n\n# 1.2.1.原理\n\n将请求放在一个缓冲队列中，拿到令牌后才能进行处理\n\n# 1.2.2.实现\n\n装令牌的桶大小固定，当令牌装满后，则不能将令牌放入其中；每次请求都会到桶中拿取一个令牌才能放行，没有令牌时即丢弃请求/继续放入缓存队列中等待\n\n# 1.2.3.举例\n\n桶的容量为10w个，生产1w个/s，有10W的并发请求，以每秒10W个/s速度处理，随着桶中的令牌很快用完，速度又慢慢降下来啦，而生产令牌的速度趋于一致1w个/s\n\n# 1.2.4.缺点\n\n处理突发流量提供了系统性能，但是对系统造成了一定的压力，桶的大小不合理，甚至会压垮系统（处理1亿的并发请求，将桶的大小设置为1,这个系统一下就凉凉啦）\n\n\n# 2.网关限流（Spring Cloud Gateway + Redis实战）\n\n\n# 2.1.pom.xml配置\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis-reactive</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-gateway</artifactId>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.springframework.boot</groupId>\n                    <artifactId>spring-boot-starter-web</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n    <dependency>\n        <groupId>org.apache.httpcomponents</groupId>\n        <artifactId>httpclient</artifactId>\n    </dependency>\n\n\n\n# 2.2.yaml配置\n\nspring:\n  application:\n    name: laokou-gateway\n  cloud:\n    gateway:\n      routes:\n        - id: LAOKOU-SSO-DEMO\n          uri: lb://laokou-sso-demo\n          predicates:\n          - Path=/sso/**\n          filters:\n          - StripPrefix=1\n          - name: RequestRateLimiter #请求数限流，名字不能乱打\n            args:\n              key-resolver: "#{@ipKeyResolver}"\n              redis-rate-limiter.replenishRate: 1 #生成令牌速率-设为1方便测试\n              redis-rate-limiter.burstCapacity: 1 #令牌桶容量-设置1方便测试\n  redis:\n    database: 0\n    cluster:\n      nodes: x.x.x.x:7003,x.x.x.x:7004,x.x.x.x:7005,x.x.x.x:7003,x.x.x.x:7004,x.x.x.x:7005\n    password: laokou #密码\n    timeout: 6000ms #连接超时时长（毫秒）\n    jedis:\n      pool:\n        max-active: -1 #连接池最大连接数（使用负值表示无极限）\n        max-wait: -1ms #连接池最大阻塞等待时间（使用负值表示没有限制）\n        max-idle: 10 #连接池最大空闲连接\n        min-idle: 5 #连接池最小空间连接\n\n\n\n# 2.3.创建bean\n\n@Configuration\npublic class RequestRateLimiterConfig {\n\n    @Bean(value = "ipKeyResolver")\n    public KeyResolver ipKeyResolver(RemoteAddressResolver remoteAddressResolver) {\n    \treturn exchange -> Mono.just(remoteAddressResolver.resolve(exchange).getAddress().getHostAddress());\n    }\n\n    @Bean\n    public RemoteAddressResolver remoteAddressResolver() {\n    \t// 远程地址解析器\n    \treturn XForwardedRemoteAddressResolver.trustAll();\n    }\n\n}\n\n\n\n# 3.测试限流（编写java并发测试）\n\n@Slf4j\npublic class HttpUtil {\npublic static void apiConcurrent(String url,Map<String,String> params) {\n        Integer count = 200;\n        //创建线程池\n        ThreadPoolExecutor pool = new ThreadPoolExecutor(5, 200, 0L, TimeUnit.SECONDS, new SynchronousQueue<>());\n        //同步工具\n        CountDownLatch latch = new CountDownLatch(count);\n        Map<String,String> dataMap = new HashMap<>(1);\n        dataMap.put("authorize","XXXXXXX");\n        for (int i = 0; i < count; i++) {\n            pool.execute(() -> {\n                try {\n                    //访问网关的API接口\n                    HttpUtil.doGet("http://localhost:1234/sso/laokou-demo/user",dataMap);\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }finally {\n                    latch.countDown();\n                }\n            });\n        }\n        try {\n            latch.await();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\npublic static String doGet(String url, Map<String, String> params) throws IOException {\n        //创建HttpClient对象\n        CloseableHttpClient httpClient = HttpClients.createDefault();\n        String resultString = "";\n        CloseableHttpResponse response = null;\n        try {\n            //创建uri\n            URIBuilder builder = new URIBuilder(url);\n            if (!params.isEmpty()) {\n                for (Map.Entry<String, String> entry : params.entrySet()) {\n                    builder.addParameter(entry.getKey(), entry.getValue());\n                }\n            }\n            URI uri = builder.build();\n            //创建http GET请求\n            HttpGet httpGet = new HttpGet(uri);\n            List<NameValuePair> paramList = new ArrayList<>();\n            RequestBuilder requestBuilder = RequestBuilder.get().setUri(new URI(url));\n            requestBuilder.setEntity(new UrlEncodedFormEntity(paramList, Consts.UTF_8));\n            httpGet.setHeader(new BasicHeader("Content-Type", "application/json;charset=UTF-8"));\n            httpGet.setHeader(new BasicHeader("Accept", "*/*;charset=utf-8"));\n            //执行请求\n            response = httpClient.execute(httpGet);\n            //判断返回状态是否是200\n            if (response.getStatusLine().getStatusCode() == 200) {\n                resultString = EntityUtils.toString(response.getEntity(), "UTF-8");\n            }\n        } catch (Exception e) {\n            log.info("调用失败:{}",e);\n        } finally {\n            if (response != null) {\n                response.close();\n            }\n            httpClient.close();\n        }\n        log.info("打印：{}",resultString);\n        return resultString;\n    }\n}\n\n\n说明这个网关限流配置是没有问题的\n\n\n# 4.源码查看\n\nSpring Cloud Gateway RequestRateLimiter GatewayFilter Factory文档地址\n\n工厂 RequestRateLimiter GatewayFilter使用一个RateLimiter实现来判断当前请求是否被允许继续。如果不允许，HTTP 429 - Too Many Requests则返回默认状态。\n\n\n# 4.1.查看 RequestRateLimiterGatewayFilterFactory\n\n\t@Override\n\tpublic GatewayFilter apply(Config config) {\n\t\tKeyResolver resolver = getOrDefault(config.keyResolver, defaultKeyResolver);\n\t\tRateLimiter<Object> limiter = getOrDefault(config.rateLimiter, defaultRateLimiter);\n\t\tboolean denyEmpty = getOrDefault(config.denyEmptyKey, this.denyEmptyKey);\n\t\tHttpStatusHolder emptyKeyStatus = HttpStatusHolder\n\t\t\t\t.parse(getOrDefault(config.emptyKeyStatus, this.emptyKeyStatusCode));\n\n\t\treturn (exchange, chain) -> resolver.resolve(exchange).defaultIfEmpty(EMPTY_KEY).flatMap(key -> {\n\t\t\tif (EMPTY_KEY.equals(key)) {\n\t\t\t\tif (denyEmpty) {\n\t\t\t\t\tsetResponseStatus(exchange, emptyKeyStatus);\n\t\t\t\t\treturn exchange.getResponse().setComplete();\n\t\t\t\t}\n\t\t\t\treturn chain.filter(exchange);\n\t\t\t}\n\t\t\tString routeId = config.getRouteId();\n\t\t\tif (routeId == null) {\n\t\t\t\tRoute route = exchange.getAttribute(ServerWebExchangeUtils.GATEWAY_ROUTE_ATTR);\n\t\t\t\trouteId = route.getId();\n\t\t\t}\n                 // 执行限流\n\t\t\treturn limiter.isAllowed(routeId, key).flatMap(response -> {\n\n\t\t\t\tfor (Map.Entry<String, String> header : response.getHeaders().entrySet()) {\n\t\t\t\t\texchange.getResponse().getHeaders().add(header.getKey(), header.getValue());\n\t\t\t\t}\n\n\t\t\t\tif (response.isAllowed()) {\n\t\t\t\t\treturn chain.filter(exchange);\n\t\t\t\t}\n\n\t\t\t\tsetResponseStatus(exchange, config.getStatusCode());\n\t\t\t\treturn exchange.getResponse().setComplete();\n\t\t\t});\n\t\t});\n\t}\n\n\n\n# 4.2.查看 RedisRateLimiter\n\n\t@Override\n\t@SuppressWarnings("unchecked")\n\tpublic Mono<Response> isAllowed(String routeId, String id) {\n\t\tif (!this.initialized.get()) {\n\t\t\tthrow new IllegalStateException("RedisRateLimiter is not initialized");\n\t\t}\n        // 这里如何加载配置?请思考\n\t\tConfig routeConfig = loadConfiguration(routeId);\n        // 令牌桶每秒产生令牌数量\n\t\tint replenishRate = routeConfig.getReplenishRate();\n        // 令牌桶容量\n\t\tint burstCapacity = routeConfig.getBurstCapacity();\n        // 请求消耗的令牌数\n\t\tint requestedTokens = routeConfig.getRequestedTokens();\n\t\ttry {\n                  // 键\n\t\t\tList<String> keys = getKeys(id);\n                  // 参数\n\t\t\tList<String> scriptArgs = Arrays.asList(replenishRate + "", burstCapacity + "", "", requestedTokens + "");\n\t\t\t// 调用lua脚本\n\t\t\tFlux<List<Long>> flux = this.redisTemplate.execute(this.script, keys, scriptArgs);\n\t\t\treturn flux.onErrorResume(throwable -> {\n\t\t\t\tif (log.isDebugEnabled()) {\n\t\t\t\t\tlog.debug("Error calling rate limiter lua", throwable);\n\t\t\t\t}\n\t\t\t\treturn Flux.just(Arrays.asList(1L, -1L));\n\t\t\t}).reduce(new ArrayList<Long>(), (longs, l) -> {\n\t\t\t\tlongs.addAll(l);\n\t\t\t\treturn longs;\n\t\t\t}).map(results -> {\n                          // 判断是否等于1，1表示允许通过，0表示不允许通过\n\t\t\t\tboolean allowed = results.get(0) == 1L;\n\t\t\t\tLong tokensLeft = results.get(1);\n\t\t\t\tResponse response = new Response(allowed, getHeaders(routeConfig, tokensLeft));\n\t\t\t\tif (log.isDebugEnabled()) {\n\t\t\t\t\tlog.debug("response: " + response);\n\t\t\t\t}\n\t\t\t\treturn response;\n\t\t\t});\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tlog.error("Error determining if user allowed from redis", e);\n\t\t}\n\t\treturn Mono.just(new Response(true, getHeaders(routeConfig, -1L)));\n\t}\n\n\tstatic List<String> getKeys(String id) {\n\t\tString prefix = "request_rate_limiter.{" + id;\n\t\tString tokenKey = prefix + "}.tokens";\n\t\tString timestampKey = prefix + "}.timestamp";\n\t\treturn Arrays.asList(tokenKey, timestampKey);\n\t}\n\n\n思考：redis限流配置是如何加载？\n\n其实就是监听动态路由的事件并把配置存起来\n\n\n# 4.3.重点来了，令牌桶 /META-INF/scripts/request_rate_limiter.lua 脚本剖析\n\n-- User Request Rate Limiter filter\n-- See https://stripe.com/blog/rate-limiters\n-- See https://gist.github.com/ptarjan/e38f45f2dfe601419ca3af937fff574d#file-1-check_request_rate_limiter-rb-L11-L34\n\n-- 令牌桶算法工作原理\n-- 1.系统以恒定速率往桶里面放入令牌\n-- 2.请求需要被处理，则需要从桶里面获取一个令牌\n-- 3.如果桶里面没有令牌可获取，则可以选择等待或直接拒绝并返回\n\n-- 令牌桶算法工作流程\n-- 1.计算填满令牌桶所需要的时间（填充时间 = 桶容量 / 速率）\n-- 2.设置存储数据的TTL（过期时间），为填充时间的两倍（存储时间 = 填充时间 * 2）\n-- 3.从Redis获取当前令牌的剩余数量和上一次调用的时间戳\n-- 4.计算距离上一次调用的时间间隔（时间间隔 = 当前时间 - 上一次调用时间）\n-- 5.计算填充的令牌数量（填充令牌数量 = 时间间隔 * 速率）【前提：桶容量是固定的，不存在无限制的填充】\n-- 6.判断是否有足够多的令牌满足请求【 (填充令牌数量 + 剩余令牌数量) >= 请求数量 && (填充令牌数量 + 剩余令牌数量) <= 桶容量 】\n-- 7.如果请求被允许，则从桶里面取出相应数据的令牌\n-- 8.如果TTL为正，则更新Redis键中的令牌和时间戳\n-- 9.返回两个两个参数（allowed_num：请求被允许标志。1允许，0不允许）、（new_tokens：填充令牌后剩余的令牌数据）\n\n-- 随机写入\nredis.replicate_commands()\n\n-- 令牌桶Key -> 存储当前可用令牌的数量（剩余令牌数量）\nlocal tokens_key = KEYS[1]\n\n-- 时间戳Key -> 存储上次令牌刷新的时间戳\nlocal timestamp_key = KEYS[2]\n\n-- 令牌填充速率\nlocal rate = tonumber(ARGV[1])\n\n-- 令牌桶容量\nlocal capacity = tonumber(ARGV[2])\n\n-- 当前时间\nlocal now = tonumber(ARGV[3])\n\n-- 请求数量\nlocal requested = tonumber(ARGV[4])\n\n-- 填满令牌桶所需要的时间\nlocal fill_time = capacity / rate\n\n-- 设置key的过期时间（填满令牌桶所需时间的2倍）\nlocal ttl = math.floor(fill_time * 2)\n\n-- 判断当前时间，为空则从redis获取\nif now == nil then\n    now = redis.call(\'TIME\')[1]\nend\n\n-- 获取当前令牌的剩余数量\nlocal last_tokens = tonumber(redis.call("get", tokens_key))\nif last_tokens == nil then\n    last_tokens = capacity\nend\n\n-- 获取上一次调用的时间戳\nlocal last_refreshed = tonumber(redis.call(\'get\', timestamp_key))\nif last_refreshed == nil then\n    last_refreshed = 0\nend\n\n-- 计算距离上一次调用的时间间隔\nlocal delta = math.max(0, now - last_refreshed)\n\n-- 当前的令牌数量（剩余 + 填充 <= 桶容量）\nlocal now_tokens = math.min(capacity, last_refreshed + (rate * delta))\n\n-- 判断是否有足够多的令牌满足请求\nlocal allowed = now_tokens >= requested\n\n-- 定义当前令牌的剩余数量\nlocal new_tokens = now_tokens\n\n-- 定义被允许标志\nlocal allowed_num = 0\nif allowed then\n    new_tokens = now_tokens - requested\n    -- 允许访问\n    allowed_num = 1\nend\n\n-- ttl > 0，将当前令牌的剩余数量和当前时间戳存入redis\nif ttl > 0 then\n    redis.call(\'setex\', tokens_key, ttl, new_tokens)\n    redis.call(\'setex\', timestamp_key, ttl, now)\nend\n\n-- 返回参数\nreturn { allowed_num, new_tokens }\n\n\n\n# 4.4.查看 GatewayRedisAutoConfiguration 脚本初始化\n\n\t@Bean\n\t@SuppressWarnings("unchecked")\n\tpublic RedisScript redisRequestRateLimiterScript() {\n\t\tDefaultRedisScript redisScript = new DefaultRedisScript<>();\n\t\tredisScript.setScriptSource(\n                          // 根据指定路径获取lua脚本来初始化配置\n\t\t\t\tnew ResourceScriptSource(new ClassPathResource("META-INF/scripts/request_rate_limiter.lua")));\n\t\tredisScript.setResultType(List.class);\n\t\treturn redisScript;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic RedisRateLimiter redisRateLimiter(ReactiveStringRedisTemplate redisTemplate,\n\t\t\t@Qualifier(RedisRateLimiter.REDIS_SCRIPT_NAME) RedisScript<List<Long>> redisScript,\n\t\t\tConfigurationService configurationService) {\n\t\treturn new RedisRateLimiter(redisTemplate, redisScript, configurationService);\n\t}\n\n\n思考：请求限流过滤器是如何开启？\n\n1.通过yaml配置开启\n\nspring:\n  cloud:\n    gateway:\n      server:\n        webflux:\n          filter:\n            request-rate-limiter:\n              enabled: true\n\n\n2.GatewayAutoConfiguration自动注入bean\n\n@Bean\n@ConditionalOnBean({ RateLimiter.class, KeyResolver.class })\n@ConditionalOnEnabledFilter\npublic RequestRateLimiterGatewayFilterFactory requestRateLimiterGatewayFilterFactory(RateLimiter rateLimiter,\n       KeyResolver resolver) {\n    return new RequestRateLimiterGatewayFilterFactory(rateLimiter, resolver);\n}\n\n\n重点来了，真正加载这个bean的是 @ConditionalOnEnabledFilter 注解进行判断\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ ElementType.TYPE, ElementType.METHOD })\n@Documented\n@Conditional(OnEnabledFilter.class)\npublic @interface ConditionalOnEnabledFilter {\n\n    // 这里value是用来指定满足条件的某些类，换一句话说，就是这些类都加载或注入到ioc容器，这个注解修饰的自动装配类才会生效\n    Class<? extends GatewayFilterFactory<?>> value() default OnEnabledFilter.DefaultValue.class;\n\n}\n\n\n我们继续跟进代码，查看@Conditional(OnEnabledFilter.class)\n\n众所周知，@Conditional可以用来加载满足条件的bean，所以，我们分析一下OnEnabledFilter\n\npublic class OnEnabledFilter extends OnEnabledComponent<GatewayFilterFactory<?>> {}\n\n\n我分析它的父类，这里有你想要的答案！\n\npublic abstract class OnEnabledComponent<T> extends SpringBootCondition implements ConfigurationCondition {\n\n    private static final String PREFIX = "spring.cloud.gateway.server.webflux.";\n\n    private static final String SUFFIX = ".enabled";\n\n    private ConditionOutcome determineOutcome(Class<? extends T> componentClass, PropertyResolver resolver) {\n       // 拼接完整名称\n       // 例如 => spring.cloud.gateway.server.webflux.request-rate-limiter.enabled\n       String key = PREFIX + normalizeComponentName(componentClass) + SUFFIX;\n       ConditionMessage.Builder messageBuilder = forCondition(annotationClass().getName(), componentClass.getName());\n       if ("false".equalsIgnoreCase(resolver.getProperty(key))) {\n          // 不满足条件不加载bean\n          return ConditionOutcome.noMatch(messageBuilder.because("bean is not available"));\n       }\n       // 满足条件加载bean\n       return ConditionOutcome.match();\n    }\n}\n\n\n\n# 5.优化限流响应[使用全限定类名直接覆盖类]\n\n小伙伴们，有没有发现，这个这个响应体封装的不太好，因此，我们来自定义吧，我们直接覆盖类，代码修改如下\n\n@Getter\n@ConfigurationProperties("spring.cloud.gateway.server.webflux.filter.request-rate-limiter")\npublic class RequestRateLimiterGatewayFilterFactory\n       extends AbstractGatewayFilterFactory<RequestRateLimiterGatewayFilterFactory.Config> {\n\n    private static final String EMPTY_KEY = "____EMPTY_KEY__";\n\n    private final RateLimiter<?> defaultRateLimiter;\n\n    private final KeyResolver defaultKeyResolver;\n\n    /**\n     * Switch to deny requests if the Key Resolver returns an empty key, defaults to true.\n     */\n    @Setter\n    private boolean denyEmptyKey = true;\n\n    /** HttpStatus to return when denyEmptyKey is true, defaults to FORBIDDEN. */\n    @Setter\n    private String emptyKeyStatusCode = HttpStatus.FORBIDDEN.name();\n\n    public RequestRateLimiterGatewayFilterFactory(RateLimiter<?> defaultRateLimiter, KeyResolver defaultKeyResolver) {\n       super(Config.class);\n       this.defaultRateLimiter = defaultRateLimiter;\n       this.defaultKeyResolver = defaultKeyResolver;\n    }\n\n    @Override\n    public GatewayFilter apply(Config config) {\n       KeyResolver resolver = getOrDefault(config.keyResolver, defaultKeyResolver);\n       RateLimiter<?> limiter = getOrDefault(config.rateLimiter, defaultRateLimiter);\n       boolean denyEmpty = getOrDefault(config.denyEmptyKey, this.denyEmptyKey);\n       HttpStatusHolder emptyKeyStatus = HttpStatusHolder\n          .parse(getOrDefault(config.emptyKeyStatus, this.emptyKeyStatusCode));\n       return (exchange, chain) -> resolver.resolve(exchange).defaultIfEmpty(EMPTY_KEY).flatMap(key -> {\n          if (EMPTY_KEY.equals(key)) {\n             if (denyEmpty) {\n                setResponseStatus(exchange, emptyKeyStatus);\n                return exchange.getResponse().setComplete();\n             }\n             return chain.filter(exchange);\n          }\n          String routeId = config.getRouteId();\n          if (routeId == null) {\n             Route route = exchange.getAttribute(ServerWebExchangeUtils.GATEWAY_ROUTE_ATTR);\n             Assert.notNull(route, "Route is null");\n             routeId = route.getId();\n          }\n          return limiter.isAllowed(routeId, key).flatMap(response -> {\n             for (Map.Entry<String, String> header : response.getHeaders().entrySet()) {\n                exchange.getResponse().getHeaders().add(header.getKey(), header.getValue());\n             }\n             if (response.isAllowed()) {\n                return chain.filter(exchange);\n             }\n             // 主要修改这行\n             return responseOk(exchange, Result.fail("Too_Many_Requests", "请求太频繁"));\n          });\n       });\n    }\n\n    private Mono<Void> responseOk(ServerWebExchange exchange, Object data) {\n        return responseOk(exchange, JacksonUtils.toJsonStr(data), MediaType.APPLICATION_JSON);\n    }\n\n    private Mono<Void> responseOk(ServerWebExchange exchange, String str, MediaType contentType) {\n        DataBuffer buffer = exchange.getResponse().bufferFactory().wrap(str.getBytes(StandardCharsets.UTF_8));\n        ServerHttpResponse response = exchange.getResponse();\n        response.setStatusCode(HttpStatus.OK);\n        response.getHeaders().setContentType(contentType);\n        response.getHeaders().setContentLength(str.getBytes(StandardCharsets.UTF_8).length);\n        return response.writeWith(Flux.just(buffer));\n    }\n\n    private <T> T getOrDefault(T configValue, T defaultValue) {\n       return (configValue != null) ? configValue : defaultValue;\n    }\n\n    public static class Config implements HasRouteId {\n\n       @Getter\n       private KeyResolver keyResolver;\n\n       @Getter\n       private RateLimiter<?> rateLimiter;\n\n       @Getter\n       private HttpStatus statusCode = HttpStatus.TOO_MANY_REQUESTS;\n\n       @Getter\n       private Boolean denyEmptyKey;\n\n       @Getter\n       private String emptyKeyStatus;\n\n       private String routeId;\n\n       public Config setKeyResolver(KeyResolver keyResolver) {\n          this.keyResolver = keyResolver;\n          return this;\n       }\n\n       public Config setRateLimiter(RateLimiter<?> rateLimiter) {\n          this.rateLimiter = rateLimiter;\n          return this;\n       }\n\n       public Config setStatusCode(HttpStatus statusCode) {\n          this.statusCode = statusCode;\n          return this;\n       }\n\n       public Config setDenyEmptyKey(Boolean denyEmptyKey) {\n          this.denyEmptyKey = denyEmptyKey;\n          return this;\n       }\n\n       public Config setEmptyKeyStatus(String emptyKeyStatus) {\n          this.emptyKeyStatus = emptyKeyStatus;\n          return this;\n       }\n\n       @Override\n       public void setRouteId(String routeId) {\n          this.routeId = routeId;\n       }\n\n       @Override\n       public String getRouteId() {\n          return this.routeId;\n       }\n\n    }\n\n}\n\n\n\n# 二、熔断降级\n\n思考：为什么需要熔断降级？\n\n当某个服务发生故障时（超时，响应慢，宕机），上游服务无法及时获取响应，进而也导致故障，出现服务雪崩【服务雪崩是指故障像滚雪球一样沿着调用链向上游扩展，进而导致整个系统瘫痪】\n\n熔断降级的目标就是在故障发生时，快速隔离问题服务【快速失败，防止资源耗尽】，保护系统资源不被耗尽，防止故障扩散，保护核心业务可用性。\n\n\n# 1.技术选型\n\n\n# 1.1.熔断降级框架选型对比表\n\n对比维度   HYSTRIX (NETFLIX)        SENTINEL (ALIBABA)             RESILIENCE4J\n当前状态   ❌ 停止更新 (维护模式)            ✅ 持续更新                         ✅ 持续更新\n熔断机制   滑动窗口计数                   响应时间/异常比例/QPS                  错误率/响应时间阈值\n流量控制   ❌ 仅基础隔离                  ✅ QPS/并发数/热点参数/集群流控            ✅ RateLimiter\n隔离策略   线程池（开销大）/信号量             并发线程数（无线程池开销）                  信号量/Bulkhead\n降级能力   Fallback 方法              Fallback + 系统规则自适应             Fallback + 自定义组合策略\n实时监控   ✅ Hystrix Dashboard      ✅ 原生控制台（可视化动态规则）               ❌ 需整合 Prometheus/Grafana\n动态配置   ❌ 依赖 Archaius            ✅ 控制台实时推送                      ✅ 需编码实现（如Spring Cloud Config）\n生态集成   ✅ Spring Cloud Netflix   ✅ Spring Cloud Alibaba/多语言网关   ✅ Spring Boot/响应式编程\n性能开销   高（线程池隔离）                 低（无额外线程）                       极低（纯函数式）\n适用场景   遗留系统维护                   高并发控制/秒杀/热点防护                  云原生/轻量级微服务\n推荐指数   ⭐⭐ (不推荐新项目)              ⭐⭐⭐⭐⭐ (Java高并发首选)              ⭐⭐⭐⭐⭐ (云原生/响应式首选)\n\n\n# 1.2选型决策指南\n\n需求场景                      推荐方案             原因\n电商秒杀/API高频调用管控            ✅ Sentinel       精细流量控制+热点防护+实时看板\nKubernetes云原生微服务          ✅ Resilience4j   轻量化+无缝集成Prometheus+响应式支持\nSpring Cloud Netflix旧系统   ⚠️ Hystrix       兼容现存代码（短期过渡）\n多语言混合架构（如Go+Java）         ✅ Sentinel       通过Sidecar代理支持非Java服务\n响应式编程（WebFlux）            ✅ Resilience4j   原生Reactive API支持\n\n\n# 2.Resilience4j使用\n\nResilience4j官方文档\n\nResilience4j 可以看作是 Hystrix 的替代品，Resilience4j支持 熔断器和单机限流\n\nResilience4j 是一个专为函数式编程设计的轻量级容错库。Resilience4j 提供高阶函数（装饰器），可通过断路器、速率限制器、重试或隔离功能增强任何函数式接口、lambda 表达式或方法引用。您可以在任何函数式接口、lambda 表达式或方法引用上堆叠多个装饰器。这样做的好处是，您可以只选择所需的装饰器，而无需考虑其他因素。\n\n\n# 2.1.网关熔断降级（Spring Cloud Gateway + Resilience4j实战）\n\n# 2.1.1.pom依赖\n\n<dependency>\n  <groupId>org.springframework.cloud</groupId>\n  <artifactId>spring-cloud-starter-circuitbreaker-reactor-resilience4j</artifactId>\n</dependency>\n\n\n# 2.1.2.yaml配置\n\nspring:\n  application:\n    name: laokou-gateway\n  cloud:\n    gateway:\n       server:\n        webflux:\n          routes:\n            - id: LAOKOU-SSO-DEMO\n              uri: lb://laokou-sso-demo\n              predicates:\n              - Path=/sso/**\n              filters:\n              - name: CircuitBreaker\n                args:\n                  name: default\n                  fallbackUri: "forward:/fallback"\n          filter:\n            circuit-breaker:\n              enabled: true\n\n\n# 2.1.3.CircuitBreakerConfig配置\n\n/**\n * @author laokou\n */\n@Configuration\npublic class CircuitBreakerConfig {\n\n    @Bean\n    public RouterFunction<ServerResponse> routerFunction() {\n       return RouterFunctions.route(\n             RequestPredicates.path("/fallback").and(RequestPredicates.accept(MediaType.TEXT_PLAIN)),\n             (request) -> ServerResponse.status(HttpStatus.SC_OK)\n                .contentType(MediaType.APPLICATION_JSON)\n                .body(BodyInserters.fromValue(Result.fail("Service_Unavailable", "服务正在维护"))));\n    }\n\n    @Bean\n    public Customizer<ReactiveResilience4JCircuitBreakerFactory> reactiveResilience4JCircuitBreakerFactoryCustomizer() {\n       return factory -> factory.configureDefault(id -> new Resilience4JConfigBuilder(id)\n          // 3秒后超时时间\n          .timeLimiterConfig(TimeLimiterConfig.custom().timeoutDuration(Duration.ofSeconds(3)).build())\n          .circuitBreakerConfig(io.github.resilience4j.circuitbreaker.CircuitBreakerConfig.ofDefaults())\n          .build());\n    }\n\n}\n\n\n我是老寇，我们下次再见啦！',normalizedContent:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n跟我一起学习使用spring cloud gateway实现分布式限流和熔断降级\n\n小伙伴们，你们好呀！我是老寇！一起学习学习gateway限流和熔断降级\n\n\n# 一、限流\n\n思考：为啥需要限流？\n\n在一个流量特别大的业务场景中，如果不进行限流，会造成系统宕机，当大批量的请求到达后端服务时，会造成资源耗尽【cpu、内存、线程、网络带宽、数据库连接等是有限的】，进而拖垮系统。\n\n\n# 1.常见限流算法\n\n * 漏桶算法\n * 令牌桶算法\n\n\n# 1.1漏桶算法（不推荐）\n\n# 1.1.1.原理\n\n将请求缓存到一个队列中，然后以固定的速度处理，从而达到限流的目的\n\n# 1.1.2.实现\n\n将请求装到一个桶中，桶的容量为固定的一个值，当桶装满之后，就会将请求丢弃掉，桶底部有一个洞，以固定的速率流出。\n\n# 1.1.3.举例\n\n桶的容量为1w，有10w并发请求，最多只能将1w请求放入桶中，其余请求全部丢弃，以固定的速度处理请求\n\n# 1.1.4.缺点\n\n处理突发流量效率低（处理请求的速度不变，效率很低）\n\n\n# 1.2.令牌桶算法（推荐）\n\n# 1.2.1.原理\n\n将请求放在一个缓冲队列中，拿到令牌后才能进行处理\n\n# 1.2.2.实现\n\n装令牌的桶大小固定，当令牌装满后，则不能将令牌放入其中；每次请求都会到桶中拿取一个令牌才能放行，没有令牌时即丢弃请求/继续放入缓存队列中等待\n\n# 1.2.3.举例\n\n桶的容量为10w个，生产1w个/s，有10w的并发请求，以每秒10w个/s速度处理，随着桶中的令牌很快用完，速度又慢慢降下来啦，而生产令牌的速度趋于一致1w个/s\n\n# 1.2.4.缺点\n\n处理突发流量提供了系统性能，但是对系统造成了一定的压力，桶的大小不合理，甚至会压垮系统（处理1亿的并发请求，将桶的大小设置为1,这个系统一下就凉凉啦）\n\n\n# 2.网关限流（spring cloud gateway + redis实战）\n\n\n# 2.1.pom.xml配置\n\n        <dependency>\n            <groupid>org.springframework.boot</groupid>\n            <artifactid>spring-boot-starter-data-redis-reactive</artifactid>\n        </dependency>\n        <dependency>\n            <groupid>org.springframework.cloud</groupid>\n            <artifactid>spring-cloud-starter-gateway</artifactid>\n            <exclusions>\n                <exclusion>\n                    <groupid>org.springframework.boot</groupid>\n                    <artifactid>spring-boot-starter-web</artifactid>\n                </exclusion>\n            </exclusions>\n        </dependency>\n    <dependency>\n        <groupid>org.apache.httpcomponents</groupid>\n        <artifactid>httpclient</artifactid>\n    </dependency>\n\n\n\n# 2.2.yaml配置\n\nspring:\n  application:\n    name: laokou-gateway\n  cloud:\n    gateway:\n      routes:\n        - id: laokou-sso-demo\n          uri: lb://laokou-sso-demo\n          predicates:\n          - path=/sso/**\n          filters:\n          - stripprefix=1\n          - name: requestratelimiter #请求数限流，名字不能乱打\n            args:\n              key-resolver: "#{@ipkeyresolver}"\n              redis-rate-limiter.replenishrate: 1 #生成令牌速率-设为1方便测试\n              redis-rate-limiter.burstcapacity: 1 #令牌桶容量-设置1方便测试\n  redis:\n    database: 0\n    cluster:\n      nodes: x.x.x.x:7003,x.x.x.x:7004,x.x.x.x:7005,x.x.x.x:7003,x.x.x.x:7004,x.x.x.x:7005\n    password: laokou #密码\n    timeout: 6000ms #连接超时时长（毫秒）\n    jedis:\n      pool:\n        max-active: -1 #连接池最大连接数（使用负值表示无极限）\n        max-wait: -1ms #连接池最大阻塞等待时间（使用负值表示没有限制）\n        max-idle: 10 #连接池最大空闲连接\n        min-idle: 5 #连接池最小空间连接\n\n\n\n# 2.3.创建bean\n\n@configuration\npublic class requestratelimiterconfig {\n\n    @bean(value = "ipkeyresolver")\n    public keyresolver ipkeyresolver(remoteaddressresolver remoteaddressresolver) {\n    \treturn exchange -> mono.just(remoteaddressresolver.resolve(exchange).getaddress().gethostaddress());\n    }\n\n    @bean\n    public remoteaddressresolver remoteaddressresolver() {\n    \t// 远程地址解析器\n    \treturn xforwardedremoteaddressresolver.trustall();\n    }\n\n}\n\n\n\n# 3.测试限流（编写java并发测试）\n\n@slf4j\npublic class httputil {\npublic static void apiconcurrent(string url,map<string,string> params) {\n        integer count = 200;\n        //创建线程池\n        threadpoolexecutor pool = new threadpoolexecutor(5, 200, 0l, timeunit.seconds, new synchronousqueue<>());\n        //同步工具\n        countdownlatch latch = new countdownlatch(count);\n        map<string,string> datamap = new hashmap<>(1);\n        datamap.put("authorize","xxxxxxx");\n        for (int i = 0; i < count; i++) {\n            pool.execute(() -> {\n                try {\n                    //访问网关的api接口\n                    httputil.doget("http://localhost:1234/sso/laokou-demo/user",datamap);\n                } catch (ioexception e) {\n                    e.printstacktrace();\n                }finally {\n                    latch.countdown();\n                }\n            });\n        }\n        try {\n            latch.await();\n        } catch (interruptedexception e) {\n            e.printstacktrace();\n        }\n    }\n\npublic static string doget(string url, map<string, string> params) throws ioexception {\n        //创建httpclient对象\n        closeablehttpclient httpclient = httpclients.createdefault();\n        string resultstring = "";\n        closeablehttpresponse response = null;\n        try {\n            //创建uri\n            uribuilder builder = new uribuilder(url);\n            if (!params.isempty()) {\n                for (map.entry<string, string> entry : params.entryset()) {\n                    builder.addparameter(entry.getkey(), entry.getvalue());\n                }\n            }\n            uri uri = builder.build();\n            //创建http get请求\n            httpget httpget = new httpget(uri);\n            list<namevaluepair> paramlist = new arraylist<>();\n            requestbuilder requestbuilder = requestbuilder.get().seturi(new uri(url));\n            requestbuilder.setentity(new urlencodedformentity(paramlist, consts.utf_8));\n            httpget.setheader(new basicheader("content-type", "application/json;charset=utf-8"));\n            httpget.setheader(new basicheader("accept", "*/*;charset=utf-8"));\n            //执行请求\n            response = httpclient.execute(httpget);\n            //判断返回状态是否是200\n            if (response.getstatusline().getstatuscode() == 200) {\n                resultstring = entityutils.tostring(response.getentity(), "utf-8");\n            }\n        } catch (exception e) {\n            log.info("调用失败:{}",e);\n        } finally {\n            if (response != null) {\n                response.close();\n            }\n            httpclient.close();\n        }\n        log.info("打印：{}",resultstring);\n        return resultstring;\n    }\n}\n\n\n说明这个网关限流配置是没有问题的\n\n\n# 4.源码查看\n\nspring cloud gateway requestratelimiter gatewayfilter factory文档地址\n\n工厂 requestratelimiter gatewayfilter使用一个ratelimiter实现来判断当前请求是否被允许继续。如果不允许，http 429 - too many requests则返回默认状态。\n\n\n# 4.1.查看 requestratelimitergatewayfilterfactory\n\n\t@override\n\tpublic gatewayfilter apply(config config) {\n\t\tkeyresolver resolver = getordefault(config.keyresolver, defaultkeyresolver);\n\t\tratelimiter<object> limiter = getordefault(config.ratelimiter, defaultratelimiter);\n\t\tboolean denyempty = getordefault(config.denyemptykey, this.denyemptykey);\n\t\thttpstatusholder emptykeystatus = httpstatusholder\n\t\t\t\t.parse(getordefault(config.emptykeystatus, this.emptykeystatuscode));\n\n\t\treturn (exchange, chain) -> resolver.resolve(exchange).defaultifempty(empty_key).flatmap(key -> {\n\t\t\tif (empty_key.equals(key)) {\n\t\t\t\tif (denyempty) {\n\t\t\t\t\tsetresponsestatus(exchange, emptykeystatus);\n\t\t\t\t\treturn exchange.getresponse().setcomplete();\n\t\t\t\t}\n\t\t\t\treturn chain.filter(exchange);\n\t\t\t}\n\t\t\tstring routeid = config.getrouteid();\n\t\t\tif (routeid == null) {\n\t\t\t\troute route = exchange.getattribute(serverwebexchangeutils.gateway_route_attr);\n\t\t\t\trouteid = route.getid();\n\t\t\t}\n                 // 执行限流\n\t\t\treturn limiter.isallowed(routeid, key).flatmap(response -> {\n\n\t\t\t\tfor (map.entry<string, string> header : response.getheaders().entryset()) {\n\t\t\t\t\texchange.getresponse().getheaders().add(header.getkey(), header.getvalue());\n\t\t\t\t}\n\n\t\t\t\tif (response.isallowed()) {\n\t\t\t\t\treturn chain.filter(exchange);\n\t\t\t\t}\n\n\t\t\t\tsetresponsestatus(exchange, config.getstatuscode());\n\t\t\t\treturn exchange.getresponse().setcomplete();\n\t\t\t});\n\t\t});\n\t}\n\n\n\n# 4.2.查看 redisratelimiter\n\n\t@override\n\t@suppresswarnings("unchecked")\n\tpublic mono<response> isallowed(string routeid, string id) {\n\t\tif (!this.initialized.get()) {\n\t\t\tthrow new illegalstateexception("redisratelimiter is not initialized");\n\t\t}\n        // 这里如何加载配置?请思考\n\t\tconfig routeconfig = loadconfiguration(routeid);\n        // 令牌桶每秒产生令牌数量\n\t\tint replenishrate = routeconfig.getreplenishrate();\n        // 令牌桶容量\n\t\tint burstcapacity = routeconfig.getburstcapacity();\n        // 请求消耗的令牌数\n\t\tint requestedtokens = routeconfig.getrequestedtokens();\n\t\ttry {\n                  // 键\n\t\t\tlist<string> keys = getkeys(id);\n                  // 参数\n\t\t\tlist<string> scriptargs = arrays.aslist(replenishrate + "", burstcapacity + "", "", requestedtokens + "");\n\t\t\t// 调用lua脚本\n\t\t\tflux<list<long>> flux = this.redistemplate.execute(this.script, keys, scriptargs);\n\t\t\treturn flux.onerrorresume(throwable -> {\n\t\t\t\tif (log.isdebugenabled()) {\n\t\t\t\t\tlog.debug("error calling rate limiter lua", throwable);\n\t\t\t\t}\n\t\t\t\treturn flux.just(arrays.aslist(1l, -1l));\n\t\t\t}).reduce(new arraylist<long>(), (longs, l) -> {\n\t\t\t\tlongs.addall(l);\n\t\t\t\treturn longs;\n\t\t\t}).map(results -> {\n                          // 判断是否等于1，1表示允许通过，0表示不允许通过\n\t\t\t\tboolean allowed = results.get(0) == 1l;\n\t\t\t\tlong tokensleft = results.get(1);\n\t\t\t\tresponse response = new response(allowed, getheaders(routeconfig, tokensleft));\n\t\t\t\tif (log.isdebugenabled()) {\n\t\t\t\t\tlog.debug("response: " + response);\n\t\t\t\t}\n\t\t\t\treturn response;\n\t\t\t});\n\t\t}\n\t\tcatch (exception e) {\n\t\t\tlog.error("error determining if user allowed from redis", e);\n\t\t}\n\t\treturn mono.just(new response(true, getheaders(routeconfig, -1l)));\n\t}\n\n\tstatic list<string> getkeys(string id) {\n\t\tstring prefix = "request_rate_limiter.{" + id;\n\t\tstring tokenkey = prefix + "}.tokens";\n\t\tstring timestampkey = prefix + "}.timestamp";\n\t\treturn arrays.aslist(tokenkey, timestampkey);\n\t}\n\n\n思考：redis限流配置是如何加载？\n\n其实就是监听动态路由的事件并把配置存起来\n\n\n# 4.3.重点来了，令牌桶 /meta-inf/scripts/request_rate_limiter.lua 脚本剖析\n\n-- user request rate limiter filter\n-- see https://stripe.com/blog/rate-limiters\n-- see https://gist.github.com/ptarjan/e38f45f2dfe601419ca3af937fff574d#file-1-check_request_rate_limiter-rb-l11-l34\n\n-- 令牌桶算法工作原理\n-- 1.系统以恒定速率往桶里面放入令牌\n-- 2.请求需要被处理，则需要从桶里面获取一个令牌\n-- 3.如果桶里面没有令牌可获取，则可以选择等待或直接拒绝并返回\n\n-- 令牌桶算法工作流程\n-- 1.计算填满令牌桶所需要的时间（填充时间 = 桶容量 / 速率）\n-- 2.设置存储数据的ttl（过期时间），为填充时间的两倍（存储时间 = 填充时间 * 2）\n-- 3.从redis获取当前令牌的剩余数量和上一次调用的时间戳\n-- 4.计算距离上一次调用的时间间隔（时间间隔 = 当前时间 - 上一次调用时间）\n-- 5.计算填充的令牌数量（填充令牌数量 = 时间间隔 * 速率）【前提：桶容量是固定的，不存在无限制的填充】\n-- 6.判断是否有足够多的令牌满足请求【 (填充令牌数量 + 剩余令牌数量) >= 请求数量 && (填充令牌数量 + 剩余令牌数量) <= 桶容量 】\n-- 7.如果请求被允许，则从桶里面取出相应数据的令牌\n-- 8.如果ttl为正，则更新redis键中的令牌和时间戳\n-- 9.返回两个两个参数（allowed_num：请求被允许标志。1允许，0不允许）、（new_tokens：填充令牌后剩余的令牌数据）\n\n-- 随机写入\nredis.replicate_commands()\n\n-- 令牌桶key -> 存储当前可用令牌的数量（剩余令牌数量）\nlocal tokens_key = keys[1]\n\n-- 时间戳key -> 存储上次令牌刷新的时间戳\nlocal timestamp_key = keys[2]\n\n-- 令牌填充速率\nlocal rate = tonumber(argv[1])\n\n-- 令牌桶容量\nlocal capacity = tonumber(argv[2])\n\n-- 当前时间\nlocal now = tonumber(argv[3])\n\n-- 请求数量\nlocal requested = tonumber(argv[4])\n\n-- 填满令牌桶所需要的时间\nlocal fill_time = capacity / rate\n\n-- 设置key的过期时间（填满令牌桶所需时间的2倍）\nlocal ttl = math.floor(fill_time * 2)\n\n-- 判断当前时间，为空则从redis获取\nif now == nil then\n    now = redis.call(\'time\')[1]\nend\n\n-- 获取当前令牌的剩余数量\nlocal last_tokens = tonumber(redis.call("get", tokens_key))\nif last_tokens == nil then\n    last_tokens = capacity\nend\n\n-- 获取上一次调用的时间戳\nlocal last_refreshed = tonumber(redis.call(\'get\', timestamp_key))\nif last_refreshed == nil then\n    last_refreshed = 0\nend\n\n-- 计算距离上一次调用的时间间隔\nlocal delta = math.max(0, now - last_refreshed)\n\n-- 当前的令牌数量（剩余 + 填充 <= 桶容量）\nlocal now_tokens = math.min(capacity, last_refreshed + (rate * delta))\n\n-- 判断是否有足够多的令牌满足请求\nlocal allowed = now_tokens >= requested\n\n-- 定义当前令牌的剩余数量\nlocal new_tokens = now_tokens\n\n-- 定义被允许标志\nlocal allowed_num = 0\nif allowed then\n    new_tokens = now_tokens - requested\n    -- 允许访问\n    allowed_num = 1\nend\n\n-- ttl > 0，将当前令牌的剩余数量和当前时间戳存入redis\nif ttl > 0 then\n    redis.call(\'setex\', tokens_key, ttl, new_tokens)\n    redis.call(\'setex\', timestamp_key, ttl, now)\nend\n\n-- 返回参数\nreturn { allowed_num, new_tokens }\n\n\n\n# 4.4.查看 gatewayredisautoconfiguration 脚本初始化\n\n\t@bean\n\t@suppresswarnings("unchecked")\n\tpublic redisscript redisrequestratelimiterscript() {\n\t\tdefaultredisscript redisscript = new defaultredisscript<>();\n\t\tredisscript.setscriptsource(\n                          // 根据指定路径获取lua脚本来初始化配置\n\t\t\t\tnew resourcescriptsource(new classpathresource("meta-inf/scripts/request_rate_limiter.lua")));\n\t\tredisscript.setresulttype(list.class);\n\t\treturn redisscript;\n\t}\n\n\t@bean\n\t@conditionalonmissingbean\n\tpublic redisratelimiter redisratelimiter(reactivestringredistemplate redistemplate,\n\t\t\t@qualifier(redisratelimiter.redis_script_name) redisscript<list<long>> redisscript,\n\t\t\tconfigurationservice configurationservice) {\n\t\treturn new redisratelimiter(redistemplate, redisscript, configurationservice);\n\t}\n\n\n思考：请求限流过滤器是如何开启？\n\n1.通过yaml配置开启\n\nspring:\n  cloud:\n    gateway:\n      server:\n        webflux:\n          filter:\n            request-rate-limiter:\n              enabled: true\n\n\n2.gatewayautoconfiguration自动注入bean\n\n@bean\n@conditionalonbean({ ratelimiter.class, keyresolver.class })\n@conditionalonenabledfilter\npublic requestratelimitergatewayfilterfactory requestratelimitergatewayfilterfactory(ratelimiter ratelimiter,\n       keyresolver resolver) {\n    return new requestratelimitergatewayfilterfactory(ratelimiter, resolver);\n}\n\n\n重点来了，真正加载这个bean的是 @conditionalonenabledfilter 注解进行判断\n\n@retention(retentionpolicy.runtime)\n@target({ elementtype.type, elementtype.method })\n@documented\n@conditional(onenabledfilter.class)\npublic @interface conditionalonenabledfilter {\n\n    // 这里value是用来指定满足条件的某些类，换一句话说，就是这些类都加载或注入到ioc容器，这个注解修饰的自动装配类才会生效\n    class<? extends gatewayfilterfactory<?>> value() default onenabledfilter.defaultvalue.class;\n\n}\n\n\n我们继续跟进代码，查看@conditional(onenabledfilter.class)\n\n众所周知，@conditional可以用来加载满足条件的bean，所以，我们分析一下onenabledfilter\n\npublic class onenabledfilter extends onenabledcomponent<gatewayfilterfactory<?>> {}\n\n\n我分析它的父类，这里有你想要的答案！\n\npublic abstract class onenabledcomponent<t> extends springbootcondition implements configurationcondition {\n\n    private static final string prefix = "spring.cloud.gateway.server.webflux.";\n\n    private static final string suffix = ".enabled";\n\n    private conditionoutcome determineoutcome(class<? extends t> componentclass, propertyresolver resolver) {\n       // 拼接完整名称\n       // 例如 => spring.cloud.gateway.server.webflux.request-rate-limiter.enabled\n       string key = prefix + normalizecomponentname(componentclass) + suffix;\n       conditionmessage.builder messagebuilder = forcondition(annotationclass().getname(), componentclass.getname());\n       if ("false".equalsignorecase(resolver.getproperty(key))) {\n          // 不满足条件不加载bean\n          return conditionoutcome.nomatch(messagebuilder.because("bean is not available"));\n       }\n       // 满足条件加载bean\n       return conditionoutcome.match();\n    }\n}\n\n\n\n# 5.优化限流响应[使用全限定类名直接覆盖类]\n\n小伙伴们，有没有发现，这个这个响应体封装的不太好，因此，我们来自定义吧，我们直接覆盖类，代码修改如下\n\n@getter\n@configurationproperties("spring.cloud.gateway.server.webflux.filter.request-rate-limiter")\npublic class requestratelimitergatewayfilterfactory\n       extends abstractgatewayfilterfactory<requestratelimitergatewayfilterfactory.config> {\n\n    private static final string empty_key = "____empty_key__";\n\n    private final ratelimiter<?> defaultratelimiter;\n\n    private final keyresolver defaultkeyresolver;\n\n    /**\n     * switch to deny requests if the key resolver returns an empty key, defaults to true.\n     */\n    @setter\n    private boolean denyemptykey = true;\n\n    /** httpstatus to return when denyemptykey is true, defaults to forbidden. */\n    @setter\n    private string emptykeystatuscode = httpstatus.forbidden.name();\n\n    public requestratelimitergatewayfilterfactory(ratelimiter<?> defaultratelimiter, keyresolver defaultkeyresolver) {\n       super(config.class);\n       this.defaultratelimiter = defaultratelimiter;\n       this.defaultkeyresolver = defaultkeyresolver;\n    }\n\n    @override\n    public gatewayfilter apply(config config) {\n       keyresolver resolver = getordefault(config.keyresolver, defaultkeyresolver);\n       ratelimiter<?> limiter = getordefault(config.ratelimiter, defaultratelimiter);\n       boolean denyempty = getordefault(config.denyemptykey, this.denyemptykey);\n       httpstatusholder emptykeystatus = httpstatusholder\n          .parse(getordefault(config.emptykeystatus, this.emptykeystatuscode));\n       return (exchange, chain) -> resolver.resolve(exchange).defaultifempty(empty_key).flatmap(key -> {\n          if (empty_key.equals(key)) {\n             if (denyempty) {\n                setresponsestatus(exchange, emptykeystatus);\n                return exchange.getresponse().setcomplete();\n             }\n             return chain.filter(exchange);\n          }\n          string routeid = config.getrouteid();\n          if (routeid == null) {\n             route route = exchange.getattribute(serverwebexchangeutils.gateway_route_attr);\n             assert.notnull(route, "route is null");\n             routeid = route.getid();\n          }\n          return limiter.isallowed(routeid, key).flatmap(response -> {\n             for (map.entry<string, string> header : response.getheaders().entryset()) {\n                exchange.getresponse().getheaders().add(header.getkey(), header.getvalue());\n             }\n             if (response.isallowed()) {\n                return chain.filter(exchange);\n             }\n             // 主要修改这行\n             return responseok(exchange, result.fail("too_many_requests", "请求太频繁"));\n          });\n       });\n    }\n\n    private mono<void> responseok(serverwebexchange exchange, object data) {\n        return responseok(exchange, jacksonutils.tojsonstr(data), mediatype.application_json);\n    }\n\n    private mono<void> responseok(serverwebexchange exchange, string str, mediatype contenttype) {\n        databuffer buffer = exchange.getresponse().bufferfactory().wrap(str.getbytes(standardcharsets.utf_8));\n        serverhttpresponse response = exchange.getresponse();\n        response.setstatuscode(httpstatus.ok);\n        response.getheaders().setcontenttype(contenttype);\n        response.getheaders().setcontentlength(str.getbytes(standardcharsets.utf_8).length);\n        return response.writewith(flux.just(buffer));\n    }\n\n    private <t> t getordefault(t configvalue, t defaultvalue) {\n       return (configvalue != null) ? configvalue : defaultvalue;\n    }\n\n    public static class config implements hasrouteid {\n\n       @getter\n       private keyresolver keyresolver;\n\n       @getter\n       private ratelimiter<?> ratelimiter;\n\n       @getter\n       private httpstatus statuscode = httpstatus.too_many_requests;\n\n       @getter\n       private boolean denyemptykey;\n\n       @getter\n       private string emptykeystatus;\n\n       private string routeid;\n\n       public config setkeyresolver(keyresolver keyresolver) {\n          this.keyresolver = keyresolver;\n          return this;\n       }\n\n       public config setratelimiter(ratelimiter<?> ratelimiter) {\n          this.ratelimiter = ratelimiter;\n          return this;\n       }\n\n       public config setstatuscode(httpstatus statuscode) {\n          this.statuscode = statuscode;\n          return this;\n       }\n\n       public config setdenyemptykey(boolean denyemptykey) {\n          this.denyemptykey = denyemptykey;\n          return this;\n       }\n\n       public config setemptykeystatus(string emptykeystatus) {\n          this.emptykeystatus = emptykeystatus;\n          return this;\n       }\n\n       @override\n       public void setrouteid(string routeid) {\n          this.routeid = routeid;\n       }\n\n       @override\n       public string getrouteid() {\n          return this.routeid;\n       }\n\n    }\n\n}\n\n\n\n# 二、熔断降级\n\n思考：为什么需要熔断降级？\n\n当某个服务发生故障时（超时，响应慢，宕机），上游服务无法及时获取响应，进而也导致故障，出现服务雪崩【服务雪崩是指故障像滚雪球一样沿着调用链向上游扩展，进而导致整个系统瘫痪】\n\n熔断降级的目标就是在故障发生时，快速隔离问题服务【快速失败，防止资源耗尽】，保护系统资源不被耗尽，防止故障扩散，保护核心业务可用性。\n\n\n# 1.技术选型\n\n\n# 1.1.熔断降级框架选型对比表\n\n对比维度   hystrix (netflix)        sentinel (alibaba)             resilience4j\n当前状态   ❌ 停止更新 (维护模式)            ✅ 持续更新                         ✅ 持续更新\n熔断机制   滑动窗口计数                   响应时间/异常比例/qps                  错误率/响应时间阈值\n流量控制   ❌ 仅基础隔离                  ✅ qps/并发数/热点参数/集群流控            ✅ ratelimiter\n隔离策略   线程池（开销大）/信号量             并发线程数（无线程池开销）                  信号量/bulkhead\n降级能力   fallback 方法              fallback + 系统规则自适应             fallback + 自定义组合策略\n实时监控   ✅ hystrix dashboard      ✅ 原生控制台（可视化动态规则）               ❌ 需整合 prometheus/grafana\n动态配置   ❌ 依赖 archaius            ✅ 控制台实时推送                      ✅ 需编码实现（如spring cloud config）\n生态集成   ✅ spring cloud netflix   ✅ spring cloud alibaba/多语言网关   ✅ spring boot/响应式编程\n性能开销   高（线程池隔离）                 低（无额外线程）                       极低（纯函数式）\n适用场景   遗留系统维护                   高并发控制/秒杀/热点防护                  云原生/轻量级微服务\n推荐指数   ⭐⭐ (不推荐新项目)              ⭐⭐⭐⭐⭐ (java高并发首选)              ⭐⭐⭐⭐⭐ (云原生/响应式首选)\n\n\n# 1.2选型决策指南\n\n需求场景                      推荐方案             原因\n电商秒杀/api高频调用管控            ✅ sentinel       精细流量控制+热点防护+实时看板\nkubernetes云原生微服务          ✅ resilience4j   轻量化+无缝集成prometheus+响应式支持\nspring cloud netflix旧系统   ⚠️ hystrix       兼容现存代码（短期过渡）\n多语言混合架构（如go+java）         ✅ sentinel       通过sidecar代理支持非java服务\n响应式编程（webflux）            ✅ resilience4j   原生reactive api支持\n\n\n# 2.resilience4j使用\n\nresilience4j官方文档\n\nresilience4j 可以看作是 hystrix 的替代品，resilience4j支持 熔断器和单机限流\n\nresilience4j 是一个专为函数式编程设计的轻量级容错库。resilience4j 提供高阶函数（装饰器），可通过断路器、速率限制器、重试或隔离功能增强任何函数式接口、lambda 表达式或方法引用。您可以在任何函数式接口、lambda 表达式或方法引用上堆叠多个装饰器。这样做的好处是，您可以只选择所需的装饰器，而无需考虑其他因素。\n\n\n# 2.1.网关熔断降级（spring cloud gateway + resilience4j实战）\n\n# 2.1.1.pom依赖\n\n<dependency>\n  <groupid>org.springframework.cloud</groupid>\n  <artifactid>spring-cloud-starter-circuitbreaker-reactor-resilience4j</artifactid>\n</dependency>\n\n\n# 2.1.2.yaml配置\n\nspring:\n  application:\n    name: laokou-gateway\n  cloud:\n    gateway:\n       server:\n        webflux:\n          routes:\n            - id: laokou-sso-demo\n              uri: lb://laokou-sso-demo\n              predicates:\n              - path=/sso/**\n              filters:\n              - name: circuitbreaker\n                args:\n                  name: default\n                  fallbackuri: "forward:/fallback"\n          filter:\n            circuit-breaker:\n              enabled: true\n\n\n# 2.1.3.circuitbreakerconfig配置\n\n/**\n * @author laokou\n */\n@configuration\npublic class circuitbreakerconfig {\n\n    @bean\n    public routerfunction<serverresponse> routerfunction() {\n       return routerfunctions.route(\n             requestpredicates.path("/fallback").and(requestpredicates.accept(mediatype.text_plain)),\n             (request) -> serverresponse.status(httpstatus.sc_ok)\n                .contenttype(mediatype.application_json)\n                .body(bodyinserters.fromvalue(result.fail("service_unavailable", "服务正在维护"))));\n    }\n\n    @bean\n    public customizer<reactiveresilience4jcircuitbreakerfactory> reactiveresilience4jcircuitbreakerfactorycustomizer() {\n       return factory -> factory.configuredefault(id -> new resilience4jconfigbuilder(id)\n          // 3秒后超时时间\n          .timelimiterconfig(timelimiterconfig.custom().timeoutduration(duration.ofseconds(3)).build())\n          .circuitbreakerconfig(io.github.resilience4j.circuitbreaker.circuitbreakerconfig.ofdefaults())\n          .build());\n    }\n\n}\n\n\n我是老寇，我们下次再见啦！',charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"物联网之使用Vertx实现HTTPWebSocket最佳实践【响应式】",frontmatter:{title:"物联网之使用Vertx实现HTTPWebSocket最佳实践【响应式】",date:"2025-05-19T07:52:46.000Z",permalink:"/pages/04e661/"},regularPath:"/01.%E6%8C%87%E5%8D%97/08.%E6%96%87%E7%AB%A0/04.%E7%89%A9%E8%81%94%E7%BD%91%E4%B9%8B%E4%BD%BF%E7%94%A8Vertx%E5%AE%9E%E7%8E%B0HTTPWebSocket%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.html",relativePath:"01.指南/08.文章/04.物联网之使用Vertx实现HTTPWebSocket最佳实践.md",key:"v-66672d47",path:"/pages/04e661/",headers:[{level:3,title:"实现Http/WebSocket【响应式】",slug:"实现http-websocket【响应式】",normalizedTitle:"实现http/websocket【响应式】",charIndex:75},{level:3,title:"实现过程",slug:"实现过程",normalizedTitle:"实现过程",charIndex:114},{level:6,title:"代码比较简单，懒得讲解啦",slug:"代码比较简单-懒得讲解啦",normalizedTitle:"代码比较简单，懒得讲解啦",charIndex:128},{level:6,title:"代码比较简单，懒得讲解啦",slug:"代码比较简单-懒得讲解啦-2",normalizedTitle:"代码比较简单，懒得讲解啦",charIndex:128},{level:6,title:"代码比较简单，懒得讲解啦",slug:"代码比较简单-懒得讲解啦-3",normalizedTitle:"代码比较简单，懒得讲解啦",charIndex:128},{level:6,title:"http/websocket【响应式】",slug:"http-websocket【响应式】",normalizedTitle:"http/websocket【响应式】",charIndex:176}],headersStr:"实现Http/WebSocket【响应式】 实现过程 代码比较简单，懒得讲解啦 代码比较简单，懒得讲解啦 代码比较简单，懒得讲解啦 http/websocket【响应式】",content:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n跟我一起学习使用Vertx实现HTTP-Server和WebSocket-Server\n\n\n# 实现Http/WebSocket【响应式】\n\nVertx-Web地址\n\n\n# 实现过程\n\n查看源码\n\n# 代码比较简单，懒得讲解啦\n\n# 代码比较简单，懒得讲解啦\n\n# 代码比较简单，懒得讲解啦\n\n# http/websocket【响应式】\n\n<dependency>\n  <groupId>io.vertx</groupId>\n  <artifactId>vertx-web</artifactId>\n  <version>5.0.0</version>\n</dependency>\n\n\nHttpServerProperties\n\n/**\n * @author laokou\n */\n@Data\n@Component\n@ConfigurationProperties(prefix = "spring.http-server")\npublic class HttpServerProperties {\n\n    private boolean auth = true;\n\n    private String host = "0.0.0.0";\n\n    private Set<Integer> ports = new HashSet<>(0);\n\n    private boolean compressionSupported = false;\n\n    private int compressionLevel = 6;\n\n    private int maxWebSocketFrameSize = 65536;\n\n    private int maxWebSocketMessageSize = 65536 * 4;\n\n    private boolean handle100ContinueAutomatically = false;\n\n    private int maxChunkSize = 8192;\n\n    private int maxInitialLineLength = 4096;\n\n    private int maxHeaderSize = 8192;\n\n    private int maxFormAttributeSize = 8192;\n\n    private int maxFormFields = 512;\n\n    private int maxFormBufferedBytes = 2048;\n\n    private Http2Settings initialSettings = new Http2Settings()\n       .setMaxConcurrentStreams(DEFAULT_INITIAL_SETTINGS_MAX_CONCURRENT_STREAMS);\n\n    private List<HttpVersion> alpnVersions = new ArrayList<>(DEFAULT_ALPN_VERSIONS);\n\n    private boolean http2ClearTextEnabled = true;\n\n    private int http2ConnectionWindowSize = -1;\n\n    private boolean decompressionSupported = false;\n\n    private boolean acceptUnmaskedFrames = false;\n\n    private int decoderInitialBufferSize = 256;\n\n    private boolean perFrameWebSocketCompressionSupported = true;\n\n    private boolean perMessageWebSocketCompressionSupported = true;\n\n    private int webSocketCompressionLevel = 6;\n\n    private boolean webSocketAllowServerNoContext = false;\n\n    private boolean webSocketPreferredClientNoContext = false;\n\n    private int webSocketClosingTimeout = 30;\n\n    private TracingPolicy tracingPolicy = TracingPolicy.ALWAYS;\n\n    private boolean registerWebSocketWriteHandlers = false;\n\n    private int http2RstFloodMaxRstFramePerWindow = 400;\n\n    private int http2RstFloodWindowDuration = 60;\n\n    private TimeUnit http2RstFloodWindowDurationTimeUnit = TimeUnit.SECONDS;\n\n}\n\n\nVertxHttpServer\n\n/**\n * @author laokou\n */\n@Slf4j\nfinal class VertxHttpServer extends AbstractVerticle {\n\n    private final HttpServerProperties properties;\n\n    private final Vertx vertx;\n\n    private final Router router;\n\n    private volatile Flux<HttpServer> httpServer;\n\n    private boolean isClosed = false;\n\n    VertxHttpServer(Vertx vertx, HttpServerProperties properties) {\n       this.vertx = vertx;\n       this.properties = properties;\n       this.router = getRouter();\n    }\n\n    @Override\n    public synchronized void start() {\n       httpServer = getHttpServerOptions().map(vertx::createHttpServer)\n          .doOnNext(server -> server.webSocketHandler(serverWebSocket -> {\n             if (!RegexUtils.matches(WebsocketMessageEnum.UP_PROPERTY_REPORT.getPath(), serverWebSocket.path())) {\n                serverWebSocket.close();\n                return;\n             }\n             serverWebSocket.textMessageHandler(message -> log.info("【Vertx-WebSocket-Server】 => 收到消息：{}", message))\n                .closeHandler(v -> log.error("【Vertx-WebSocket-Server】 => 断开连接"))\n                .exceptionHandler(err -> log.error("【Vertx-WebSocket-Server】 => 错误信息：{}", err.getMessage(), err))\n                .endHandler(v -> log.error("【Vertx-WebSocket-Server】 => 结束"));\n          }).requestHandler(router).listen().onComplete(completionHandler -> {\n             if (isClosed) {\n                return;\n             }\n             if (completionHandler.succeeded()) {\n                log.info("【Vertx-HTTP-Server】 => HTTP服务启动成功，端口：{}", server.actualPort());\n             }\n             else {\n                Throwable ex = completionHandler.cause();\n                log.error("【Vertx-HTTP-Server】 => HTTP服务启动失败，错误信息：{}", ex.getMessage(), ex);\n             }\n          }));\n       httpServer.subscribeOn(Schedulers.boundedElastic()).subscribe();\n    }\n\n    @Override\n    public synchronized void stop() {\n       isClosed = true;\n       httpServer.doOnNext(server -> server.close().onComplete(result -> {\n          if (result.succeeded()) {\n             log.info("【Vertx-HTTP-Server】 => HTTP服务停止成功，端口：{}", server.actualPort());\n          }\n          else {\n             Throwable ex = result.cause();\n             log.error("【Vertx-HTTP-Server】 => HTTP服务停止失败，错误信息：{}", ex.getMessage(), ex);\n          }\n       })).subscribeOn(Schedulers.boundedElastic()).subscribe();\n    }\n\n    public void deploy() {\n       // 部署服务\n       vertx.deployVerticle(this);\n       // 停止服务\n       Runtime.getRuntime().addShutdownHook(new Thread(this::stop));\n    }\n\n    private Router getRouter() {\n       Router router = Router.router(vertx);\n       router.route().handler(BodyHandler.create());\n       router.post(HttpMessageEnum.UP_PROPERTY_REPORT.getRouter()).handler(ctx -> {\n          String body = ctx.body().asString();\n          Long deviceId = Long.valueOf(ctx.pathParam("deviceId"));\n          Long productId = Long.valueOf(ctx.pathParam("productId"));\n          log.info("productId:{}，deviceId:{}，body：{}", productId, deviceId, body);\n          ctx.response().end();\n       });\n       return router;\n    }\n\n    private Flux<HttpServerOptions> getHttpServerOptions() {\n       return Flux.fromIterable(properties.getPorts()).map(this::getHttpServerOption);\n    }\n\n    private HttpServerOptions getHttpServerOption(int port) {\n       HttpServerOptions options = new HttpServerOptions();\n       options.setHost(properties.getHost());\n       options.setPort(port);\n       options.setCompressionSupported(properties.isCompressionSupported());\n       options.setDecompressionSupported(properties.isDecompressionSupported());\n       options.setCompressionLevel(properties.getCompressionLevel());\n       options.setMaxWebSocketFrameSize(properties.getMaxWebSocketFrameSize());\n       options.setMaxWebSocketMessageSize(properties.getMaxWebSocketMessageSize());\n       options.setHandle100ContinueAutomatically(properties.isHandle100ContinueAutomatically());\n       options.setMaxChunkSize(properties.getMaxChunkSize());\n       options.setMaxInitialLineLength(properties.getMaxInitialLineLength());\n       options.setMaxHeaderSize(properties.getMaxHeaderSize());\n       options.setMaxFormAttributeSize(properties.getMaxFormAttributeSize());\n       options.setMaxFormFields(properties.getMaxFormFields());\n       options.setMaxFormBufferedBytes(properties.getMaxFormBufferedBytes());\n       options.setInitialSettings(properties.getInitialSettings());\n       options.setAlpnVersions(properties.getAlpnVersions());\n       options.setHttp2ClearTextEnabled(properties.isHttp2ClearTextEnabled());\n       options.setHttp2ConnectionWindowSize(properties.getHttp2ConnectionWindowSize());\n       options.setDecoderInitialBufferSize(properties.getDecoderInitialBufferSize());\n       options.setPerFrameWebSocketCompressionSupported(properties.isPerFrameWebSocketCompressionSupported());\n       options.setPerMessageWebSocketCompressionSupported(properties.isPerMessageWebSocketCompressionSupported());\n       options.setWebSocketCompressionLevel(properties.getWebSocketCompressionLevel());\n       options.setWebSocketAllowServerNoContext(properties.isWebSocketAllowServerNoContext());\n       options.setWebSocketPreferredClientNoContext(properties.isWebSocketPreferredClientNoContext());\n       options.setWebSocketClosingTimeout(properties.getWebSocketClosingTimeout());\n       options.setTracingPolicy(properties.getTracingPolicy());\n       options.setRegisterWebSocketWriteHandlers(properties.isRegisterWebSocketWriteHandlers());\n       options.setHttp2RstFloodMaxRstFramePerWindow(properties.getHttp2RstFloodMaxRstFramePerWindow());\n       options.setHttp2RstFloodWindowDuration(properties.getHttp2RstFloodWindowDuration());\n       options.setHttp2RstFloodWindowDurationTimeUnit(properties.getHttp2RstFloodWindowDurationTimeUnit());\n       return options;\n    }\n\n}\n\n\n这只是一个demo，实际情况，需要对http请求进行鉴权，推荐使用OAuth2\n\n我是老寇，我们下次再见啦！',normalizedContent:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n跟我一起学习使用vertx实现http-server和websocket-server\n\n\n# 实现http/websocket【响应式】\n\nvertx-web地址\n\n\n# 实现过程\n\n查看源码\n\n# 代码比较简单，懒得讲解啦\n\n# 代码比较简单，懒得讲解啦\n\n# 代码比较简单，懒得讲解啦\n\n# http/websocket【响应式】\n\n<dependency>\n  <groupid>io.vertx</groupid>\n  <artifactid>vertx-web</artifactid>\n  <version>5.0.0</version>\n</dependency>\n\n\nhttpserverproperties\n\n/**\n * @author laokou\n */\n@data\n@component\n@configurationproperties(prefix = "spring.http-server")\npublic class httpserverproperties {\n\n    private boolean auth = true;\n\n    private string host = "0.0.0.0";\n\n    private set<integer> ports = new hashset<>(0);\n\n    private boolean compressionsupported = false;\n\n    private int compressionlevel = 6;\n\n    private int maxwebsocketframesize = 65536;\n\n    private int maxwebsocketmessagesize = 65536 * 4;\n\n    private boolean handle100continueautomatically = false;\n\n    private int maxchunksize = 8192;\n\n    private int maxinitiallinelength = 4096;\n\n    private int maxheadersize = 8192;\n\n    private int maxformattributesize = 8192;\n\n    private int maxformfields = 512;\n\n    private int maxformbufferedbytes = 2048;\n\n    private http2settings initialsettings = new http2settings()\n       .setmaxconcurrentstreams(default_initial_settings_max_concurrent_streams);\n\n    private list<httpversion> alpnversions = new arraylist<>(default_alpn_versions);\n\n    private boolean http2cleartextenabled = true;\n\n    private int http2connectionwindowsize = -1;\n\n    private boolean decompressionsupported = false;\n\n    private boolean acceptunmaskedframes = false;\n\n    private int decoderinitialbuffersize = 256;\n\n    private boolean perframewebsocketcompressionsupported = true;\n\n    private boolean permessagewebsocketcompressionsupported = true;\n\n    private int websocketcompressionlevel = 6;\n\n    private boolean websocketallowservernocontext = false;\n\n    private boolean websocketpreferredclientnocontext = false;\n\n    private int websocketclosingtimeout = 30;\n\n    private tracingpolicy tracingpolicy = tracingpolicy.always;\n\n    private boolean registerwebsocketwritehandlers = false;\n\n    private int http2rstfloodmaxrstframeperwindow = 400;\n\n    private int http2rstfloodwindowduration = 60;\n\n    private timeunit http2rstfloodwindowdurationtimeunit = timeunit.seconds;\n\n}\n\n\nvertxhttpserver\n\n/**\n * @author laokou\n */\n@slf4j\nfinal class vertxhttpserver extends abstractverticle {\n\n    private final httpserverproperties properties;\n\n    private final vertx vertx;\n\n    private final router router;\n\n    private volatile flux<httpserver> httpserver;\n\n    private boolean isclosed = false;\n\n    vertxhttpserver(vertx vertx, httpserverproperties properties) {\n       this.vertx = vertx;\n       this.properties = properties;\n       this.router = getrouter();\n    }\n\n    @override\n    public synchronized void start() {\n       httpserver = gethttpserveroptions().map(vertx::createhttpserver)\n          .doonnext(server -> server.websockethandler(serverwebsocket -> {\n             if (!regexutils.matches(websocketmessageenum.up_property_report.getpath(), serverwebsocket.path())) {\n                serverwebsocket.close();\n                return;\n             }\n             serverwebsocket.textmessagehandler(message -> log.info("【vertx-websocket-server】 => 收到消息：{}", message))\n                .closehandler(v -> log.error("【vertx-websocket-server】 => 断开连接"))\n                .exceptionhandler(err -> log.error("【vertx-websocket-server】 => 错误信息：{}", err.getmessage(), err))\n                .endhandler(v -> log.error("【vertx-websocket-server】 => 结束"));\n          }).requesthandler(router).listen().oncomplete(completionhandler -> {\n             if (isclosed) {\n                return;\n             }\n             if (completionhandler.succeeded()) {\n                log.info("【vertx-http-server】 => http服务启动成功，端口：{}", server.actualport());\n             }\n             else {\n                throwable ex = completionhandler.cause();\n                log.error("【vertx-http-server】 => http服务启动失败，错误信息：{}", ex.getmessage(), ex);\n             }\n          }));\n       httpserver.subscribeon(schedulers.boundedelastic()).subscribe();\n    }\n\n    @override\n    public synchronized void stop() {\n       isclosed = true;\n       httpserver.doonnext(server -> server.close().oncomplete(result -> {\n          if (result.succeeded()) {\n             log.info("【vertx-http-server】 => http服务停止成功，端口：{}", server.actualport());\n          }\n          else {\n             throwable ex = result.cause();\n             log.error("【vertx-http-server】 => http服务停止失败，错误信息：{}", ex.getmessage(), ex);\n          }\n       })).subscribeon(schedulers.boundedelastic()).subscribe();\n    }\n\n    public void deploy() {\n       // 部署服务\n       vertx.deployverticle(this);\n       // 停止服务\n       runtime.getruntime().addshutdownhook(new thread(this::stop));\n    }\n\n    private router getrouter() {\n       router router = router.router(vertx);\n       router.route().handler(bodyhandler.create());\n       router.post(httpmessageenum.up_property_report.getrouter()).handler(ctx -> {\n          string body = ctx.body().asstring();\n          long deviceid = long.valueof(ctx.pathparam("deviceid"));\n          long productid = long.valueof(ctx.pathparam("productid"));\n          log.info("productid:{}，deviceid:{}，body：{}", productid, deviceid, body);\n          ctx.response().end();\n       });\n       return router;\n    }\n\n    private flux<httpserveroptions> gethttpserveroptions() {\n       return flux.fromiterable(properties.getports()).map(this::gethttpserveroption);\n    }\n\n    private httpserveroptions gethttpserveroption(int port) {\n       httpserveroptions options = new httpserveroptions();\n       options.sethost(properties.gethost());\n       options.setport(port);\n       options.setcompressionsupported(properties.iscompressionsupported());\n       options.setdecompressionsupported(properties.isdecompressionsupported());\n       options.setcompressionlevel(properties.getcompressionlevel());\n       options.setmaxwebsocketframesize(properties.getmaxwebsocketframesize());\n       options.setmaxwebsocketmessagesize(properties.getmaxwebsocketmessagesize());\n       options.sethandle100continueautomatically(properties.ishandle100continueautomatically());\n       options.setmaxchunksize(properties.getmaxchunksize());\n       options.setmaxinitiallinelength(properties.getmaxinitiallinelength());\n       options.setmaxheadersize(properties.getmaxheadersize());\n       options.setmaxformattributesize(properties.getmaxformattributesize());\n       options.setmaxformfields(properties.getmaxformfields());\n       options.setmaxformbufferedbytes(properties.getmaxformbufferedbytes());\n       options.setinitialsettings(properties.getinitialsettings());\n       options.setalpnversions(properties.getalpnversions());\n       options.sethttp2cleartextenabled(properties.ishttp2cleartextenabled());\n       options.sethttp2connectionwindowsize(properties.gethttp2connectionwindowsize());\n       options.setdecoderinitialbuffersize(properties.getdecoderinitialbuffersize());\n       options.setperframewebsocketcompressionsupported(properties.isperframewebsocketcompressionsupported());\n       options.setpermessagewebsocketcompressionsupported(properties.ispermessagewebsocketcompressionsupported());\n       options.setwebsocketcompressionlevel(properties.getwebsocketcompressionlevel());\n       options.setwebsocketallowservernocontext(properties.iswebsocketallowservernocontext());\n       options.setwebsocketpreferredclientnocontext(properties.iswebsocketpreferredclientnocontext());\n       options.setwebsocketclosingtimeout(properties.getwebsocketclosingtimeout());\n       options.settracingpolicy(properties.gettracingpolicy());\n       options.setregisterwebsocketwritehandlers(properties.isregisterwebsocketwritehandlers());\n       options.sethttp2rstfloodmaxrstframeperwindow(properties.gethttp2rstfloodmaxrstframeperwindow());\n       options.sethttp2rstfloodwindowduration(properties.gethttp2rstfloodwindowduration());\n       options.sethttp2rstfloodwindowdurationtimeunit(properties.gethttp2rstfloodwindowdurationtimeunit());\n       return options;\n    }\n\n}\n\n\n这只是一个demo，实际情况，需要对http请求进行鉴权，推荐使用oauth2\n\n我是老寇，我们下次再见啦！',charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"物联网之常见网络配置",frontmatter:{title:"物联网之常见网络配置",date:"2025-08-09T17:59:55.000Z",permalink:"/pages/9d20f6/"},regularPath:"/01.%E6%8C%87%E5%8D%97/08.%E6%96%87%E7%AB%A0/07.%E7%89%A9%E8%81%94%E7%BD%91%E4%B9%8B%E5%B8%B8%E8%A7%81%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE.html",relativePath:"01.指南/08.文章/07.物联网之常见网络配置.md",key:"v-7cffb40a",path:"/pages/9d20f6/",headers:[{level:3,title:"一、常见网络配置名词",slug:"一、常见网络配置名词",normalizedTitle:"一、常见网络配置名词",charIndex:368},{level:4,title:"1.IP地址",slug:"_1-ip地址",normalizedTitle:"1.ip地址",charIndex:382},{level:4,title:"2.网关",slug:"_2-网关",normalizedTitle:"2.网关",charIndex:547},{level:4,title:"3.子网掩码",slug:"_3-子网掩码",normalizedTitle:"3.子网掩码",charIndex:666},{level:4,title:"4.Mac地址",slug:"_4-mac地址",normalizedTitle:"4.mac地址",charIndex:847},{level:3,title:"二、动手实践",slug:"二、动手实践",normalizedTitle:"二、动手实践",charIndex:937}],headersStr:"一、常见网络配置名词 1.IP地址 2.网关 3.子网掩码 4.Mac地址 二、动手实践",content:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n跟我一起学习网络配置\n\n由于工作原因，需要熟悉网关设备的网络配置，因此整理一下，便于查阅。\n\n我还记得上大学的时候，老师教我们计算机网络的时候，我没有听讲却用来学习Java。因此，对计算机网络不熟悉，这也间接导致在工作中遇到网络相关的问题束手无措，通过翻阅资料和同事交流才搞明白，我写的这个，对新手来说，应该有一定的借鉴意义。\n\n“往者不可谏来者犹可追”。这句话出自《论语》，意思是 过去的事情已无法劝谏挽回。未来的事情还能够来得及追改 很多事情都是需要自己亲身经历的，也是无法逃避的，这可能就是命中注定的宿命吧！所以，与其逃避不如坦然面对，直面自己的惨淡人生，活出属于自己的精彩！\n\n在科技高速发展的今天，几乎每个人都用上了智能手机，智能手机只要是上网，就需要用到 网络\n\n\n# 一、常见网络配置名词\n\n# 1.IP地址\n\nIP地址就像你家在互联网上的“门牌号”，有了它，数据才能准确找到你的设备并传输信息。\n\n常见形式\n\n * IPv4：四组数字，如 192.168.1.1（总量有限，类似电话号码不够用）。\n * IPv6：更长，如 2001:0db8:85a3::8a2e:0370:7334（解决数量不足问题，未来主流）。\n\n# 2.网关\n\n网关就像你家的“大门”，所有设备想连接外部互联网（如刷视频、看网页），都必须先经过它才能出入。\n\n网关能把你家所有设备的“内部IP”（如 192.168.1.18）统一转换成一个对外的“公网IP”，保护隐私且节省地址。\n\n# 3.子网掩码\n\n子网掩码像一把“尺子”，用来量出IP地址中哪部分是“小区名”（网络区域），哪部分是“门牌号”（具体设备），让路由器知道该在本地送货还是发往外省。\n\n举例 192.168.1.18/24\n\nIP地址：192.168.1.18\n\n子网掩码：255.255.255.0\n\n子网掩码长度：24\n\n问题：子网掩码为什么是 255.255.255.0\n\n# 4.Mac地址\n\nMAC地址是设备网卡的“身份证号”（全球唯一且不可更改），用来在本地网络（如你家Wi-Fi）中精准识别每一台手机/电脑/打印机，实现“面对面”直连通信。\n\n\n# 二、动手实践\n\n我们一起使用代码的方式修改网络配置，工作中使用Go开发，操作系统为Ubuntu，所以用Go和Ubuntu来举例!\n\nUbuntu网络配置路径为/etc/netplan/01-network-manager-all.yaml,不同的Ubuntu版本可能名字有点差异，但是不影响配置使用\n\n我们一起学习一下网络配置的参数\n\n注意： 网关设备如果有两个LAN口，可以配置两个【LAN1和LAN2】，对应网络接口名称为eth0和eth1\n\n注意： 以太网可以动态获取IP【Dhcp】和静态配置IP【Static】\n\n字段说明\n\n字段          说明\nversion     必须为 2（Netplan 配置版本）\nrenderer    指定使用哪个后端，常见有 networkd 或 NetworkManager\nethernets   配置物理网卡\nwifis       配置无线接口（需 NetworkManager 支持）\n\nEthernet 参数配置示例\n\n参数                      类型     示例                   说明\ndhcp4                   bool   true / false         是否启用 IPv4 DHCP\ndhcp6                   bool   true / false         是否启用 IPv6 DHCP\naddresses               列表     [192.168.1.100/24]   分配静态 IP 地址和子网掩码\ngateway4                字符串    192.168.1.1          IPv4 默认网关\ngateway6                字符串    fe80::1              IPv6 默认网关\nnameservers.addresses   列表     [8.8.8.8, 1.1.1.1]   DNS 服务器列表\nnameservers.search      列表     [example.com]        DNS 搜索域列表\noptional                bool   true                 设置为可选（不影响系统启动）\nmacaddress              字符串    aa:bb:cc:dd:ee:ff    指定网卡的 MAC 地址\nmtu                     整数     1500                 设置 MTU 值\nroutes.to               列表     10.0.0.0/8           目标网段\nroutes.via              列表     192.168.1.1          下一跳地址（gateway），数据包将被发送到这个网关去转发\nroutes.metric           列表     100                  路由优先级，数字越小优先级越高。多个匹配路径中会优先使用 metric 较低的\n\nWifi 参数配置示例\n\n参数                              类型        示例                           说明\ndhcp4                           boolean   true / false                 是否启用 IPv4 的 DHCP\ndhcp6                           boolean   true / false                 是否启用 IPv6 的 DHCP\noptional                        boolean   true                         将接口标记为“非关键”，启动时不阻塞\naddresses                       list      [192.168.1.100/24]           分配静态 IP 地址\ngateway4                        string    192.168.1.1                  设置 IPv4 默认网关\ngateway6                        string    fe80::1                      设置 IPv6 默认网关\nnameservers.addresses           list      [8.8.8.8, 1.1.1.1]           设置 DNS 服务器\nmacaddress                      string    aa:bb:cc:dd:ee:ff            设置 MAC 地址（MAC Spoofing）\nroutes.to                       列表        10.0.0.0/8                   目标网段\nroutes.via                      列表        192.168.1.1                  下一跳地址（gateway），数据包将被发送到这个网关去转发\nroutes.metric                   列表        100                          路由优先级，数字越小优先级越高。多个匹配路径中会优先使用 metric 较低的\naccess-points.<SSID>.password   string    "12345678"                   Wi-Fi 密码，支持 WPA/WPA2\naccess-points.<SSID>.mode       string    "infrastructure" / "adhoc"   连接模式（基础设施或点对点）\naccess-points.<SSID>.bssid      string    aa:bb:cc:dd:ee:ff            连接特定 AP 的 MAC 地址（仅在多 AP 场景用）\naccess-points.<SSID>.band       string    "2.4GHz" / "5GHz"            频段（可选）\naccess-points.<SSID>.channel    int       6                            频道（仅用于 Ad-Hoc）\naccess-points.<SSID>.hidden     boolean   true                         SSID 是否为隐藏 Wi-Fi\n\nnet.go\n\npackage main\n\nimport (\n    "errors"\n    "os"\n    "os/exec"\n    "runtime"\n    "strings"\n\n    "gopkg.in/yaml.v3"\n)\n\nconst (\n    // 默认网络配置文件路径\n    DEFAULT_NETPLAN_CONFIG_PATH = "/etc/netplan/01-network-manager-all.yaml"\n    // LAN1 网口1\n    LAN1 = "eth0"\n    // LAN2 网口2\n    LAN2 = "eth1"\n)\n\ntype NetworkConfig struct {\n    Address    string `json:"address"`\n    Gateway    string `json:"gateway"`\n    Dns        string `json:"dns"`\n    MacAddress string `json:"macAddress"`\n}\n\ntype NetPlanConfig struct {\n    Network struct {\n       // Version 必须为 2，表示 Netplan 配置的版本\n       Version int8 `yaml:"version,omitempty"`\n       // Renderer 指定使用哪个后端，常见有 networkd 或 NetworkManager\n       // NetworkManager 适用于桌面环境\n       // networkd 适用于服务器环境\n       Renderer string `yaml:"renderer,omitempty"`\n       // Ethernets 是一个 map，键为网卡名称，值为 Ethernet 配置\n       // 例如：`"eth0": { ... }`\n       // 这里的网卡名称可以是物理网卡名或虚拟网卡名\n       // 例如：`"eth0"`、`"eth1"`、`"wlan0"` 等\n       Ethernets map[string]*Ethernet `yaml:"ethernets,omitempty"`\n       // 如果需要配置无线网卡，请使用 `wifis` 字段\n       Wifis map[string]*Wifi `yaml:"wifis,omitempty"`\n    } `yaml:"network,omitempty"`\n}\n\n// Wifi 无线网络接口配置结构体【Wi-Fi】\ntype Wifi struct {\n    // DHCP4 和 DHCP6 分别表示是否启用 IPv4 和 IPv6 的 DHCP\n    Dhcp4 bool `yaml:"dhcp4"`\n    Dhcp6 bool `yaml:"dhcp6,omitempty"`\n    // Optional 表示该接口是否为可选的，设置为 true 时启动时\n    Optional bool `yaml:"optional,omitempty"`\n    // Address 配置 IP 地址\n    Addresses []string `yaml:"addresses,omitempty"`\n    // Gateway4 和 Gateway6 分别表示 IPv4 和 IPv6 的默认网关\n    Gateway4 string `yaml:"gateway4,omitempty"`\n    Gateway6 string `yaml:"gateway6,omitempty"`\n    // Nameservers 包含 DNS 服务器地址\n    Nameservers struct {\n       // Addresses 是 DNS 服务器地址列表\n       Addresses []string `yaml:"addresses,omitempty"`\n    } `yaml:"nameservers,omitempty"`\n    // MacAddress 是网卡的 MAC 地址\n    MacAddress string `yaml:"macaddress,omitempty"`\n    // Routes 是一个路由列表，每个路由包含目标地址、网关和优先级\n    Routes Route `yaml:"routes,omitempty"`\n    // AccessPoints 是一个 map，键为 SSID，值为 AccessPoint 配置\n    AccessPoints map[string]AccessPoint `yaml:"access-points,omitempty"`\n}\n\n// Ethernet 网卡结构体【以太网】\ntype Ethernet struct {\n    // DHCP4 和 DHCP6 分别表示是否启用 IPv4 和 IPv6 的 DHCP\n    DHCP4 bool `yaml:"dhcp4"`\n    DHCP6 bool `yaml:"dhcp6,omitempty"`\n    // Addresses 是一个字符串数组，表示分配的静态 IP 地址和子网掩码\n    Addresses []string `yaml:"addresses,omitempty"`\n    // Gateway4 和 Gateway6 分别表示 IPv4 和 IPv6 的默认网关\n    Gateway4 string `yaml:"gateway4,omitempty"`\n    Gateway6 string `yaml:"gateway6,omitempty"`\n    // Nameservers 包含 DNS 服务器地址和搜索域\n    Nameservers struct {\n       // Addresses 是 DNS 服务器地址列表\n       Addresses []string `yaml:"addresses,omitempty"`\n       // Search 是 DNS 搜索域列表\n       Search []string `yaml:"search,omitempty"`\n    } `yaml:"nameservers,omitempty"`\n    // Routes 是一个路由列表，每个路由包含目标地址、网关和优先级\n    Routes Route `yaml:"routes,omitempty"`\n    // Optional 表示该接口是否为可选的，设置为 true 时启动时不会阻塞\n    Optional bool `yaml:"optional,omitempty"`\n    // MacAddress 是网卡的 MAC 地址\n    MacAddress string `yaml:"macaddress,omitempty"`\n    // Mtu 是网卡的 MTU\n    Mtu int `yaml:"mtu,omitempty"`\n}\n\n// Route 路由\ntype Route struct {\n    // To 是目标地址或网段\n    To string `yaml:"to,omitempty"`\n    // Via 是路由的网关地址\n    Via string `yaml:"via,omitempty"`\n    // Metric 是路由的优先级，数字越小优先级越高\n    Metric int `yaml:"metric,omitempty"`\n}\n\n// AccessPoint 无线接入点配置结构体\ntype AccessPoint struct {\n    // Mode 是连接模式，可能的值有 "infrastructure"（基础设施模式）或 "adhoc"（点对点模式）\n    Mode string `yaml:"mode,omitempty"`\n    // Password 是 Wi-Fi 密码，支持 WPA/WPA2\n    Password string `yaml:"password,omitempty"`\n    // Bssid 是接入点的 MAC 地址，通常用于连接特定的 AP\n    Bssid string `yaml:"bssid,omitempty"`\n    // Band 是无线频段，可能的值有 "2.4GHz" 或 "5GHz"\n    Band string `yaml:"band,omitempty"`\n    // Channel 是无线频道，通常用于 Ad-Hoc 模式\n    Channel int `yaml:"channel,omitempty"`\n    // Hidden 是是否隐藏 SSID，通常用于 Ad-Hoc 模式\n    Hidden bool `yaml:"hidden,omitempty"`\n}\n\nfunc NewDefaultNetPlanConfig() *NetPlanConfig {\n    netConfig := &NetPlanConfig{}\n    netConfig.Network.Version = 2\n    netConfig.Network.Renderer = "NetworkManager"\n    // 两个网口\n    netConfig.Network.Ethernets = make(map[string]*Ethernet, 2)\n    netConfig.Network.Ethernets[LAN1] = &Ethernet{}\n    netConfig.Network.Ethernets[LAN2] = &Ethernet{}\n    return netConfig\n}\n\nfunc SaveNetPlanConfig(buf []byte, path string) error {\n    err := os.WriteFile(path, buf, 0644)\n    if err != nil {\n       return errors.New("写入网络配置文件失败，错误信息：" + err.Error())\n    }\n    return nil\n}\n\nfunc ApplyNetPlanConfig() error {\n    err := validateOS()\n    if err != nil {\n       return err\n    }\n    err = exec.Command("netplan", "apply").Run()\n    if err != nil {\n       return errors.New("应用网络配置失败，错误信息：" + err.Error())\n    }\n    return nil\n}\n\nfunc ReadNetPlanConfig(path string) (*NetPlanConfig, error) {\n    data, err := os.ReadFile(path)\n    if err != nil {\n       return nil, errors.New("读取网络配置文件失败，错误信息：" + err.Error())\n    }\n    netConfig := &NetPlanConfig{}\n    err = yaml.Unmarshal(data, netConfig)\n    if err != nil {\n       return nil, errors.New("网络配置反序列化失败，错误信息：" + err.Error())\n    }\n    return netConfig, nil\n}\n\nfunc GetMacAddress() (string, error) {\n    err := validateOS()\n    if err != nil {\n       return "", err\n    }\n    output, err := exec.Command("sh", "-c", `ip link show eth0 | awk \'/ether/ {print $2}\'`).Output()\n    if err != nil {\n       return "", errors.New("获取MAC地址失败，错误信息：" + err.Error())\n    }\n    return strings.TrimSpace(string(output)), nil\n}\n\nfunc GetIpAddress() (string, error) {\n    err := validateOS()\n    if err != nil {\n       return "", err\n    }\n    output, err := exec.Command("sh", "-c", `ip addr show eth0 | grep "inet " | awk \'{print $2}\' | cut -d\'/\' -f1`).Output()\n    if err != nil {\n       return "", errors.New("获取IP地址失败，错误信息：" + err.Error())\n    }\n    return strings.TrimSpace(string(output)), nil\n}\n\nfunc GetGateway() (string, error) {\n    err := validateOS()\n    if err != nil {\n       return "", err\n    }\n    output, err := exec.Command("sh", "-c", `ip route | grep default | grep eth0 | awk \'{print $3}\'`).Output()\n    if err != nil {\n       return "", errors.New("获取网关失败，错误信息：" + err.Error())\n    }\n    return strings.TrimSpace(string(output)), nil\n}\n\nfunc GetNetmask() (string, error) {\n    err := validateOS()\n    if err != nil {\n       return "", err\n    }\n    output, err := exec.Command("sh", "-c", `ip addr show eth0 | grep "inet " | awk \'{print $2}\' | cut -d\'/\' -f2`).Output()\n    if err != nil {\n       return "", errors.New("获取子网掩码长度失败，错误信息：" + err.Error())\n    }\n    return strings.TrimSpace(string(output)), nil\n}\n\nfunc GetNetworkConfig(path string) (*NetworkConfig, error) {\n    config, err := getNetPlanConfig(path)\n    if err != nil {\n       return nil, err\n    }\n    ethernet := config.Network.Ethernets[LAN1]\n    return &NetworkConfig{\n       Address:    ethernet.Addresses[0],\n       Gateway:    ethernet.Gateway4,\n       Dns:        strings.Join(ethernet.Nameservers.Addresses, ","),\n       MacAddress: ethernet.MacAddress,\n    }, nil\n}\n\nfunc getNetPlanConfig(path string) (*NetPlanConfig, error) {\n    data, err := os.ReadFile(path)\n    if err != nil {\n       return nil, errors.New("获取网络配置失败，错误信息：" + err.Error())\n    }\n    netConfig := &NetPlanConfig{}\n    err = yaml.Unmarshal(data, netConfig)\n    return netConfig, nil\n}\n\nfunc validateOS() error {\n    if runtime.GOOS != "linux" {\n       return errors.New("网关在 " + runtime.GOOS + " 操作系统上不支持该操作")\n    }\n    return nil\n}\n\n\nnet_test.go\n\npackage main\n\nimport (\n    "fmt"\n    "gopkg.in/yaml.v3"\n    "testing"\n)\n\nfunc TestNetPlanConfig(t *testing.T) {\n    netConfig := NewDefaultNetPlanConfig()\n    netConfig.Network.Ethernets[LAN1].DHCP4 = true\n    netConfig.Network.Ethernets[LAN1].MacAddress = "22:03:xz:2f:a2:1a"\n    netConfig.Network.Ethernets[LAN2].DHCP4 = false\n    netConfig.Network.Ethernets[LAN2].MacAddress = "22:03:xz:2f:a2:1a"\n    netConfig.Network.Ethernets[LAN2].Addresses = []string{"100.100.1.10/24"}\n    netConfig.Network.Ethernets[LAN2].Gateway4 = "100.100.1.1"\n    netConfig.Network.Ethernets[LAN2].Nameservers.Addresses = []string{"8.8.8.8", "114.114.114.114"}\n    out, err := yaml.Marshal(netConfig)\n    if err != nil {\n       fmt.Println(err.Error())\n    }\n    fmt.Println(string(out))\n    err = SaveNetPlanConfig(out, "ethernets.yaml")\n    if err != nil {\n       fmt.Println(err.Error())\n    }\n    err = ApplyNetPlanConfig()\n    if err != nil {\n       fmt.Println(err.Error())\n    }\n    config, err := ReadNetPlanConfig("ethernets.yaml")\n    if err != nil {\n       fmt.Println(err.Error())\n       return\n    }\n    fmt.Println(config.Network.Ethernets[LAN1].DHCP4)\n    config.Network.Ethernets[LAN1].DHCP4 = false\n    config.Network.Ethernets[LAN1].Addresses = []string{"192.168.1.10/24"}\n    config.Network.Ethernets[LAN1].Gateway4 = "192.168.1.1"\n    config.Network.Ethernets[LAN1].Nameservers.Addresses = []string{"8.8.8.8", "114.114.114.114"}\n    out, err = yaml.Marshal(config)\n    err = SaveNetPlanConfig(out, "ethernets.yaml")\n    if err != nil {\n       fmt.Println(err.Error())\n       return\n    }\n    fmt.Println(GetNetmask())\n    fmt.Println(GetMacAddress())\n    fmt.Println(GetIpAddress())\n    fmt.Println(GetGateway())\n    networkConfig, err := GetNetworkConfig("ethernets.yaml")\n    if err != nil {\n       fmt.Println(err.Error())\n       return\n    }\n    fmt.Println(networkConfig.Dns)\n    fmt.Println(networkConfig.Gateway)\n    fmt.Println(networkConfig.Address)\n    fmt.Println(networkConfig.MacAddress)\n}\n\n\n运行结果\n\nnetwork:\n    version: 2\n    renderer: NetworkManager\n    ethernets:\n        eth0:\n            dhcp4: true\n            macaddress: 22:03:xz:2f:a2:1a\n        eth1:\n            dhcp4: false\n            addresses:\n                - 100.100.1.10/24\n            gateway4: 100.100.1.1\n            nameservers:\n                addresses:\n                    - 8.8.8.8\n                    - 114.114.114.114\n            macaddress: 22:03:xz:2f:a2:1a\n\n网关在 windows 操作系统上不支持该操作\ntrue\n 网关在 windows 操作系统上不支持该操作\n 网关在 windows 操作系统上不支持该操作\n 网关在 windows 操作系统上不支持该操作\n 网关在 windows 操作系统上不支持该操作\n8.8.8.8,114.114.114.114\n192.168.1.1\n192.168.1.10/24\n22:03:xz:2f:a2:1a\n\n\n处理器架构分为amd64和arm64，所以，Go打包也有点差异\n\n我们可以通过 arch命令查看处理器架构架构\n\n我调试过的网关设备有 armv7l aarch64 x86_64这几种\n\narmv7l\n\nset GOARCH=arm\ngo env -w GOARCH=arm\nset GOARM=7\ngo env -w GOARM=7\nset GOOS=linux\ngo env -w GOOS=linux\ngo build -o xxx .\n\n\naarch64\n\nset GOARCH=arm\ngo env -w GOARCH=arm\nset GOARM=8\ngo env -w GOARM=8\nset GOOS=linux\ngo env -w GOOS=linux\ngo build -o xxx .\n\n\nx86_64\n\nset GOARCH=amd64\ngo env -w GOARCH=amd64\nset GOOS=linux\ngo env -w GOOS=linux\ngo build -o xxx .\n\n\n当然，我们也可以手动修改网络配置\n\nsudo vi /etc/netplan/01-network-manager-all.yaml\n\n\nnetwork:\n    version: 2\n    renderer: NetworkManager\n    ethernets:\n        eth0:\n            dhcp4: true\n            macaddress: 22:03:xz:2f:a2:1a\n        eth1:\n            dhcp4: false\n            addresses:\n                - 100.100.1.10/24\n            gateway4: 100.100.1.1\n            nameservers:\n                addresses:\n                    - 8.8.8.8\n                    - 114.114.114.114\n            macaddress: 22:03:xz:2f:a2:1a\n\n\n# 应用配置\nsudo netplan apply\n# 重启网络\nsudo systemctl restart NetworkManager\n\n\n如果出现这种 sudo: unable to resolve host xxx: Name or service not known 问题\n\n请重新配置hosts\n\nvi /etc/hosts\n\n\nhosts\n\n127.0.0.1 localhost\n127.0.0.1 xxx\n\n\n有些设备的处理器版本比较老，我们不能通过配置文件去修改怎么办?\n\n以armv7l【32位】为例，我们只能通过命令的方式去修改，使用Go 执行命令来修改配置\n\n静态配置IP\n\n# IP地址： 192.168.1.18/24\n# 网关：192.168.1.1\n# DNS：8.8.8.8\nnmcli connection delete "eth0 static"\nnmcli connection add con-name "eth0 static" ifname eth0 type ethernet\nnmcli connection modify "eth0 static" ipv4.method manual ipv4.addresses 192.168.1.18/24 ipv4.gateway 192.168.1.1 ipv4.dns 8.8.8.8\nnmcli connection up "eth0 static"\nnmcli connection delete "eth0 dhcp"\n\n\n动态获取IP\n\nnmcli connection delete "eth0 dhcp"\nnmcli connection add con-name "eth0 dhcp" ifname eth0 type ethernet\nnmcli connection modify "eth0 dhcp" ipv4.method auto\nnmcli connection up "eth0 dhcp"\nnmcli connection delete "eth0 static"\n\n\n我是老寇，我们下次再见啦！',normalizedContent:'你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n跟我一起学习网络配置\n\n由于工作原因，需要熟悉网关设备的网络配置，因此整理一下，便于查阅。\n\n我还记得上大学的时候，老师教我们计算机网络的时候，我没有听讲却用来学习java。因此，对计算机网络不熟悉，这也间接导致在工作中遇到网络相关的问题束手无措，通过翻阅资料和同事交流才搞明白，我写的这个，对新手来说，应该有一定的借鉴意义。\n\n“往者不可谏来者犹可追”。这句话出自《论语》，意思是 过去的事情已无法劝谏挽回。未来的事情还能够来得及追改 很多事情都是需要自己亲身经历的，也是无法逃避的，这可能就是命中注定的宿命吧！所以，与其逃避不如坦然面对，直面自己的惨淡人生，活出属于自己的精彩！\n\n在科技高速发展的今天，几乎每个人都用上了智能手机，智能手机只要是上网，就需要用到 网络\n\n\n# 一、常见网络配置名词\n\n# 1.ip地址\n\nip地址就像你家在互联网上的“门牌号”，有了它，数据才能准确找到你的设备并传输信息。\n\n常见形式\n\n * ipv4：四组数字，如 192.168.1.1（总量有限，类似电话号码不够用）。\n * ipv6：更长，如 2001:0db8:85a3::8a2e:0370:7334（解决数量不足问题，未来主流）。\n\n# 2.网关\n\n网关就像你家的“大门”，所有设备想连接外部互联网（如刷视频、看网页），都必须先经过它才能出入。\n\n网关能把你家所有设备的“内部ip”（如 192.168.1.18）统一转换成一个对外的“公网ip”，保护隐私且节省地址。\n\n# 3.子网掩码\n\n子网掩码像一把“尺子”，用来量出ip地址中哪部分是“小区名”（网络区域），哪部分是“门牌号”（具体设备），让路由器知道该在本地送货还是发往外省。\n\n举例 192.168.1.18/24\n\nip地址：192.168.1.18\n\n子网掩码：255.255.255.0\n\n子网掩码长度：24\n\n问题：子网掩码为什么是 255.255.255.0\n\n# 4.mac地址\n\nmac地址是设备网卡的“身份证号”（全球唯一且不可更改），用来在本地网络（如你家wi-fi）中精准识别每一台手机/电脑/打印机，实现“面对面”直连通信。\n\n\n# 二、动手实践\n\n我们一起使用代码的方式修改网络配置，工作中使用go开发，操作系统为ubuntu，所以用go和ubuntu来举例!\n\nubuntu网络配置路径为/etc/netplan/01-network-manager-all.yaml,不同的ubuntu版本可能名字有点差异，但是不影响配置使用\n\n我们一起学习一下网络配置的参数\n\n注意： 网关设备如果有两个lan口，可以配置两个【lan1和lan2】，对应网络接口名称为eth0和eth1\n\n注意： 以太网可以动态获取ip【dhcp】和静态配置ip【static】\n\n字段说明\n\n字段          说明\nversion     必须为 2（netplan 配置版本）\nrenderer    指定使用哪个后端，常见有 networkd 或 networkmanager\nethernets   配置物理网卡\nwifis       配置无线接口（需 networkmanager 支持）\n\nethernet 参数配置示例\n\n参数                      类型     示例                   说明\ndhcp4                   bool   true / false         是否启用 ipv4 dhcp\ndhcp6                   bool   true / false         是否启用 ipv6 dhcp\naddresses               列表     [192.168.1.100/24]   分配静态 ip 地址和子网掩码\ngateway4                字符串    192.168.1.1          ipv4 默认网关\ngateway6                字符串    fe80::1              ipv6 默认网关\nnameservers.addresses   列表     [8.8.8.8, 1.1.1.1]   dns 服务器列表\nnameservers.search      列表     [example.com]        dns 搜索域列表\noptional                bool   true                 设置为可选（不影响系统启动）\nmacaddress              字符串    aa:bb:cc:dd:ee:ff    指定网卡的 mac 地址\nmtu                     整数     1500                 设置 mtu 值\nroutes.to               列表     10.0.0.0/8           目标网段\nroutes.via              列表     192.168.1.1          下一跳地址（gateway），数据包将被发送到这个网关去转发\nroutes.metric           列表     100                  路由优先级，数字越小优先级越高。多个匹配路径中会优先使用 metric 较低的\n\nwifi 参数配置示例\n\n参数                              类型        示例                           说明\ndhcp4                           boolean   true / false                 是否启用 ipv4 的 dhcp\ndhcp6                           boolean   true / false                 是否启用 ipv6 的 dhcp\noptional                        boolean   true                         将接口标记为“非关键”，启动时不阻塞\naddresses                       list      [192.168.1.100/24]           分配静态 ip 地址\ngateway4                        string    192.168.1.1                  设置 ipv4 默认网关\ngateway6                        string    fe80::1                      设置 ipv6 默认网关\nnameservers.addresses           list      [8.8.8.8, 1.1.1.1]           设置 dns 服务器\nmacaddress                      string    aa:bb:cc:dd:ee:ff            设置 mac 地址（mac spoofing）\nroutes.to                       列表        10.0.0.0/8                   目标网段\nroutes.via                      列表        192.168.1.1                  下一跳地址（gateway），数据包将被发送到这个网关去转发\nroutes.metric                   列表        100                          路由优先级，数字越小优先级越高。多个匹配路径中会优先使用 metric 较低的\naccess-points.<ssid>.password   string    "12345678"                   wi-fi 密码，支持 wpa/wpa2\naccess-points.<ssid>.mode       string    "infrastructure" / "adhoc"   连接模式（基础设施或点对点）\naccess-points.<ssid>.bssid      string    aa:bb:cc:dd:ee:ff            连接特定 ap 的 mac 地址（仅在多 ap 场景用）\naccess-points.<ssid>.band       string    "2.4ghz" / "5ghz"            频段（可选）\naccess-points.<ssid>.channel    int       6                            频道（仅用于 ad-hoc）\naccess-points.<ssid>.hidden     boolean   true                         ssid 是否为隐藏 wi-fi\n\nnet.go\n\npackage main\n\nimport (\n    "errors"\n    "os"\n    "os/exec"\n    "runtime"\n    "strings"\n\n    "gopkg.in/yaml.v3"\n)\n\nconst (\n    // 默认网络配置文件路径\n    default_netplan_config_path = "/etc/netplan/01-network-manager-all.yaml"\n    // lan1 网口1\n    lan1 = "eth0"\n    // lan2 网口2\n    lan2 = "eth1"\n)\n\ntype networkconfig struct {\n    address    string `json:"address"`\n    gateway    string `json:"gateway"`\n    dns        string `json:"dns"`\n    macaddress string `json:"macaddress"`\n}\n\ntype netplanconfig struct {\n    network struct {\n       // version 必须为 2，表示 netplan 配置的版本\n       version int8 `yaml:"version,omitempty"`\n       // renderer 指定使用哪个后端，常见有 networkd 或 networkmanager\n       // networkmanager 适用于桌面环境\n       // networkd 适用于服务器环境\n       renderer string `yaml:"renderer,omitempty"`\n       // ethernets 是一个 map，键为网卡名称，值为 ethernet 配置\n       // 例如：`"eth0": { ... }`\n       // 这里的网卡名称可以是物理网卡名或虚拟网卡名\n       // 例如：`"eth0"`、`"eth1"`、`"wlan0"` 等\n       ethernets map[string]*ethernet `yaml:"ethernets,omitempty"`\n       // 如果需要配置无线网卡，请使用 `wifis` 字段\n       wifis map[string]*wifi `yaml:"wifis,omitempty"`\n    } `yaml:"network,omitempty"`\n}\n\n// wifi 无线网络接口配置结构体【wi-fi】\ntype wifi struct {\n    // dhcp4 和 dhcp6 分别表示是否启用 ipv4 和 ipv6 的 dhcp\n    dhcp4 bool `yaml:"dhcp4"`\n    dhcp6 bool `yaml:"dhcp6,omitempty"`\n    // optional 表示该接口是否为可选的，设置为 true 时启动时\n    optional bool `yaml:"optional,omitempty"`\n    // address 配置 ip 地址\n    addresses []string `yaml:"addresses,omitempty"`\n    // gateway4 和 gateway6 分别表示 ipv4 和 ipv6 的默认网关\n    gateway4 string `yaml:"gateway4,omitempty"`\n    gateway6 string `yaml:"gateway6,omitempty"`\n    // nameservers 包含 dns 服务器地址\n    nameservers struct {\n       // addresses 是 dns 服务器地址列表\n       addresses []string `yaml:"addresses,omitempty"`\n    } `yaml:"nameservers,omitempty"`\n    // macaddress 是网卡的 mac 地址\n    macaddress string `yaml:"macaddress,omitempty"`\n    // routes 是一个路由列表，每个路由包含目标地址、网关和优先级\n    routes route `yaml:"routes,omitempty"`\n    // accesspoints 是一个 map，键为 ssid，值为 accesspoint 配置\n    accesspoints map[string]accesspoint `yaml:"access-points,omitempty"`\n}\n\n// ethernet 网卡结构体【以太网】\ntype ethernet struct {\n    // dhcp4 和 dhcp6 分别表示是否启用 ipv4 和 ipv6 的 dhcp\n    dhcp4 bool `yaml:"dhcp4"`\n    dhcp6 bool `yaml:"dhcp6,omitempty"`\n    // addresses 是一个字符串数组，表示分配的静态 ip 地址和子网掩码\n    addresses []string `yaml:"addresses,omitempty"`\n    // gateway4 和 gateway6 分别表示 ipv4 和 ipv6 的默认网关\n    gateway4 string `yaml:"gateway4,omitempty"`\n    gateway6 string `yaml:"gateway6,omitempty"`\n    // nameservers 包含 dns 服务器地址和搜索域\n    nameservers struct {\n       // addresses 是 dns 服务器地址列表\n       addresses []string `yaml:"addresses,omitempty"`\n       // search 是 dns 搜索域列表\n       search []string `yaml:"search,omitempty"`\n    } `yaml:"nameservers,omitempty"`\n    // routes 是一个路由列表，每个路由包含目标地址、网关和优先级\n    routes route `yaml:"routes,omitempty"`\n    // optional 表示该接口是否为可选的，设置为 true 时启动时不会阻塞\n    optional bool `yaml:"optional,omitempty"`\n    // macaddress 是网卡的 mac 地址\n    macaddress string `yaml:"macaddress,omitempty"`\n    // mtu 是网卡的 mtu\n    mtu int `yaml:"mtu,omitempty"`\n}\n\n// route 路由\ntype route struct {\n    // to 是目标地址或网段\n    to string `yaml:"to,omitempty"`\n    // via 是路由的网关地址\n    via string `yaml:"via,omitempty"`\n    // metric 是路由的优先级，数字越小优先级越高\n    metric int `yaml:"metric,omitempty"`\n}\n\n// accesspoint 无线接入点配置结构体\ntype accesspoint struct {\n    // mode 是连接模式，可能的值有 "infrastructure"（基础设施模式）或 "adhoc"（点对点模式）\n    mode string `yaml:"mode,omitempty"`\n    // password 是 wi-fi 密码，支持 wpa/wpa2\n    password string `yaml:"password,omitempty"`\n    // bssid 是接入点的 mac 地址，通常用于连接特定的 ap\n    bssid string `yaml:"bssid,omitempty"`\n    // band 是无线频段，可能的值有 "2.4ghz" 或 "5ghz"\n    band string `yaml:"band,omitempty"`\n    // channel 是无线频道，通常用于 ad-hoc 模式\n    channel int `yaml:"channel,omitempty"`\n    // hidden 是是否隐藏 ssid，通常用于 ad-hoc 模式\n    hidden bool `yaml:"hidden,omitempty"`\n}\n\nfunc newdefaultnetplanconfig() *netplanconfig {\n    netconfig := &netplanconfig{}\n    netconfig.network.version = 2\n    netconfig.network.renderer = "networkmanager"\n    // 两个网口\n    netconfig.network.ethernets = make(map[string]*ethernet, 2)\n    netconfig.network.ethernets[lan1] = &ethernet{}\n    netconfig.network.ethernets[lan2] = &ethernet{}\n    return netconfig\n}\n\nfunc savenetplanconfig(buf []byte, path string) error {\n    err := os.writefile(path, buf, 0644)\n    if err != nil {\n       return errors.new("写入网络配置文件失败，错误信息：" + err.error())\n    }\n    return nil\n}\n\nfunc applynetplanconfig() error {\n    err := validateos()\n    if err != nil {\n       return err\n    }\n    err = exec.command("netplan", "apply").run()\n    if err != nil {\n       return errors.new("应用网络配置失败，错误信息：" + err.error())\n    }\n    return nil\n}\n\nfunc readnetplanconfig(path string) (*netplanconfig, error) {\n    data, err := os.readfile(path)\n    if err != nil {\n       return nil, errors.new("读取网络配置文件失败，错误信息：" + err.error())\n    }\n    netconfig := &netplanconfig{}\n    err = yaml.unmarshal(data, netconfig)\n    if err != nil {\n       return nil, errors.new("网络配置反序列化失败，错误信息：" + err.error())\n    }\n    return netconfig, nil\n}\n\nfunc getmacaddress() (string, error) {\n    err := validateos()\n    if err != nil {\n       return "", err\n    }\n    output, err := exec.command("sh", "-c", `ip link show eth0 | awk \'/ether/ {print $2}\'`).output()\n    if err != nil {\n       return "", errors.new("获取mac地址失败，错误信息：" + err.error())\n    }\n    return strings.trimspace(string(output)), nil\n}\n\nfunc getipaddress() (string, error) {\n    err := validateos()\n    if err != nil {\n       return "", err\n    }\n    output, err := exec.command("sh", "-c", `ip addr show eth0 | grep "inet " | awk \'{print $2}\' | cut -d\'/\' -f1`).output()\n    if err != nil {\n       return "", errors.new("获取ip地址失败，错误信息：" + err.error())\n    }\n    return strings.trimspace(string(output)), nil\n}\n\nfunc getgateway() (string, error) {\n    err := validateos()\n    if err != nil {\n       return "", err\n    }\n    output, err := exec.command("sh", "-c", `ip route | grep default | grep eth0 | awk \'{print $3}\'`).output()\n    if err != nil {\n       return "", errors.new("获取网关失败，错误信息：" + err.error())\n    }\n    return strings.trimspace(string(output)), nil\n}\n\nfunc getnetmask() (string, error) {\n    err := validateos()\n    if err != nil {\n       return "", err\n    }\n    output, err := exec.command("sh", "-c", `ip addr show eth0 | grep "inet " | awk \'{print $2}\' | cut -d\'/\' -f2`).output()\n    if err != nil {\n       return "", errors.new("获取子网掩码长度失败，错误信息：" + err.error())\n    }\n    return strings.trimspace(string(output)), nil\n}\n\nfunc getnetworkconfig(path string) (*networkconfig, error) {\n    config, err := getnetplanconfig(path)\n    if err != nil {\n       return nil, err\n    }\n    ethernet := config.network.ethernets[lan1]\n    return &networkconfig{\n       address:    ethernet.addresses[0],\n       gateway:    ethernet.gateway4,\n       dns:        strings.join(ethernet.nameservers.addresses, ","),\n       macaddress: ethernet.macaddress,\n    }, nil\n}\n\nfunc getnetplanconfig(path string) (*netplanconfig, error) {\n    data, err := os.readfile(path)\n    if err != nil {\n       return nil, errors.new("获取网络配置失败，错误信息：" + err.error())\n    }\n    netconfig := &netplanconfig{}\n    err = yaml.unmarshal(data, netconfig)\n    return netconfig, nil\n}\n\nfunc validateos() error {\n    if runtime.goos != "linux" {\n       return errors.new("网关在 " + runtime.goos + " 操作系统上不支持该操作")\n    }\n    return nil\n}\n\n\nnet_test.go\n\npackage main\n\nimport (\n    "fmt"\n    "gopkg.in/yaml.v3"\n    "testing"\n)\n\nfunc testnetplanconfig(t *testing.t) {\n    netconfig := newdefaultnetplanconfig()\n    netconfig.network.ethernets[lan1].dhcp4 = true\n    netconfig.network.ethernets[lan1].macaddress = "22:03:xz:2f:a2:1a"\n    netconfig.network.ethernets[lan2].dhcp4 = false\n    netconfig.network.ethernets[lan2].macaddress = "22:03:xz:2f:a2:1a"\n    netconfig.network.ethernets[lan2].addresses = []string{"100.100.1.10/24"}\n    netconfig.network.ethernets[lan2].gateway4 = "100.100.1.1"\n    netconfig.network.ethernets[lan2].nameservers.addresses = []string{"8.8.8.8", "114.114.114.114"}\n    out, err := yaml.marshal(netconfig)\n    if err != nil {\n       fmt.println(err.error())\n    }\n    fmt.println(string(out))\n    err = savenetplanconfig(out, "ethernets.yaml")\n    if err != nil {\n       fmt.println(err.error())\n    }\n    err = applynetplanconfig()\n    if err != nil {\n       fmt.println(err.error())\n    }\n    config, err := readnetplanconfig("ethernets.yaml")\n    if err != nil {\n       fmt.println(err.error())\n       return\n    }\n    fmt.println(config.network.ethernets[lan1].dhcp4)\n    config.network.ethernets[lan1].dhcp4 = false\n    config.network.ethernets[lan1].addresses = []string{"192.168.1.10/24"}\n    config.network.ethernets[lan1].gateway4 = "192.168.1.1"\n    config.network.ethernets[lan1].nameservers.addresses = []string{"8.8.8.8", "114.114.114.114"}\n    out, err = yaml.marshal(config)\n    err = savenetplanconfig(out, "ethernets.yaml")\n    if err != nil {\n       fmt.println(err.error())\n       return\n    }\n    fmt.println(getnetmask())\n    fmt.println(getmacaddress())\n    fmt.println(getipaddress())\n    fmt.println(getgateway())\n    networkconfig, err := getnetworkconfig("ethernets.yaml")\n    if err != nil {\n       fmt.println(err.error())\n       return\n    }\n    fmt.println(networkconfig.dns)\n    fmt.println(networkconfig.gateway)\n    fmt.println(networkconfig.address)\n    fmt.println(networkconfig.macaddress)\n}\n\n\n运行结果\n\nnetwork:\n    version: 2\n    renderer: networkmanager\n    ethernets:\n        eth0:\n            dhcp4: true\n            macaddress: 22:03:xz:2f:a2:1a\n        eth1:\n            dhcp4: false\n            addresses:\n                - 100.100.1.10/24\n            gateway4: 100.100.1.1\n            nameservers:\n                addresses:\n                    - 8.8.8.8\n                    - 114.114.114.114\n            macaddress: 22:03:xz:2f:a2:1a\n\n网关在 windows 操作系统上不支持该操作\ntrue\n 网关在 windows 操作系统上不支持该操作\n 网关在 windows 操作系统上不支持该操作\n 网关在 windows 操作系统上不支持该操作\n 网关在 windows 操作系统上不支持该操作\n8.8.8.8,114.114.114.114\n192.168.1.1\n192.168.1.10/24\n22:03:xz:2f:a2:1a\n\n\n处理器架构分为amd64和arm64，所以，go打包也有点差异\n\n我们可以通过 arch命令查看处理器架构架构\n\n我调试过的网关设备有 armv7l aarch64 x86_64这几种\n\narmv7l\n\nset goarch=arm\ngo env -w goarch=arm\nset goarm=7\ngo env -w goarm=7\nset goos=linux\ngo env -w goos=linux\ngo build -o xxx .\n\n\naarch64\n\nset goarch=arm\ngo env -w goarch=arm\nset goarm=8\ngo env -w goarm=8\nset goos=linux\ngo env -w goos=linux\ngo build -o xxx .\n\n\nx86_64\n\nset goarch=amd64\ngo env -w goarch=amd64\nset goos=linux\ngo env -w goos=linux\ngo build -o xxx .\n\n\n当然，我们也可以手动修改网络配置\n\nsudo vi /etc/netplan/01-network-manager-all.yaml\n\n\nnetwork:\n    version: 2\n    renderer: networkmanager\n    ethernets:\n        eth0:\n            dhcp4: true\n            macaddress: 22:03:xz:2f:a2:1a\n        eth1:\n            dhcp4: false\n            addresses:\n                - 100.100.1.10/24\n            gateway4: 100.100.1.1\n            nameservers:\n                addresses:\n                    - 8.8.8.8\n                    - 114.114.114.114\n            macaddress: 22:03:xz:2f:a2:1a\n\n\n# 应用配置\nsudo netplan apply\n# 重启网络\nsudo systemctl restart networkmanager\n\n\n如果出现这种 sudo: unable to resolve host xxx: name or service not known 问题\n\n请重新配置hosts\n\nvi /etc/hosts\n\n\nhosts\n\n127.0.0.1 localhost\n127.0.0.1 xxx\n\n\n有些设备的处理器版本比较老，我们不能通过配置文件去修改怎么办?\n\n以armv7l【32位】为例，我们只能通过命令的方式去修改，使用go 执行命令来修改配置\n\n静态配置ip\n\n# ip地址： 192.168.1.18/24\n# 网关：192.168.1.1\n# dns：8.8.8.8\nnmcli connection delete "eth0 static"\nnmcli connection add con-name "eth0 static" ifname eth0 type ethernet\nnmcli connection modify "eth0 static" ipv4.method manual ipv4.addresses 192.168.1.18/24 ipv4.gateway 192.168.1.1 ipv4.dns 8.8.8.8\nnmcli connection up "eth0 static"\nnmcli connection delete "eth0 dhcp"\n\n\n动态获取ip\n\nnmcli connection delete "eth0 dhcp"\nnmcli connection add con-name "eth0 dhcp" ifname eth0 type ethernet\nnmcli connection modify "eth0 dhcp" ipv4.method auto\nnmcli connection up "eth0 dhcp"\nnmcli connection delete "eth0 static"\n\n\n我是老寇，我们下次再见啦！',charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"IntelliJ IDEA插件推荐",frontmatter:{title:"IntelliJ IDEA插件推荐",date:"2025-05-23T12:45:10.000Z",permalink:"/pages/a438ae/"},regularPath:"/01.%E6%8C%87%E5%8D%97/09.%E6%8E%A8%E8%8D%90/00.IntelliJ%20IDEA%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90.html",relativePath:"01.指南/09.推荐/00.IntelliJ IDEA插件推荐.md",key:"v-a1c8b71e",path:"/pages/a438ae/",headers:[{level:5,title:"1. Show Comment",slug:"_1-show-comment",normalizedTitle:"1. show comment",charIndex:81}],headersStr:"1. Show Comment",content:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n在这里，我将为你推荐一些非常实用的 IntelliJ IDEA 插件，帮助你提升开发效率和代码质量。\n\n# 1. Show Comment\n\n * 功能：在代码中显示注释，帮助你更好地理解代码逻辑。",normalizedContent:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n在这里，我将为你推荐一些非常实用的 intellij idea 插件，帮助你提升开发效率和代码质量。\n\n# 1. show comment\n\n * 功能：在代码中显示注释，帮助你更好地理解代码逻辑。",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"KCloud-Platform-IoT 开源三周年快乐&父亲节快乐",frontmatter:{title:"KCloud-Platform-IoT 开源三周年快乐&父亲节快乐",date:"2025-06-15T22:02:10.000Z",permalink:"/pages/a438ap/"},regularPath:"/01.%E6%8C%87%E5%8D%97/10.%E6%B4%BB%E5%8A%A8/00.KCloud-Platform-IoT%20%E5%BC%80%E6%BA%90%E4%B8%89%E5%91%A8%E5%B9%B4%E5%BF%AB%E4%B9%90&%E7%88%B6%E4%BA%B2%E8%8A%82%E5%BF%AB%E4%B9%90.html",relativePath:"01.指南/10.活动/00.KCloud-Platform-IoT 开源三周年快乐&父亲节快乐.md",key:"v-7b392dc2",path:"/pages/a438ap/",headers:[{level:2,title:"📌KCloud-Platform-IoT 开源三周年【千帆过尽 初心如磐】",slug:"📌kcloud-platform-iot-开源三周年【千帆过尽-初心如磐】",normalizedTitle:"📌kcloud-platform-iot 开源三周年【千帆过尽 初心如磐】",charIndex:30},{level:3,title:"🌟 我的成长",slug:"🌟-我的成长",normalizedTitle:"🌟 我的成长",charIndex:253},{level:4,title:"🌱 我的技术蜕变，从深耕后端到拥抱全栈",slug:"🌱-我的技术蜕变-从深耕后端到拥抱全栈",normalizedTitle:"🌱 我的技术蜕变，从深耕后端到拥抱全栈",charIndex:264},{level:4,title:"🌐 我的职责转变，从软件开发到架构设计",slug:"🌐-我的职责转变-从软件开发到架构设计",normalizedTitle:"🌐 我的职责转变，从软件开发到架构设计",charIndex:321},{level:4,title:"🚀 我的思维转变，从写好代码到产品体验",slug:"🚀-我的思维转变-从写好代码到产品体验",normalizedTitle:"🚀 我的思维转变，从写好代码到产品体验",charIndex:359},{level:3,title:"🎉 畅想未来",slug:"🎉-畅想未来",normalizedTitle:"🎉 畅想未来",charIndex:414},{level:3,title:"😋 开源致谢",slug:"😋-开源致谢",normalizedTitle:"😋 开源致谢",charIndex:492},{level:4,title:"下一个三年，让我们继续在比特洪流中，做彼此的火炬。",slug:"下一个三年-让我们继续在比特洪流中-做彼此的火炬。",normalizedTitle:"下一个三年，让我们继续在比特洪流中，做彼此的火炬。",charIndex:688},{level:4,title:"代码不老，山海可期！",slug:"代码不老-山海可期",normalizedTitle:"代码不老，山海可期！",charIndex:717}],headersStr:"📌KCloud-Platform-IoT 开源三周年【千帆过尽 初心如磐】 🌟 我的成长 🌱 我的技术蜕变，从深耕后端到拥抱全栈 🌐 我的职责转变，从软件开发到架构设计 🚀 我的思维转变，从写好代码到产品体验 🎉 畅想未来 😋 开源致谢 下一个三年，让我们继续在比特洪流中，做彼此的火炬。 代码不老，山海可期！",content:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n\n# 📌KCloud-Platform-IoT 开源三周年【千帆过尽 初心如磐】\n\n时间：2022.06.15 - 2025.06.15\n\n作者：KouShenhai\n\n三年前，我将一行行代码推向 GitHub，开启了 KCloud-Platform-IoT 的开源旅程。今天，站在 540+ Stars、130+ Forks、10+ Contributors的数字背后，我看到的不只是一个项目的演进，更是一场关于技术信仰与社区力量的修行。\n\n\n# 🌟 我的成长\n\n# 🌱 我的技术蜕变，从深耕后端到拥抱全栈\n\nJava/Go/Vue/React/uniapp/Python\n\n# 🌐 我的职责转变，从软件开发到架构设计\n\n反正就我一人，我不搞谁搞\n\n# 🚀 我的思维转变，从写好代码到产品体验\n\n开发软件就是为了解决问题，解决不了用户的问题就是垃圾软件\n\n\n# 🎉 畅想未来\n\n“开源不是慈善，而是高级的技术协作。” —— 这三年教会我的事\n\n“千帆过尽，初心如磐。做大做强，再创辉煌。” —— 不变的信仰\n\n\n# 😋 开源致谢\n\n感谢每一份 Star的鼓励、每一次 Issue 的鞭策、每一行 PR 的信任。特别致敬早期贡献者 @liang99、@livk-cloud、@liukefu2050、@HalfPomelo、@lixin、@simman、@suhengli、@gitkakafu、@LeiZhiMin1、@FlySkyBear —— 你们在项目零文档时期的坚持，是开源精神最美的注脚。\n\n# 下一个三年，让我们继续在比特洪流中，做彼此的火炬。\n\n# 代码不老，山海可期！",normalizedContent:"你好呀，我的老朋友！我是老寇，欢迎来到老寇云平台！\n\n\n# 📌kcloud-platform-iot 开源三周年【千帆过尽 初心如磐】\n\n时间：2022.06.15 - 2025.06.15\n\n作者：koushenhai\n\n三年前，我将一行行代码推向 github，开启了 kcloud-platform-iot 的开源旅程。今天，站在 540+ stars、130+ forks、10+ contributors的数字背后，我看到的不只是一个项目的演进，更是一场关于技术信仰与社区力量的修行。\n\n\n# 🌟 我的成长\n\n# 🌱 我的技术蜕变，从深耕后端到拥抱全栈\n\njava/go/vue/react/uniapp/python\n\n# 🌐 我的职责转变，从软件开发到架构设计\n\n反正就我一人，我不搞谁搞\n\n# 🚀 我的思维转变，从写好代码到产品体验\n\n开发软件就是为了解决问题，解决不了用户的问题就是垃圾软件\n\n\n# 🎉 畅想未来\n\n“开源不是慈善，而是高级的技术协作。” —— 这三年教会我的事\n\n“千帆过尽，初心如磐。做大做强，再创辉煌。” —— 不变的信仰\n\n\n# 😋 开源致谢\n\n感谢每一份 star的鼓励、每一次 issue 的鞭策、每一行 pr 的信任。特别致敬早期贡献者 @liang99、@livk-cloud、@liukefu2050、@halfpomelo、@lixin、@simman、@suhengli、@gitkakafu、@leizhimin1、@flyskybear —— 你们在项目零文档时期的坚持，是开源精神最美的注脚。\n\n# 下一个三年，让我们继续在比特洪流中，做彼此的火炬。\n\n# 代码不老，山海可期！",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"支持这个项目",frontmatter:{title:"支持这个项目",date:"2023-09-26T18:24:57.000Z",permalink:"/pages/1b12ed",sidebar:!1,article:!1},regularPath:"/02.%E8%B5%9E%E5%8A%A9/00.%E8%B5%9E%E5%8A%A9.html",relativePath:"02.赞助/00.赞助.md",key:"v-36503df2",path:"/pages/1b12ed/",headers:[{level:2,title:"致谢",slug:"致谢",normalizedTitle:"致谢",charIndex:122},{level:2,title:"名单",slug:"名单",normalizedTitle:"名单",charIndex:155}],headersStr:"致谢 名单",content:"如果您正在使用这个项目并感觉良好，或者是想支持我继续开发，您可以通过如下任意方式支持我：\n\n 1. Star并分享 KCloud-Platform-IoT 🚀\n 2. 通过以下二维码 一次性捐款，打赏作者一杯茶。🍵\n\n谢谢！ ❤️\n\n\n# 致谢\n\n感谢给予支持的朋友，您的支持是我前进的动力 🎉\n\n\n# 名单\n\n时间           网名      赞助        备注\n2025/06/11   路*      ￥20.00    感谢开源~\n2025/01/25   擎*      ￥20.00    请喝咖啡\n2024/12/08   t*      ￥199.00   无\n2024/12/02   'c*     ￥399.00   无\n2024/11/25   tio*    ￥520.00   希望KCloud飞起，实现专精特新!\n2024/08/01   *ckai   ￥88.00    加油~\n2024/04/19   *保熟     ￥188.00   越做越好\n2024/03/20   A细节*    ￥66.00    无\n2024/03/03   y*i     ￥58.88    无\n2024/01/30   *阳      ￥10       无\n2023/12/22   *民      服务器       无\n2023/12/08   *来      ￥10       希望越来越好，一直坚持下去\n2023/12/08   *迪      ￥20       越来越好，继续干下去\n2023/10/07   何*      ￥399      作者说：感谢支持\n2023/08/27   *界      ￥10       希望越来越好\n2023/06/29   顺       ￥20       希望项目一直做下去就好\n2023/03/27   s*e     ￥10       无",normalizedContent:"如果您正在使用这个项目并感觉良好，或者是想支持我继续开发，您可以通过如下任意方式支持我：\n\n 1. star并分享 kcloud-platform-iot 🚀\n 2. 通过以下二维码 一次性捐款，打赏作者一杯茶。🍵\n\n谢谢！ ❤️\n\n\n# 致谢\n\n感谢给予支持的朋友，您的支持是我前进的动力 🎉\n\n\n# 名单\n\n时间           网名      赞助        备注\n2025/06/11   路*      ￥20.00    感谢开源~\n2025/01/25   擎*      ￥20.00    请喝咖啡\n2024/12/08   t*      ￥199.00   无\n2024/12/02   'c*     ￥399.00   无\n2024/11/25   tio*    ￥520.00   希望kcloud飞起，实现专精特新!\n2024/08/01   *ckai   ￥88.00    加油~\n2024/04/19   *保熟     ￥188.00   越做越好\n2024/03/20   a细节*    ￥66.00    无\n2024/03/03   y*i     ￥58.88    无\n2024/01/30   *阳      ￥10       无\n2023/12/22   *民      服务器       无\n2023/12/08   *来      ￥10       希望越来越好，一直坚持下去\n2023/12/08   *迪      ￥20       越来越好，继续干下去\n2023/10/07   何*      ￥399      作者说：感谢支持\n2023/08/27   *界      ￥10       希望越来越好\n2023/06/29   顺       ￥20       希望项目一直做下去就好\n2023/03/27   s*e     ￥10       无",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"读《强者，都是含泪奔跑的人》读后感",frontmatter:{title:"读《强者，都是含泪奔跑的人》读后感",date:"2024-02-20T18:17:14.000Z",permalink:"/pages/623577/"},regularPath:"/03.%E6%84%9F%E6%82%9F/01.%E8%AF%BB%E5%90%8E%E6%84%9F/00.%E8%AF%BB%E3%80%8A%E5%BC%BA%E8%80%85%EF%BC%8C%E9%83%BD%E6%98%AF%E5%90%AB%E6%B3%AA%E5%A5%94%E8%B7%91%E7%9A%84%E4%BA%BA%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F.html",relativePath:"03.感悟/01.读后感/00.读《强者，都是含泪奔跑的人》读后感.md",key:"v-18bfd9b1",path:"/pages/623577/",headersStr:null,content:"  你好，老朋友，我是老寇\n\n  首先，在我们成长道路上，令人遗憾的事情太多太多，但老是缅怀过去的种种，只会让自己越来越胆怯！我曾经思考过人生的意义是什么？其实，人生本就没有什么意义，人最终的归宿也只是一堆黄土。但真的没有意义？积极向上，认真学习也是一天，消极怠慢，浑浑噩噩也是一天，这一切都是自己的选择。纵观古今中外，圣人大儒，无不是刻苦钻研，传道解惑。 这是一种多么伟大的壮举啊。我真的是打心底的佩服他们，为子孙后代留下了璀璨辉煌的文化，令后世之人收益匪浅。每当自己有疑惑时，会看看圣人说的话，圣人的教诲常常令我泪流满面。说到这里，就不得不提“知行合一，格物致知”，意思是 说和做要一起贯彻，探究事物原理，从而获得智慧。这就是不得不说Java学习过程中的问题啦！是什么问题呢？Java学习过程中，可能过分追求代码编写，只要跑起来即可，而忽略了基础知识和原理的学习，导致面试过程中屡屡碰壁或遇到问题无法下手。 那怎么做呢？能怎么做啊，肯定是查漏补缺，多看多想。其实在这过程中会遇到很多问题，就要多角度思考，找到问题的关键，而不是知难而退，总之死磕就对啦！坚持一段时间后，回过头来看一看，这真的是令人成就感爆棚啊！（刻苦修行，勇往直前）\n\n  其次，努力不一定成功，但放弃一定失败。做什么事情前，不要想后面成功了或失败了会发生什么？我们努力去做就行，其他的交给天意！（活在当下，享受当下）\n\n  最后，希望每个人做自己的英雄，不仅敢于挑战高山河流，还能为小树苗遮风挡雨！（路见不平拔刀助，挡我犯我必诛杀）\n\n我是老寇，我们下次再见啦！\n\n注：2024年12月19日，感到迷茫与疑惑，读这篇文章，心里充实多了",normalizedContent:"  你好，老朋友，我是老寇\n\n  首先，在我们成长道路上，令人遗憾的事情太多太多，但老是缅怀过去的种种，只会让自己越来越胆怯！我曾经思考过人生的意义是什么？其实，人生本就没有什么意义，人最终的归宿也只是一堆黄土。但真的没有意义？积极向上，认真学习也是一天，消极怠慢，浑浑噩噩也是一天，这一切都是自己的选择。纵观古今中外，圣人大儒，无不是刻苦钻研，传道解惑。 这是一种多么伟大的壮举啊。我真的是打心底的佩服他们，为子孙后代留下了璀璨辉煌的文化，令后世之人收益匪浅。每当自己有疑惑时，会看看圣人说的话，圣人的教诲常常令我泪流满面。说到这里，就不得不提“知行合一，格物致知”，意思是 说和做要一起贯彻，探究事物原理，从而获得智慧。这就是不得不说java学习过程中的问题啦！是什么问题呢？java学习过程中，可能过分追求代码编写，只要跑起来即可，而忽略了基础知识和原理的学习，导致面试过程中屡屡碰壁或遇到问题无法下手。 那怎么做呢？能怎么做啊，肯定是查漏补缺，多看多想。其实在这过程中会遇到很多问题，就要多角度思考，找到问题的关键，而不是知难而退，总之死磕就对啦！坚持一段时间后，回过头来看一看，这真的是令人成就感爆棚啊！（刻苦修行，勇往直前）\n\n  其次，努力不一定成功，但放弃一定失败。做什么事情前，不要想后面成功了或失败了会发生什么？我们努力去做就行，其他的交给天意！（活在当下，享受当下）\n\n  最后，希望每个人做自己的英雄，不仅敢于挑战高山河流，还能为小树苗遮风挡雨！（路见不平拔刀助，挡我犯我必诛杀）\n\n我是老寇，我们下次再见啦！\n\n注：2024年12月19日，感到迷茫与疑惑，读这篇文章，心里充实多了",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"修身/养生/情感",frontmatter:{title:"修身/养生/情感",date:"2024-03-05T12:00:00.000Z",permalink:"/pages/623578/"},regularPath:"/03.%E6%84%9F%E6%82%9F/02.%E4%BF%AE%E8%A1%8C/00.%E4%BF%AE%E8%BA%AB_%E5%85%BB%E7%94%9F_%E6%83%85%E6%84%9F.html",relativePath:"03.感悟/02.修行/00.修身_养生_情感.md",key:"v-3a2c0ee4",path:"/pages/623578/",headers:[{level:6,title:"修身（出来混迟早要还）",slug:"修身-出来混迟早要还",normalizedTitle:"修身（出来混迟早要还）",charIndex:77},{level:6,title:"养生（自己不爱惜自己身体，谁又会心疼你呢？）",slug:"养生-自己不爱惜自己身体-谁又会心疼你呢",normalizedTitle:"养生（自己不爱惜自己身体，谁又会心疼你呢？）",charIndex:537},{level:6,title:"分享（荣耀只是一时，平淡才是一世）",slug:"分享-荣耀只是一时-平淡才是一世",normalizedTitle:"分享（荣耀只是一时，平淡才是一世）",charIndex:743},{level:6,title:"该做的事情（往后的路靠自己走）",slug:"该做的事情-往后的路靠自己走",normalizedTitle:"该做的事情（往后的路靠自己走）",charIndex:960},{level:6,title:"感情",slug:"感情",normalizedTitle:"感情",charIndex:1638}],headersStr:"修身（出来混迟早要还） 养生（自己不爱惜自己身体，谁又会心疼你呢？） 分享（荣耀只是一时，平淡才是一世） 该做的事情（往后的路靠自己走） 感情",content:"你好，有缘人，我是老寇，欢迎来到老寇云平台!\n\n我把自己所知道的，想说的内容，分享一下，以下内容来自自己的所思所想\n\n\n# 真传一句话，假传万卷书\n\n# 修身（出来混迟早要还）\n\n * 不借网贷（信用网贷、高利贷、校园贷）\n * 没有实力不炒股\n * 不做违法犯罪行为（诈骗、嫖娼）\n * 擦了自己的眼睛，不要因为好奇，结交社会上不三不四的人士（你在凝望深渊，深渊也在凝望你）\n * 切勿沉迷游戏或手机，不要被网上乱七八糟的言论或不良信息带偏\n * 不抽烟\n * 不喝酒\n * 不嫖娼\n * 不吸毒\n * 不嚼槟榔\n * 不赌博（赌球、飞艇、百家乐）\n * 不约炮/不打飞机/不YY/不手淫/不自慰/不行邪淫/不看一切不良视频图片影像音频（食色性也不是安慰自己放纵的理由，而且这个'色' 指的是美好的事物，而不是两性）\n * 减少说脏话的频率，提高素质\n * 不要因为好奇纹身，一旦纹身了就要为自己的行为负责（因为不是每个人都喜欢纹身的人，我直接跟你说，其实，大部分人都不喜欢纹身的人）\n * 不要打架，打赢坐牢，打输住院（现在，人比较浮躁，戾气重，万一别人不管不顾，下死手，发泄自己的情绪，那就是有你受的啦）\n * 不要随便跟人私奔，也不要随便和一个男人/女人上床\n\n# 养生（自己不爱惜自己身体，谁又会心疼你呢？）\n\n * 堵漏（身体有病治病，无病则改正不良习惯，比如熬夜，放纵）\n * 饮食清淡，切记过饥过饱，建议喝粥养胃\n * 调节自己的心情，保持乐观的生活态度\n * 锻炼身体（身体羸弱可以尝试八段锦/八部金刚，身体好点可以仰卧起坐/俯卧撑/跑步，根据自己的身体条件适当锻炼）\n * 但行好事莫问前程，好的念头会导致好的结果（吸引力法则）\n * 早睡早起，一定要吃早餐\n\n# 分享（荣耀只是一时，平淡才是一世）\n\n * 活在当下，努力做好当前的事情，其他交给天意\n * 允许自己失败\n * 允许自己普通，知足常乐\n * 认真思考每件事本身的意义\n * 做好是一辈子的事情，做坏是一瞬间的事情\n * 自己治愈自己，明天醒来，又是信心百倍\n * 不被他人影响，坚定自我信念\n * 悄悄努力，一鸣惊人（事以密成，语以泄败）\n * 坚持坚持再坚持\n * 空杯心态，虚怀若谷\n * 爱自己的前提就是照顾好自己身体\n\n# 该做的事情（往后的路靠自己走）\n\n * 不跪天不跪地，只跪自己父母（人活一世，父母才是对你心心念念的人，父母不在，谁会记得你的名字？谁又会想起你？）\n * 不要想太多，不要妄想一夜暴富，踏实活着，认真学习，稳步前进，独立自强（别人不能帮你走路，只能自己含泪奔跑）\n * 有问题就向外反馈，有志同道合的朋友就一起面对问题，不要妄想什么事情都自己扛下来\n * 培养自己的兴趣爱好，说不定他就是你未来从事的职业或者靠它谋生\n * 做一件事最好的时间是十年前，其次是现在（慢慢积累，量变产生质变）\n * 知错能改，善莫大焉\n * 明辨是非，认真思考你后面遇到的事情（父母说的不一定对，但自己必须能够明辨是非）\n * 培养口才，只要和人打交道就要沟通，说话是一门艺术，必须好好琢磨，多思考多反思，说话前多想想，而且还要察言观色，这样才能快速进步\n * 低调做人，高调做事（现在，人戾气重，不得不说，网上笑哈哈，现实又是怎么样的你也不知道，网络隔着屏幕，无人知晓屏幕后又是怎么样的）\n * 与人为善，能帮就帮\n * 不怕事，也不惹事（维护自己的正当权益，不让自己的利益受损就行）\n * 尊重每一个人，这样可以避免很多麻烦（无论疾病、残疾、外貌、学历、宗教信仰，文化、性取向等等）\n * 理性思考后面发生的一切，积极承担属于自己的责任，以及与自己相关的一切后果\n * 杜绝随便造谣，捏造不存在的事情（轻则点名批评，重则构成犯罪，进行行政处罚）( 作为公众人物，更加要注意自己的行为言论，不然就是引火上身，咎由自取)\n * 政治问题什么的禁止讨论，不然就是引火上身\n\n# 感情\n\n * 对于别人的感情，始终处于中立的态度，不发表意见，不然最后受伤的是自己（两人一旦分手，可能会怨你什么什么的）\n * 在外人看来，两人分手，其实两个人都有问题，但不排除单方面的原因，比如出轨/家暴\n\n我是老寇，我们下次再见啦！",normalizedContent:"你好，有缘人，我是老寇，欢迎来到老寇云平台!\n\n我把自己所知道的，想说的内容，分享一下，以下内容来自自己的所思所想\n\n\n# 真传一句话，假传万卷书\n\n# 修身（出来混迟早要还）\n\n * 不借网贷（信用网贷、高利贷、校园贷）\n * 没有实力不炒股\n * 不做违法犯罪行为（诈骗、嫖娼）\n * 擦了自己的眼睛，不要因为好奇，结交社会上不三不四的人士（你在凝望深渊，深渊也在凝望你）\n * 切勿沉迷游戏或手机，不要被网上乱七八糟的言论或不良信息带偏\n * 不抽烟\n * 不喝酒\n * 不嫖娼\n * 不吸毒\n * 不嚼槟榔\n * 不赌博（赌球、飞艇、百家乐）\n * 不约炮/不打飞机/不yy/不手淫/不自慰/不行邪淫/不看一切不良视频图片影像音频（食色性也不是安慰自己放纵的理由，而且这个'色' 指的是美好的事物，而不是两性）\n * 减少说脏话的频率，提高素质\n * 不要因为好奇纹身，一旦纹身了就要为自己的行为负责（因为不是每个人都喜欢纹身的人，我直接跟你说，其实，大部分人都不喜欢纹身的人）\n * 不要打架，打赢坐牢，打输住院（现在，人比较浮躁，戾气重，万一别人不管不顾，下死手，发泄自己的情绪，那就是有你受的啦）\n * 不要随便跟人私奔，也不要随便和一个男人/女人上床\n\n# 养生（自己不爱惜自己身体，谁又会心疼你呢？）\n\n * 堵漏（身体有病治病，无病则改正不良习惯，比如熬夜，放纵）\n * 饮食清淡，切记过饥过饱，建议喝粥养胃\n * 调节自己的心情，保持乐观的生活态度\n * 锻炼身体（身体羸弱可以尝试八段锦/八部金刚，身体好点可以仰卧起坐/俯卧撑/跑步，根据自己的身体条件适当锻炼）\n * 但行好事莫问前程，好的念头会导致好的结果（吸引力法则）\n * 早睡早起，一定要吃早餐\n\n# 分享（荣耀只是一时，平淡才是一世）\n\n * 活在当下，努力做好当前的事情，其他交给天意\n * 允许自己失败\n * 允许自己普通，知足常乐\n * 认真思考每件事本身的意义\n * 做好是一辈子的事情，做坏是一瞬间的事情\n * 自己治愈自己，明天醒来，又是信心百倍\n * 不被他人影响，坚定自我信念\n * 悄悄努力，一鸣惊人（事以密成，语以泄败）\n * 坚持坚持再坚持\n * 空杯心态，虚怀若谷\n * 爱自己的前提就是照顾好自己身体\n\n# 该做的事情（往后的路靠自己走）\n\n * 不跪天不跪地，只跪自己父母（人活一世，父母才是对你心心念念的人，父母不在，谁会记得你的名字？谁又会想起你？）\n * 不要想太多，不要妄想一夜暴富，踏实活着，认真学习，稳步前进，独立自强（别人不能帮你走路，只能自己含泪奔跑）\n * 有问题就向外反馈，有志同道合的朋友就一起面对问题，不要妄想什么事情都自己扛下来\n * 培养自己的兴趣爱好，说不定他就是你未来从事的职业或者靠它谋生\n * 做一件事最好的时间是十年前，其次是现在（慢慢积累，量变产生质变）\n * 知错能改，善莫大焉\n * 明辨是非，认真思考你后面遇到的事情（父母说的不一定对，但自己必须能够明辨是非）\n * 培养口才，只要和人打交道就要沟通，说话是一门艺术，必须好好琢磨，多思考多反思，说话前多想想，而且还要察言观色，这样才能快速进步\n * 低调做人，高调做事（现在，人戾气重，不得不说，网上笑哈哈，现实又是怎么样的你也不知道，网络隔着屏幕，无人知晓屏幕后又是怎么样的）\n * 与人为善，能帮就帮\n * 不怕事，也不惹事（维护自己的正当权益，不让自己的利益受损就行）\n * 尊重每一个人，这样可以避免很多麻烦（无论疾病、残疾、外貌、学历、宗教信仰，文化、性取向等等）\n * 理性思考后面发生的一切，积极承担属于自己的责任，以及与自己相关的一切后果\n * 杜绝随便造谣，捏造不存在的事情（轻则点名批评，重则构成犯罪，进行行政处罚）( 作为公众人物，更加要注意自己的行为言论，不然就是引火上身，咎由自取)\n * 政治问题什么的禁止讨论，不然就是引火上身\n\n# 感情\n\n * 对于别人的感情，始终处于中立的态度，不发表意见，不然最后受伤的是自己（两人一旦分手，可能会怨你什么什么的）\n * 在外人看来，两人分手，其实两个人都有问题，但不排除单方面的原因，比如出轨/家暴\n\n我是老寇，我们下次再见啦！",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"觉悟日记（一）",frontmatter:{title:"觉悟日记（一）",date:"2024-09-16T20:46:10.000Z",permalink:"/pages/b5ee4c/"},regularPath:"/03.%E6%84%9F%E6%82%9F/03.%E8%A7%89%E6%82%9F/00.%E8%A7%89%E6%82%9F%E6%97%A5%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89.html",relativePath:"03.感悟/03.觉悟/00.觉悟日记（一）.md",key:"v-1454054f",path:"/pages/b5ee4c/",headersStr:null,content:"你好，有缘人，我是老寇，欢迎来到老寇云平台!\n\n世间万物皆由原子构成，还存在能量场。古人说：近朱者赤近墨者黑，是有一番道理的！\n\n宇宙是一个全息的信息能量场，每个人的念头都会影响到整体，也会导致自己的人生运势发生变化，因此，好的念头导致好的结果，坏的念头导致坏的结果，祸福无门，惟人自召，善恶之报，如影随形！\n\n古人说，往者不可谏，来者犹可追，现在的你，是你过去的你所造的，无论是经历了磨难，还是痛苦，又或是幸福。这都将成为你人生道路上不可磨灭的经历，构成了你的人生阅历。 未来的你，是现在的你所造的，你的性格、你的处事方式都会影响到未来的你，因此，从现在起，可以认真在脑海里想想未来的你是什么模样，并且为成为的你而不断的努力精进！\n\n我的朋友们，现在，我告诉你，你可以成为任何你想成为的人，你是不是感到很惊讶！ 是的，我听到这个也很惊讶，不过，这个确实可以做到，以我自己为例，我还记得我高中的时候，希望自己以后搞软件开发，这么多年过去，我也做到啦！ 话又说回来，如果，仅仅只是想一想，那是不可能做到，还需要自己去做，知行合一，格物致知！\n\n人的性格会因为环境而改变，并不是不能改变，换一个陌生环境会表现出不同的性格。因此，可以说性能是可以重塑的！\n\n人总会死亡，随着年龄的增长，身体会出现各种疾病，再加上暴饮暴食、熬夜纵欲，可能二十几岁的身体就已经未老先衰！ 有的人身体已发出报警，但自己不重视，错过了最佳治疗时间。有的人因患病搞得人心惶惶，整夜难眠，因为恐惧，然后病急乱投医，请神棍，拜菩萨，搞得神神叨叨，但就是不肯去医院！\n\n谁也不知道，明天和意外谁先到，身患重病的朋友，需遵守医生的嘱咐，配合治疗！不可熬夜纵欲，生命只有一次，你从几十亿个兄弟中脱颖而出，经历了世间太多的磨难，好不容易长大成人，却因为自己不爱惜自己的身体而身患重病\n\n科学和宗教相互影响，众所周知，科学只能解释自然现象，对于一些超自然现象无法解释，因此，引入宗教，用神学来解释超自然现象，但我作为一个无神论者，我不信这个，同时，我也不会诽谤，我尊重它！\n\n我是老寇，我们下次再见啦！\n\n注：感谢之前写的这篇文章（2024/12/19）\n\n人生的意义什么？我想是体验生活，既然选择了自己要走的路，就努力向前走！",normalizedContent:"你好，有缘人，我是老寇，欢迎来到老寇云平台!\n\n世间万物皆由原子构成，还存在能量场。古人说：近朱者赤近墨者黑，是有一番道理的！\n\n宇宙是一个全息的信息能量场，每个人的念头都会影响到整体，也会导致自己的人生运势发生变化，因此，好的念头导致好的结果，坏的念头导致坏的结果，祸福无门，惟人自召，善恶之报，如影随形！\n\n古人说，往者不可谏，来者犹可追，现在的你，是你过去的你所造的，无论是经历了磨难，还是痛苦，又或是幸福。这都将成为你人生道路上不可磨灭的经历，构成了你的人生阅历。 未来的你，是现在的你所造的，你的性格、你的处事方式都会影响到未来的你，因此，从现在起，可以认真在脑海里想想未来的你是什么模样，并且为成为的你而不断的努力精进！\n\n我的朋友们，现在，我告诉你，你可以成为任何你想成为的人，你是不是感到很惊讶！ 是的，我听到这个也很惊讶，不过，这个确实可以做到，以我自己为例，我还记得我高中的时候，希望自己以后搞软件开发，这么多年过去，我也做到啦！ 话又说回来，如果，仅仅只是想一想，那是不可能做到，还需要自己去做，知行合一，格物致知！\n\n人的性格会因为环境而改变，并不是不能改变，换一个陌生环境会表现出不同的性格。因此，可以说性能是可以重塑的！\n\n人总会死亡，随着年龄的增长，身体会出现各种疾病，再加上暴饮暴食、熬夜纵欲，可能二十几岁的身体就已经未老先衰！ 有的人身体已发出报警，但自己不重视，错过了最佳治疗时间。有的人因患病搞得人心惶惶，整夜难眠，因为恐惧，然后病急乱投医，请神棍，拜菩萨，搞得神神叨叨，但就是不肯去医院！\n\n谁也不知道，明天和意外谁先到，身患重病的朋友，需遵守医生的嘱咐，配合治疗！不可熬夜纵欲，生命只有一次，你从几十亿个兄弟中脱颖而出，经历了世间太多的磨难，好不容易长大成人，却因为自己不爱惜自己的身体而身患重病\n\n科学和宗教相互影响，众所周知，科学只能解释自然现象，对于一些超自然现象无法解释，因此，引入宗教，用神学来解释超自然现象，但我作为一个无神论者，我不信这个，同时，我也不会诽谤，我尊重它！\n\n我是老寇，我们下次再见啦！\n\n注：感谢之前写的这篇文章（2024/12/19）\n\n人生的意义什么？我想是体验生活，既然选择了自己要走的路，就努力向前走！",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"儒学摘抄(一)",frontmatter:{title:"儒学摘抄(一)",date:"2024-09-27T07:10:09.000Z",permalink:"/pages/85233a/"},regularPath:"/04.%E6%91%98%E6%8A%84/01.%E5%84%92%E5%AD%A6/00.%E5%84%92%E5%AD%A6%E6%91%98%E6%8A%84%EF%BC%88%E4%B8%80%EF%BC%89.html",relativePath:"04.摘抄/01.儒学/00.儒学摘抄（一）.md",key:"v-a8d5efd0",path:"/pages/85233a/",headersStr:null,content:"你好，有缘人，我是老寇，欢迎来到老寇云平台!\n\n * 穷则独善其身，达则兼济天下。",normalizedContent:"你好，有缘人，我是老寇，欢迎来到老寇云平台!\n\n * 穷则独善其身，达则兼济天下。",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"禅语摘抄(一)",frontmatter:{title:"禅语摘抄(一)",date:"2024-09-27T06:52:03.000Z",permalink:"/pages/59b0b4/"},regularPath:"/04.%E6%91%98%E6%8A%84/02.%E7%A6%85%E5%AD%A6/00.%E7%A6%85%E8%AF%AD%E6%91%98%E6%8A%84%EF%BC%88%E4%B8%80%EF%BC%89.html",relativePath:"04.摘抄/02.禅学/00.禅语摘抄（一）.md",key:"v-33d07a2c",path:"/pages/59b0b4/",headersStr:null,content:"你好，有缘人，我是老寇，欢迎来到老寇云平台!\n\n * 生来一无所有，何惧从头再来。水到绝处是飞瀑，人到绝处是重生。\n * 缘起性空，自性本空。诸行无常，是生灭法。\n * 来时一丝不挂，去时一缕青烟。\n * 缘起缘灭缘终尽，花开花落花归尘。",normalizedContent:"你好，有缘人，我是老寇，欢迎来到老寇云平台!\n\n * 生来一无所有，何惧从头再来。水到绝处是飞瀑，人到绝处是重生。\n * 缘起性空，自性本空。诸行无常，是生灭法。\n * 来时一丝不挂，去时一缕青烟。\n * 缘起缘灭缘终尽，花开花落花归尘。",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"道法摘抄（一）",frontmatter:{title:"道法摘抄（一）",date:"2024-09-27T09:39:19.000Z",permalink:"/pages/e03540/"},regularPath:"/04.%E6%91%98%E6%8A%84/04.%E9%81%93%E6%B3%95/00.%E9%81%93%E6%B3%95%E6%91%98%E6%8A%84%EF%BC%88%E4%B8%80%EF%BC%89.html",relativePath:"04.摘抄/04.道法/00.道法摘抄（一）.md",key:"v-9deea25c",path:"/pages/e03540/",headersStr:null,content:"你好，有缘人，我是老寇，欢迎来到老寇云平台!\n\n * 能遣之者，内观于心，心无其心；外观于形，形无其形；远观于物，物无其物。",normalizedContent:"你好，有缘人，我是老寇，欢迎来到老寇云平台!\n\n * 能遣之者，内观于心，心无其心；外观于形，形无其形；远观于物，物无其物。",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"养生摘抄（一）",frontmatter:{title:"养生摘抄（一）",date:"2025-02-24T19:39:19.000Z",permalink:"/pages/e03541/"},regularPath:"/04.%E6%91%98%E6%8A%84/05.%E5%85%BB%E7%94%9F/00.%E5%85%BB%E7%94%9F%E6%91%98%E6%8A%84%EF%BC%88%E4%B8%80%EF%BC%89.html",relativePath:"04.摘抄/05.养生/00.养生摘抄（一）.md",key:"v-649ecfa8",path:"/pages/e03541/",headersStr:null,content:"1.当人大病初愈，或者病刚刚好的时候，不要吃冷的[生的、冷的、寒性、]，不易消化食物[油腻、粘稠]。\n\n2.指甲跟人肝胆的功能密切相关。肝的气血充足不充足，是通过指甲表现出来的。判断人的肝血足不足，就按压一下自己的指甲，然后很快地放开。如果你的血色能够很快恢复，说明肝血比较充足，而当你按压以后放开很久，还是煞白的颜色，这就是说你的肝气很弱肝血很虚了。肝的气血虚到一定程度的人还会出现指甲变得很软很脆，很容易开裂或撕裂，到这个时候，大家就不能局限于观察指甲，而应该从根本上寻找肝脏和胆腑的病根去治疗内在的疾患。另外我们中医通过观察人的嘴唇的颜色，来判断脾的气血是否充盈。看到一个没有化妆的人，嘴唇煞白或者干裂脱皮，能够猜想到他内部的脾吸收的功能就差了。脾为气血生化之源，如果脾不能造气生血的话，这时候人的嘴唇就是白色的。\n\n3.春天是生长发育的季节，枯木逢春，是肝胆之气生发的时候，我们应该吃一些具有升发之性，味道偏于辛辣的食物，以鼓舞肝胆之气，化解冬天储藏的能量，发散到体表，为人的体力和脑力活动提供充沛的能量。\n\n4.春天不是吃肉的季节。因为滋补了一个冬天，刚过完年吃了一肚子的油水，到了立春应该开始消肉化积。春天的食谱应该是多吃素少吃肉。\n\n5.健康的人在春天应该避免吃喝酸寒的东西，因为酸的味道有抑制、收敛作用，不利于肝气的宣泄生发。很多人在开春吃饭点菜要酒水的时候，还习惯要一杯果汁，这要是在秋天点果汁再合适不过，可是在春天就不合时宜，特别是对于那些手脚冰凉的人们。春天应该喝一些辛香的花茶、香浓的咖啡，或者烫一壶黄酒，烫黄酒最好不加话梅加点姜丝，甚至还要少喝一些白酒，这都有利于鼓舞生发之气。\n\n6.在五谷之中，小麦对应肝胆，所以春天应该多吃面食，吃面条的时候要少放醋多吃蒜。随着天气逐渐变暖，以后大家还会吃到香椿芽、蒜苗、豆苗、榆钱、柳叶等食物。我们在做饭的时候，也该有意识地多放一些辛辣、芳香、发散的调料。\n\n7.豆子补肾，冬天的时候我们多吃豆腐、喝豆浆，可是到了春天就要改吃豆芽了。而且煮豆芽的水味道鲜美，吃素的人都用它来调味，简直就是素高汤，这比单纯放什么味精、鸡精要好多了。\n\n8.所谓的春困其实与季节无关，而是与人的精气不足有关。春困是冬天没有休息好、精气不足的表现，所以到了春天需要能量生发出来的时候，精气就不够用了，出现了春困。冬天的时候应该早睡晚起。\n\n9.“春三月，此谓发陈，天地俱生，万物以荣，夜卧早起，广步于庭。”春天在五行中属木，与五脏中的肝相对应，主生发和疏泄。和绿意盈盈的植物一样，人在此时也处于生长的状态，通常精神都比较好。这个时候人们应该早睡早起，而且要外出运动，不能晚睡晚起。但是，现在很多年轻人却是更喜欢晚睡晚起，甚至有一些人从来没在夜里12点以前睡过觉，殊不知这是违反自然规律的。\n\n10.向右侧卧位，不要压迫心脏；要穿宽松的衣服，不要穿紧身衣，祼睡其实是一个好习惯；睡前不要看恐怖片，当参加了一些剧烈活动或者兴奋的聚会之后，回家应该首先要静坐，心情平静之后再睡觉，不然兴奋过头，反而容易睡不着；不要思虑太多，困了就赶紧睡，不要透支自己的体能，困过劲了之后，反而无法入睡。\n\n11.春天应该吃助阳醒脾的食物，如辛、辣的食物；少吃滋补、味甜、肥腻的食物，以免生湿生痰，造成痰迷心窍。痰湿体质的人往往整天昏昏沉沉、浑浑噩噩。\n\n12.春天的早晨最好是冲泡一碗燕麦粥，或者是揪一碗面片汤或者面疙瘩汤，加一点稍微辛香的有助于肝气生发的食材，如香菜，再加入一些有香味的调料，比如姜片、砂仁、桂皮，还可以加入少量有助于春天生发的羊肉或鸡肉。这样吃一顿早饭，能够保证你一天精力充沛，缓解春困。",normalizedContent:"1.当人大病初愈，或者病刚刚好的时候，不要吃冷的[生的、冷的、寒性、]，不易消化食物[油腻、粘稠]。\n\n2.指甲跟人肝胆的功能密切相关。肝的气血充足不充足，是通过指甲表现出来的。判断人的肝血足不足，就按压一下自己的指甲，然后很快地放开。如果你的血色能够很快恢复，说明肝血比较充足，而当你按压以后放开很久，还是煞白的颜色，这就是说你的肝气很弱肝血很虚了。肝的气血虚到一定程度的人还会出现指甲变得很软很脆，很容易开裂或撕裂，到这个时候，大家就不能局限于观察指甲，而应该从根本上寻找肝脏和胆腑的病根去治疗内在的疾患。另外我们中医通过观察人的嘴唇的颜色，来判断脾的气血是否充盈。看到一个没有化妆的人，嘴唇煞白或者干裂脱皮，能够猜想到他内部的脾吸收的功能就差了。脾为气血生化之源，如果脾不能造气生血的话，这时候人的嘴唇就是白色的。\n\n3.春天是生长发育的季节，枯木逢春，是肝胆之气生发的时候，我们应该吃一些具有升发之性，味道偏于辛辣的食物，以鼓舞肝胆之气，化解冬天储藏的能量，发散到体表，为人的体力和脑力活动提供充沛的能量。\n\n4.春天不是吃肉的季节。因为滋补了一个冬天，刚过完年吃了一肚子的油水，到了立春应该开始消肉化积。春天的食谱应该是多吃素少吃肉。\n\n5.健康的人在春天应该避免吃喝酸寒的东西，因为酸的味道有抑制、收敛作用，不利于肝气的宣泄生发。很多人在开春吃饭点菜要酒水的时候，还习惯要一杯果汁，这要是在秋天点果汁再合适不过，可是在春天就不合时宜，特别是对于那些手脚冰凉的人们。春天应该喝一些辛香的花茶、香浓的咖啡，或者烫一壶黄酒，烫黄酒最好不加话梅加点姜丝，甚至还要少喝一些白酒，这都有利于鼓舞生发之气。\n\n6.在五谷之中，小麦对应肝胆，所以春天应该多吃面食，吃面条的时候要少放醋多吃蒜。随着天气逐渐变暖，以后大家还会吃到香椿芽、蒜苗、豆苗、榆钱、柳叶等食物。我们在做饭的时候，也该有意识地多放一些辛辣、芳香、发散的调料。\n\n7.豆子补肾，冬天的时候我们多吃豆腐、喝豆浆，可是到了春天就要改吃豆芽了。而且煮豆芽的水味道鲜美，吃素的人都用它来调味，简直就是素高汤，这比单纯放什么味精、鸡精要好多了。\n\n8.所谓的春困其实与季节无关，而是与人的精气不足有关。春困是冬天没有休息好、精气不足的表现，所以到了春天需要能量生发出来的时候，精气就不够用了，出现了春困。冬天的时候应该早睡晚起。\n\n9.“春三月，此谓发陈，天地俱生，万物以荣，夜卧早起，广步于庭。”春天在五行中属木，与五脏中的肝相对应，主生发和疏泄。和绿意盈盈的植物一样，人在此时也处于生长的状态，通常精神都比较好。这个时候人们应该早睡早起，而且要外出运动，不能晚睡晚起。但是，现在很多年轻人却是更喜欢晚睡晚起，甚至有一些人从来没在夜里12点以前睡过觉，殊不知这是违反自然规律的。\n\n10.向右侧卧位，不要压迫心脏；要穿宽松的衣服，不要穿紧身衣，祼睡其实是一个好习惯；睡前不要看恐怖片，当参加了一些剧烈活动或者兴奋的聚会之后，回家应该首先要静坐，心情平静之后再睡觉，不然兴奋过头，反而容易睡不着；不要思虑太多，困了就赶紧睡，不要透支自己的体能，困过劲了之后，反而无法入睡。\n\n11.春天应该吃助阳醒脾的食物，如辛、辣的食物；少吃滋补、味甜、肥腻的食物，以免生湿生痰，造成痰迷心窍。痰湿体质的人往往整天昏昏沉沉、浑浑噩噩。\n\n12.春天的早晨最好是冲泡一碗燕麦粥，或者是揪一碗面片汤或者面疙瘩汤，加一点稍微辛香的有助于肝气生发的食材，如香菜，再加入一些有香味的调料，比如姜片、砂仁、桂皮，还可以加入少量有助于春天生发的羊肉或鸡肉。这样吃一顿早饭，能够保证你一天精力充沛，缓解春困。",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"诗词摘抄(一)",frontmatter:{title:"诗词摘抄(一)",date:"2024-09-27T06:51:40.000Z",permalink:"/pages/f8adf5/"},regularPath:"/04.%E6%91%98%E6%8A%84/03.%E8%AF%97%E8%AF%8D/00.%E8%AF%97%E8%AF%8D%E6%91%98%E6%8A%84%EF%BC%88%E4%B8%80%EF%BC%89.html",relativePath:"04.摘抄/03.诗词/00.诗词摘抄（一）.md",key:"v-f4a666ec",path:"/pages/f8adf5/",headersStr:null,content:"你好，有缘人，我是老寇，欢迎来到老寇云平台!\n\n * 知行合一，格物致知。\n * 海内存知己，天涯若比邻。\n * 乱花渐欲迷人眼，浅草才能没马蹄。\n * 两岸猿声啼不住，轻舟已过万重山。\n * 忽如一夜春风来，千树万树梨花开。\n * 两情若是长久时，又岂在朝朝暮暮。\n * 人生若只如初见，何事秋风悲画扇。\n * 曾经沧海难为水，除却巫山不是云。\n * 回眸一笑百媚生，六宫粉黛无颜色。\n * 同是天涯沦落人，相逢何必曾相识。",normalizedContent:"你好，有缘人，我是老寇，欢迎来到老寇云平台!\n\n * 知行合一，格物致知。\n * 海内存知己，天涯若比邻。\n * 乱花渐欲迷人眼，浅草才能没马蹄。\n * 两岸猿声啼不住，轻舟已过万重山。\n * 忽如一夜春风来，千树万树梨花开。\n * 两情若是长久时，又岂在朝朝暮暮。\n * 人生若只如初见，何事秋风悲画扇。\n * 曾经沧海难为水，除却巫山不是云。\n * 回眸一笑百媚生，六宫粉黛无颜色。\n * 同是天涯沦落人，相逢何必曾相识。",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"归档",frontmatter:{archivesPage:!0,title:"归档",permalink:"/archives/",article:!1},regularPath:"/@pages/archivesPage.html",relativePath:"@pages/archivesPage.md",key:"v-0a41a4fc",path:"/archives/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3},{title:"Home",frontmatter:{home:!0,heroImage:"/img/logo.png",heroText:"KCloud-Platform-IoT",tagline:"🚀一个企业级微服务架构的IoT云平台",actionText:"开始使用 →",actionLink:"/pages/a2f161/",bannerBg:"none",features:[{title:"专注业务",details:"集成业界成熟的解决方案，专注于业务开发"},{title:"持续更新",details:"采用主流技术栈，社区活跃且持续更新"},{title:"追求性能",details:"版本持续迭代，追求更高性能"}],postList:"none"},regularPath:"/",relativePath:"index.md",key:"v-5ea34d4a",path:"/",headers:[{level:2,title:"⚡ 反馈与交流",slug:"⚡-反馈与交流",normalizedTitle:"⚡ 反馈与交流",charIndex:12}],headersStr:"⚡ 反馈与交流",content:"支持这个项目\n\n\n\n# ⚡ 反馈与交流\n\n在使用过程中有任何问题和想法，请给我提 Issue。 你也可以在Issue查看别人提的问题和给出解决方案。\n\n我们的公众号：\n\n巅峰诞生虚伪的拥护，黄昏见证虔诚的信徒\n",normalizedContent:"支持这个项目\n\n\n\n# ⚡ 反馈与交流\n\n在使用过程中有任何问题和想法，请给我提 issue。 你也可以在issue查看别人提的问题和给出解决方案。\n\n我们的公众号：\n\n巅峰诞生虚伪的拥护，黄昏见证虔诚的信徒\n",charsets:{cjk:!0},lastUpdated:"8/9/2025, 3:26:14 PM",lastUpdatedTimestamp:1754753174e3}],themeConfig:{nav:[{text:"首页",link:"/"},{text:"指南",link:"/pages/a2f161/",items:[{text:"开发手册",items:[{text:"组件【ai】",link:"/pages/zj00/"},{text:"组件【algorithm】",link:"/pages/zj01/"},{text:"组件【banner】",link:"/pages/zj02/"},{text:"组件【core】",link:"/pages/zj04/"},{text:"组件【bom】",link:"/pages/zj05/"},{text:"组件【cors】",link:"/pages/zj06/"},{text:"组件【domain】",link:"/pages/zj07/"},{text:"组件【crypto】",link:"/pages/zj08/"},{text:"组件【data-cache】",link:"/pages/zj09/"},{text:"组件【elasticsearch】",link:"/pages/zj11/"},{text:"组件【excel】",link:"/pages/zj12/"},{text:"组件【i18n】",link:"/pages/zj16/"},{text:"组件【idempotent】",link:"/pages/zj17/"},{text:"组件【influxdb】",link:"/pages/zj18/"},{text:"组件【kafka】",link:"/pages/zj19/"},{text:"组件【log】",link:"/pages/zj20/"},{text:"组件【lock】",link:"/pages/zj21/"},{text:"组件【mail】",link:"/pages/zj22/"},{text:"组件【log4j2】",link:"/pages/zj23/"},{text:"组件【mqtt】",link:"/pages/zj24/"},{text:"组件【mybatis-plus】",link:"/pages/zj26/"},{text:"组件【nacos】",link:"/pages/zj27/"},{text:"组件【netty】",link:"/pages/zj28/"},{text:"组件【openapi-doc】",link:"/pages/zj29/"},{text:"组件【oss】",link:"/pages/zj31/"},{text:"组件【prometheus】",link:"/pages/zj32/"},{text:"组件【rate-limiter】",link:"/pages/zj34/"},{text:"组件【reactor】",link:"/pages/zj35/"},{text:"组件【redis】",link:"/pages/zj36/"},{text:"组件【secret】",link:"/pages/zj39/"},{text:"组件【security】",link:"/pages/zj40/"},{text:"组件【sensitive】",link:"/pages/zj41/"},{text:"组件【sms】",link:"/pages/zj43/"},{text:"组件【snail-job】",link:"/pages/zj44/"},{text:"组件【storage】",link:"/pages/zj48/"},{text:"组件【tdengine】",link:"/pages/zj49/"},{text:"组件【tenant】",link:"/pages/zj50/"},{text:"组件【test】",link:"/pages/zj51/"},{text:"组件【trace】",link:"/pages/zj52/"},{text:"组件【xss】",link:"/pages/zj53/"}]},{text:"环境搭建",items:[{text:"Centos7安装Mysql 8.0.33",link:"/pages/a2f161/"},{text:"Centos7安装Redis 7.0.11",link:"/pages/90401a/"},{text:"Centos7安装RocketMQ 5.1.1",link:"/pages/0fb88c/"},{text:"Centos7安装Jdk 17.0.7",link:"/pages/65acfd/"},{text:"Centos7安装Docker 23.0.6",link:"/pages/65acff/"},{text:"Centos7安装Elasticsearch 8.6.2",link:"/pages/d715cf/"},{text:"Docker安装RabbitMQ 3.12.2",link:"/pages/552b64/"},{text:"Docker安装Postgresql 16.1",link:"/pages/d715cb/"},{text:"Ubuntu20.04安装Docker",link:"/pages/fade19/"},{text:"Ubuntu20.04忘记密码或指纹错误",link:"/pages/d0b936/"}]},{text:"常用命令",items:[{text:"Centos7常用命令",link:"/pages/76bfa2/"},{text:"Centos7常用命令",link:"/pages/2f475f/"}]},{text:"快速上手",link:"/pages/10bfa7/",items:[{text:"项目启动【dev环境】",link:"/pages/10bfa7/"},{text:"项目启动【test环境】",link:"/pages/9fade8/"},{text:"项目启动【prod环境】",link:"/pages/7be29e/"},{text:"更新日志",link:"/pages/b04951/"}]},{text:"前端指南",link:"/pages/a5d759/",items:[{text:"前端启动",link:"/pages/a5d759/"}]},{text:"后端指南",link:"/pages/59afe2/",items:[{text:"COLA代码规范",link:"/pages/59afe2/"},{text:"SSL证书",link:"/pages/10bfa8/"},{text:"一键修改项目模块",link:"/pages/10bfa9/"},{text:"一键生成项目骨架",link:"/pages/1e1e32/"},{text:"一键修改项目版本号",link:"/pages/77f103/"},{text:"一键跳过测试用例",link:"/pages/843853/"},{text:"一键生成后端COLA代码",link:"/pages/889fdb/"},{text:"分布式链路跟踪之ELK日志",link:"/pages/fe2754/"},{text:"一键检查代码规范",link:"/pages/cf6984/"},{text:"动态路由",link:"/pages/4bce44/"}]},{text:"项目部署",link:"/pages/61389d/",items:[{text:"项目部署之镜像打包与推送",link:"/pages/61389d/"}]},{text:"其他",link:"/pages/643da2/",items:[{text:"Java如何快速转Go",link:"/pages/643da2/"},{text:"Go快速开发API",link:"/pages/b4322a/"},{text:"Vue快速开发Api",link:"/pages/52f121/"},{text:"React快速开发Api",link:"/pages/3de3af/"}]},{text:"文章",link:"/pages/330c83/",items:[{text:"物联网之对接MQTT最佳实践",link:"/pages/330c83/"},{text:"物联网之使用Vertx实现MQTT-Server最佳实践【响应式】",link:"/pages/ca4ed7/"},{text:"vue3+lime-echart各种图表使用【懒人专用，建议收藏】",link:"/pages/0aa18d/"},{text:"物联网之使用Vertx实现TCP最佳实践【响应式】",link:"/pages/6da49d/"},{text:"物联网之使用Vertx实现HTTPWebSocket最佳实践【响应式】",link:"/pages/04e661/"},{text:"物联网之使用Vertx实现UDP最佳实践【响应式】",link:"/pages/3e4283/"},{text:"Spring Cloud Gateway实现分布式限流和熔断降级",link:"/pages/4b37fa/"},{text:"物联网之常见网络配置",link:"/pages/9d20f6/"}]},{text:"文章",link:"/pages/a438ae/",items:[{text:"IntelliJ IDEA插件推荐",link:"/pages/a438ae/"}]},{text:"活动",link:"/pages/a438ap/",items:[{text:"KCloud-Platform-IoT 开源三周年快乐&父亲节快乐",link:"/pages/a438ap/"}]}]},{text:"摘抄",link:"/pages/85233a/",items:[{text:"儒学",link:"",items:[{text:"儒学摘抄（一）",link:"/pages/85233a/"}]},{text:"禅语",link:"/pages/59b0b4/",items:[{text:"禅语摘抄（一）",link:"/pages/59b0b4/"}]},{text:"诗词",link:"/pages/f8adf5/",items:[{text:"诗词摘抄（一）",link:"/pages/f8adf5/"}]},{text:"道法",link:"/pages/e03540/",items:[{text:"道法摘抄（一）",link:"/pages/e03540/"}]},{text:"养生",link:"/pages/e03541/",items:[{text:"养生摘抄（一）",link:"/pages/e03541/"}]}]},{text:"感悟",link:"/pages/623577/",items:[{text:"读后感",items:[{text:"读《强者，都是含泪奔跑的人》读后感",link:"/pages/623577/"}]},{text:"修行",items:[{text:"修身/养生/情感",link:"/pages/623578/"}]},{text:"觉悟",items:[{text:"觉悟日记（一）",link:"/pages/b5ee4c/"}]}]},{text:"赞助",link:"/pages/1b12ed/"},{text:"项目课程",link:"https://koushenhai.github.io/KCloud-Platform-IoT"}],sidebarDepth:2,logo:"/img/logo.png",repo:"KouShenhai/KCloud-Platform-IoT",searchMaxSuggestions:10,lastUpdated:"上次更新",sidebar:{"/01.指南/":[{title:"开发手册",collapsable:!1,children:[["00.开发手册/00.组件【ai】.md","组件【ai】","/pages/zj00/"],["00.开发手册/01.组件【algorithm】.md","组件【algorithm】","/pages/zj01/"],["00.开发手册/02.组件【banner】.md","组件【banner】","/pages/zj02/"],["00.开发手册/04.组件【core】.md","组件【core】","/pages/zj04/"],["00.开发手册/05.组件【bom】.md","组件【bom】","/pages/zj05/"],["00.开发手册/06.组件【cors】.md","组件【cors】","/pages/zj06/"],["00.开发手册/07.组件【domain】.md","组件【domain】","/pages/zj07/"],["00.开发手册/08.组件【crypto】.md","组件【crypto】","/pages/zj08/"],["00.开发手册/09.组件【data-cache】.md","组件【data-cache】","/pages/zj09/"],["00.开发手册/11.组件【elasticsearch】.md","组件【elasticsearch】","/pages/zj11/"],["00.开发手册/12.组件【excel】.md","组件【excel】","/pages/zj12/"],["00.开发手册/16.组件【i18n】.md","组件【i18n】","/pages/zj16/"],["00.开发手册/17.组件【idempotent】.md","组件【idempotent】","/pages/zj17/"],["00.开发手册/18.组件【influxdb】.md","组件【influxdb】","/pages/zj18/"],["00.开发手册/19.组件【kafka】.md","组件【kafka】","/pages/zj19/"],["00.开发手册/20.组件【log】.md","组件【log】","/pages/zj20/"],["00.开发手册/21.组件【lock】.md","组件【lock】","/pages/zj21/"],["00.开发手册/22.组件【mail】.md","组件【mail】","/pages/zj22/"],["00.开发手册/23.组件【log4j2】.md","组件【log4j2】","/pages/zj23/"],["00.开发手册/24.组件【mqtt】.md","组件【mqtt】","/pages/zj24/"],["00.开发手册/26.组件【mybatis-plus】.md","组件【mybatis-plus】","/pages/zj26/"],["00.开发手册/27.组件【nacos】.md","组件【nacos】","/pages/zj27/"],["00.开发手册/28.组件【netty】.md","组件【netty】","/pages/zj28/"],["00.开发手册/29.组件【openapi-doc】.md","组件【openapi-doc】","/pages/zj29/"],["00.开发手册/31.组件【oss】.md","组件【oss】","/pages/zj31/"],["00.开发手册/32.组件【prometheus】.md","组件【prometheus】","/pages/zj32/"],["00.开发手册/34.组件【rate-limiter】.md","组件【rate-limiter】","/pages/zj34/"],["00.开发手册/35.组件【reactor】.md","组件【reactor】","/pages/zj35/"],["00.开发手册/36.组件【redis】.md","组件【redis】","/pages/zj36/"],["00.开发手册/39.组件【secret】.md","组件【secret】","/pages/zj39/"],["00.开发手册/40.组件【security】.md","组件【security】","/pages/zj40/"],["00.开发手册/41.组件【sensitive】.md","组件【sensitive】","/pages/zj41/"],["00.开发手册/43.组件【sms】.md","组件【sms】","/pages/zj43/"],["00.开发手册/44.组件【snail-job】.md","组件【snail-job】","/pages/zj44/"],["00.开发手册/48.组件【storage】.md","组件【storage】","/pages/zj48/"],["00.开发手册/49.组件【tdengine】.md","组件【tdengine】","/pages/zj49/"],["00.开发手册/50.组件【tenant】.md","组件【tenant】","/pages/zj50/"],["00.开发手册/51.组件【test】.md","组件【test】","/pages/zj51/"],["00.开发手册/52.组件【trace】.md","组件【trace】","/pages/zj52/"],["00.开发手册/53.组件【xss】.md","组件【xss】","/pages/zj53/"]]},{title:"环境搭建",collapsable:!1,children:[["01.环境搭建/00.Centos7安装Mysql 8.0.33.md","Centos7安装Mysql 8.0.33","/pages/a2f161/"],["01.环境搭建/01.Centos7安装Redis 7.0.11.md","Centos7安装Redis 7.0.11","/pages/90401a/"],["01.环境搭建/02.Centos7安装RocketMQ 5.1.1.md","Centos7安装RocketMQ 5.1.1","/pages/0fb88c/"],["01.环境搭建/03.Centos7安装Jdk 17.0.7.md","Centos7安装Jdk 17.0.7","/pages/65acfd/"],["01.环境搭建/04.Centos7安装Docker 23.0.6.md","Centos7安装Docker 23.0.6","/pages/65acff/"],["01.环境搭建/05.Docker安装RabbitMQ 3.12.2.md","Docker安装RabbitMQ 3.12.2","/pages/552b64/"],["01.环境搭建/06.Centos7安装Elasticsearch 8.6.2.md","Centos7安装Elasticsearch 8.6.2","/pages/d715cf/"],["01.环境搭建/07.Docker安装Postgresql 16.1.md","Docker安装Postgresql 16.1","/pages/d715cb/"],["01.环境搭建/08.Ubuntu20.04安装Docker.md","Ubuntu20.04安装Docker","/pages/fade19/"],["01.环境搭建/09.Ubuntu20.04忘记密码或指纹错误.md","Ubuntu20.04忘记密码或指纹错误","/pages/d0b936/"]]},{title:"常用命令",collapsable:!1,children:[["02.常用命令/00.Centos7常用命令.md","Centos7常用命令","/pages/76bfa2/"],["02.常用命令/01.Docker常用命令.md","Docker常用命令","/pages/2f475f/"]]},{title:"快速上手",collapsable:!1,children:[["03.快速上手/01.项目启动【dev环境】.md","项目启动【dev环境】","/pages/10bfa7/"],["03.快速上手/02.项目启动【test环境】.md","项目启动【test环境】","/pages/9fade8/"],["03.快速上手/03.项目启动【prod环境】.md","项目启动【prod环境】","/pages/7be29e/"],["03.快速上手/04.更新日志.md","更新日志","/pages/b04951/"]]},{title:"前端指南",collapsable:!1,children:[["04.前端指南/00.前端启动.md","前端启动","/pages/a5d759/"]]},{title:"后端指南",collapsable:!1,children:[["05.后端指南/00.COLA代码规范.md","COLA代码规范","/pages/59afe2/"],["05.后端指南/01.SSL证书.md","SSL证书","/pages/10bfa8/"],["05.后端指南/02.一键修改项目模块.md","一键修改项目模块","/pages/10bfa9/"],["05.后端指南/03.一键生成项目骨架.md","一键生成项目骨架","/pages/1e1e32/"],["05.后端指南/04.一键修改项目版本号.md","一键修改项目版本号","/pages/77f103/"],["05.后端指南/05.一键跳过测试用例.md","一键跳过测试用例","/pages/843853/"],["05.后端指南/06.一键生成后端COLA代码.md","一键生成后端COLA代码","/pages/889fdb/"],["05.后端指南/07.分布式链路跟踪之ELK日志.md","分布式链路跟踪之ELK日志","/pages/fe2754/"],["05.后端指南/08.一键检查代码规范.md","一键检查代码规范","/pages/cf6984/"],["05.后端指南/09.动态路由.md","动态路由","/pages/4bce44/"],["05.后端指南/10.OAuth2.1流程.md","OAuth2.1流程","/pages/766b36/"]]},{title:"项目部署",collapsable:!1,children:[["06.项目部署/00.项目部署之镜像打包与推送.md","项目部署之镜像打包与推送","/pages/61389d/"]]},{title:"其他",collapsable:!1,children:[["07.其他/00.Java如何快速转Go.md","Java如何快速转Go","/pages/643da2/"],["07.其他/01.Go快速开发API.md","Go快速开发API","/pages/b4322a/"],["07.其他/02.Vue快速开发Api.md","Vue快速开发Api","/pages/52f121/"],["07.其他/03.React快速开发Api.md","React快速开发Api","/pages/3de3af/"]]},{title:"文章",collapsable:!1,children:[["08.文章/00.物联网之对接MQTT最佳实践.md","物联网之对接MQTT最佳实践","/pages/330c83/"],["08.文章/01.物联网之使用Vertx实现MQTT-Server最佳实践【响应式】.md","物联网之使用Vertx实现MQTT-Server最佳实践【响应式】","/pages/ca4ed7/"],["08.文章/02.vue3+lime-echart各种图表使用【懒人专用，建议收藏】.md","vue3+lime-echart各种图表使用【懒人专用，建议收藏】","/pages/0aa18d/"],["08.文章/03.物联网之使用Vertx实现TCP最佳实践【响应式】.md","物联网之使用Vertx实现TCP最佳实践【响应式】","/pages/6da49d/"],["08.文章/04.物联网之使用Vertx实现HTTPWebSocket最佳实践.md","物联网之使用Vertx实现HTTPWebSocket最佳实践【响应式】","/pages/04e661/"],["08.文章/05.物联网之使用Vertx实现UDP最佳实践【响应式】.md","物联网之使用Vertx实现UDP最佳实践【响应式】","/pages/3e4283/"],["08.文章/06.Spring Cloud Gateway实现分布式限流和熔断降级.md","Spring Cloud Gateway实现分布式限流和熔断降级","/pages/4b37fa/"],["08.文章/07.物联网之常见网络配置.md","物联网之常见网络配置","/pages/9d20f6/"]]},{title:"推荐",collapsable:!1,children:[["09.推荐/00.IntelliJ IDEA插件推荐.md","IntelliJ IDEA插件推荐","/pages/a438ae/"]]},{title:"活动",collapsable:!1,children:[["10.活动/00.KCloud-Platform-IoT 开源三周年快乐&父亲节快乐.md","KCloud-Platform-IoT 开源三周年快乐&父亲节快乐","/pages/a438ap/"]]}],catalogue:{},"/02.赞助/":[["00.赞助.md","支持这个项目","/pages/1b12ed"]],"/03.感悟/":[{title:"读后感",collapsable:!1,children:[["01.读后感/00.读《强者，都是含泪奔跑的人》读后感.md","读《强者，都是含泪奔跑的人》读后感","/pages/623577/"]]},{title:"修行",collapsable:!1,children:[["02.修行/00.修身_养生_情感.md","修身/养生/情感","/pages/623578/"]]},{title:"觉悟",collapsable:!1,children:[["03.觉悟/00.觉悟日记（一）.md","觉悟日记（一）","/pages/b5ee4c/"]]}],"/04.摘抄/":[{title:"儒学",collapsable:!1,children:[["01.儒学/00.儒学摘抄（一）.md","儒学摘抄(一)","/pages/85233a/"]]},{title:"禅学",collapsable:!1,children:[["02.禅学/00.禅语摘抄（一）.md","禅语摘抄(一)","/pages/59b0b4/"]]},{title:"诗词",collapsable:!1,children:[["03.诗词/00.诗词摘抄（一）.md","诗词摘抄(一)","/pages/f8adf5/"]]},{title:"道法",collapsable:!1,children:[["04.道法/00.道法摘抄（一）.md","道法摘抄（一）","/pages/e03540/"]]},{title:"养生",collapsable:!1,children:[["05.养生/00.养生摘抄（一）.md","养生摘抄（一）","/pages/e03541/"]]}]},updateBar:{showToArticle:!1},pageStyle:"line",category:!1,tag:!1,author:{name:"KCloud-Platform-IoT",href:"https://github.com/KouShenhai"},social:{icons:[{iconClass:"icon-youjian",title:"发邮件",link:"mailto:2413176044@qq.com"},{iconClass:"icon-github",title:"GitHub",link:"https://github.com/KouShenhai"}]},footer:{createYear:2022,copyrightInfo:"laokou | Apache 2.0 License"},htmlModules:{}}};var wl=n(123),El=n(124),Tl=n(21);var Sl={computed:{$filterPosts(){return this.$site.pages.filter(t=>{const{frontmatter:{pageComponent:e,article:n,home:r}}=t;return!(e||!1===n||!0===r)})},$sortPosts(){return(t=this.$filterPosts).sort((t,e)=>{const n=t.frontmatter.sticky,r=e.frontmatter.sticky;return n&&r?n==r?Object(Tl.a)(t,e):n-r:n&&!r?-1:!n&&r?1:Object(Tl.a)(t,e)}),t;var t},$sortPostsByDate(){return(t=this.$filterPosts).sort((t,e)=>Object(Tl.a)(t,e)),t;var t},$groupPosts(){return function(t){const e={},n={};for(let r=0,i=t.length;r<i;r++){const{frontmatter:{categories:i,tags:s}}=t[r];"array"===Object(Tl.n)(i)&&i.forEach(n=>{n&&(e[n]||(e[n]=[]),e[n].push(t[r]))}),"array"===Object(Tl.n)(s)&&s.forEach(e=>{e&&(n[e]||(n[e]=[]),n[e].push(t[r]))})}return{categories:e,tags:n}}(this.$sortPosts)},$categoriesAndTags(){return function(t){const e=[],n=[];for(let n in t.categories)e.push({key:n,length:t.categories[n].length});for(let e in t.tags)n.push({key:e,length:t.tags[e].length});return{categories:e,tags:n}}(this.$groupPosts)}}};Wn.component(wl.default),Wn.component(El.default);function _l(t){return t.toString().padStart(2,"0")}n(276);Wn.component("Badge",()=>Promise.all([n.e(0),n.e(6)]).then(n.bind(null,399))),Wn.component("CodeBlock",()=>Promise.resolve().then(n.bind(null,123))),Wn.component("CodeGroup",()=>Promise.resolve().then(n.bind(null,124)));n(277);var Cl=[({Vue:t,options:e,router:n,siteData:r,isServer:i})=>{i||n.afterEach(()=>{var t;t=function(){setTimeout((function(){window._AdBlockInit}),3e3)},"complete"===document.readyState||"interactive"===document.readyState?setTimeout(t,1):document.addEventListener("DOMContentLoaded",t),setTimeout(()=>{},900)})},({Vue:t,options:e,router:n,siteData:r})=>{r.pages.map(t=>{const{frontmatter:{date:e,author:n}}=t;"string"==typeof e&&"Z"===e.charAt(e.length-1)&&(t.frontmatter.date=function(t){t instanceof Date||(t=new Date(t));return`${t.getUTCFullYear()}-${_l(t.getUTCMonth()+1)}-${_l(t.getUTCDate())} ${_l(t.getUTCHours())}:${_l(t.getUTCMinutes())}:${_l(t.getUTCSeconds())}`}(e)),n?t.author=n:r.themeConfig.author&&(t.author=r.themeConfig.author)}),t.mixin(Sl)},{},({Vue:t})=>{t.mixin({computed:{$dataBlock(){return this.$options.__data__block__}}})},{},{},({router:t})=>{"undefined"!=typeof window&&(window._hmt=window._hmt||[],function(){var t=document.createElement("script");t.src="https://hm.baidu.com/hm.js?01293bffa6c3962016c08ba685c79d78";var e=document.getElementsByTagName("script")[0];e.parentNode.insertBefore(t,e)}(),t.afterEach((function(t){_hmt.push(["_trackPageview",t.fullPath])})))}],Il=[];class ql extends class{constructor(){this.store=new Wn({data:{state:{}}})}$get(t){return this.store.state[t]}$set(t,e){Wn.set(this.store.state,t,e)}$emit(...t){this.store.$emit(...t)}$on(...t){this.store.$on(...t)}}{}Object.assign(ql.prototype,{getPageAsyncComponent:ao,getLayoutAsyncComponent:oo,getAsyncComponent:lo,getVueComponent:co});var Pl={install(t){const e=new ql;t.$vuepress=e,t.prototype.$vuepress=e}};function Al(t,e){const n=e.toLowerCase();return t.options.routes.some(t=>t.path.toLowerCase()===n)}var jl={props:{pageKey:String,slotKey:{type:String,default:"default"}},render(t){const e=this.pageKey||this.$parent.$page.key;return uo("pageKey",e),Wn.component(e)||Wn.component(e,ao(e)),Wn.component(e)?t(e):t("")}},Ol={functional:!0,props:{slotKey:String,required:!0},render:(t,{props:e,slots:n})=>t("div",{class:["content__"+e.slotKey]},n()[e.slotKey])},zl={computed:{openInNewWindowTitle(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},Ml=(n(278),n(279),Object(bl.a)(zl,(function(){var t=this._self._c;return t("span",[t("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[t("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),t("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),t("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports),Dl={functional:!0,render(t,{parent:e,children:n}){if(e._isMounted)return n;e.$once("hook:mounted",()=>{e.$forceUpdate()})}};Wn.config.productionTip=!1,Wn.use($a),Wn.use(Pl),Wn.mixin(function(t,e,n=Wn){!function(t){t.locales&&Object.keys(t.locales).forEach(e=>{t.locales[e].path=e});Object.freeze(t)}(e),n.$vuepress.$set("siteData",e);const r=new(t(n.$vuepress.$get("siteData"))),i=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(r)),s={};return Object.keys(i).reduce((t,e)=>(e.startsWith("$")&&(t[e]=i[e].get),t),s),{computed:s}}(t=>class{setPage(t){this.__page=t}get $site(){return t}get $themeConfig(){return this.$site.themeConfig}get $frontmatter(){return this.$page.frontmatter}get $localeConfig(){const{locales:t={}}=this.$site;let e,n;for(const r in t)"/"===r?n=t[r]:0===this.$page.path.indexOf(r)&&(e=t[r]);return e||n||{}}get $siteTitle(){return this.$localeConfig.title||this.$site.title||""}get $canonicalUrl(){const{canonicalUrl:t}=this.$page.frontmatter;return"string"==typeof t&&t}get $title(){const t=this.$page,{metaTitle:e}=this.$page.frontmatter;if("string"==typeof e)return e;const n=this.$siteTitle,r=t.frontmatter.home?null:t.frontmatter.title||t.title;return n?r?r+" | "+n:n:r||"VuePress"}get $description(){const t=function(t){if(t){const e=t.filter(t=>"description"===t.name)[0];if(e)return e.content}}(this.$page.frontmatter.meta);return t||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}get $lang(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}get $localePath(){return this.$localeConfig.path||"/"}get $themeLocaleConfig(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}get $page(){return this.__page?this.__page:function(t,e){for(let n=0;n<t.length;n++){const r=t[n];if(r.path.toLowerCase()===e.toLowerCase())return r}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}},kl)),Wn.component("Content",jl),Wn.component("ContentSlotsDistributor",Ol),Wn.component("OutboundLink",Ml),Wn.component("ClientOnly",Dl),Wn.component("Layout",oo("Layout")),Wn.component("NotFound",oo("NotFound")),Wn.prototype.$withBase=function(t){const e=this.$site.base;return"/"===t.charAt(0)?e+t.slice(1):t},window.__VUEPRESS__={version:"1.9.10",hash:"9ca2760"},async function(t){const e="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:kl.routerBase||kl.base,n=new $a({base:e,mode:"history",fallback:!1,routes:xl,scrollBehavior:(t,e,n)=>n||(t.hash?!Wn.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(t.hash)}:{x:0,y:0})});!function(t){t.beforeEach((e,n,r)=>{if(Al(t,e.path))r();else if(/(\/|\.html)$/.test(e.path))if(/\/$/.test(e.path)){const n=e.path.replace(/\/$/,"")+".html";Al(t,n)?r(n):r()}else r();else{const n=e.path+"/",i=e.path+".html";Al(t,i)?r(i):Al(t,n)?r(n):r()}})}(n);const r={};try{await Promise.all(Cl.filter(t=>"function"==typeof t).map(e=>e({Vue:Wn,options:r,router:n,siteData:kl,isServer:t})))}catch(t){console.error(t)}return{app:new Wn(Object.assign(r,{router:n,render:t=>t("div",{attrs:{id:"app"}},[t("RouterView",{ref:"layout"}),t("div",{class:"global-ui"},Il.map(e=>t(e)))])})),router:n}}(!1).then(({app:t,router:e})=>{e.onReady(()=>{t.$mount("#app")})})}]);